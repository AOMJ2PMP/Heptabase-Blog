{"ast":null,"code":"import { format } from 'date-fns';\n\n// 数组按时间排序\nconst arrSort = obj => {\n  console.log('arrSort');\n  obj.sort((a, b) => {\n    // 最后编辑时间\n    let t1 = format(new Date(a.lastEditedTime), 'yyyyMMdd');\n    let t2 = format(new Date(b.lastEditedTime), 'yyyyMMdd');\n    return t2.getTime() - t1.getTime();\n  });\n  return obj;\n};\n\n// 修复单个 md 文件中的 img\nconst getClearImag = card => {\n  // 修改图片后缀，避免图片无法显示\n  // 找到 ![]( 符号\n  // 找到上述符号之后的第 1 个 jpg#/png#/gif# 符号\n  // 找到上一个步骤后的第 1 个 ) 符号\n  // 删除前面 2 步 index 中间的符号\n\n  console.log('getClearImag');\n  let content = card['content'];\n\n  // 支持的图片类型\n  let img_type = ['.png', '.jpeg', '.jpg', '.gif'];\n  // 包含以下关键字则认为是图片\n  let img_keyword_index = content.indexOf('![');\n  while (img_keyword_index != -1) {\n    // 获取下一个 ) 索引\n    let img_end_inex = content.indexOf(')', img_keyword_index);\n\n    // 获取下一个 ] 索引\n    let img_alt_end_inex = content.indexOf(']', img_keyword_index);\n\n    // 获取图片扩展名索引\n    let img_etc_index;\n    for (let i = 0; i < img_type.length; i++) {\n      img_etc_index = content.indexOf(img_type[i], img_keyword_index + 1);\n      if (img_etc_index >= 0 && img_etc_index <= img_end_inex) {\n        // 如果格式字符是这种格式 ![....jpg] 内，则跳过\n        if (content.substring(img_etc_index + img_type[i].length, img_etc_index + img_type[i].length + 2) == '](') {\n          img_etc_index = content.indexOf(img_type[i], img_etc_index + 1);\n        }\n        img_etc_index += img_type[i].length;\n        break;\n      }\n    }\n    if (img_keyword_index == -1 || img_end_inex == -1 || img_etc_index == -1) {\n      break;\n    }\n    let img_alt = content.substring(img_keyword_index + 2, img_alt_end_inex);\n    let img_src = content.substring(img_alt_end_inex + 2, img_etc_index);\n    console.log('image keyword');\n    console.log(img_alt);\n    console.log(img_src);\n    let old_img_str = content.substring(img_keyword_index, img_end_inex + 1);\n\n    // 获取 = 索引\n    let img_width_inex = old_img_str.indexOf('=');\n    if (img_width_inex > -1 && old_img_str.indexOf('{{width') < 0) {\n      //将图片宽度保存到 alt 中\n      img_alt = img_alt + '{{width ' + old_img_str.substring(img_width_inex + 1, old_img_str.length - 2) + '}}';\n    }\n    let new_img_str = '![' + img_alt + '](' + img_src + ')';\n    content = content.replace(old_img_str, new_img_str);\n\n    // 获取 ![ 索引\n    img_keyword_index = content.indexOf('![', img_keyword_index + 1);\n  }\n  card['content'] = content;\n  return card;\n};\n\n// 处理单个 md 文件中的超链接\nconst getClearCard = (card, cards) => {\n  console.log('getClearCard');\n  // 找到 (./ 符号以及之后的第 1 个 ，或找到 {{ 符号 }}) 符号，截取这 2 个 index 中间的字符串\n  // 将上述字符串放在 card 数据中匹配\n  // 如果找到匹配的卡片：修改上述字符串的地址为 /post/post.id\n  let content = card['content'];\n  let this_card_id = card['id'];\n\n  // 获取 {{ 符号\n  let card_keyword_index = content.indexOf('{{');\n  while (card_keyword_index != -1) {\n    //获取卡片末尾的索引\n    let card_end_inex = content.indexOf('}}', card_keyword_index);\n    if (card_keyword_index == -1 || card_end_inex == -1) {\n      break;\n    }\n    let old_card = content.substring(card_keyword_index, card_end_inex + 2);\n    // {{card xxxx-xxx-xxxx}}\n    let new_card = '<span class=\"unknown_card\">' + '{{未知卡片}}' + '</span>';\n\n    // 检验一下的确是 card\n    if (old_card.indexOf('card ') >= 0) {\n      // 根据 ID 匹配数据中是否存在此卡片\n\n      for (let i = 0; i < cards.length; i++) {\n        // 处理当前卡片信息\n        if (old_card.indexOf(cards[i]['id']) >= 0) {\n          // 存在：设置卡片链接\n          // new_card = '[' + cards[i]['title'] + ']' + '(' + '/post/' + cards[i]['id'] + ')'\n\n          // path 参数用于点击时加载对应笔记的数据，只有 my_link 类可点击\n          new_card = '<span class=\"my_link\" path=' + '/post/' + cards[i]['id'] + '>' + cards[i]['title'] + '</span>';\n          break;\n        }\n      }\n      content = content.replace(old_card, new_card);\n    } else {}\n    card_keyword_index = content.indexOf('{{', card_keyword_index + 1);\n  }\n\n  // 获取拥有别名的卡片\n  let custom_card_keyword_index = content.indexOf('[');\n  console.log(custom_card_keyword_index);\n  while (custom_card_keyword_index != -1) {\n    if (content[custom_card_keyword_index - 1] == '!') {\n      // 如果是图片则忽略\n    } else {\n      // ](./ 符号\n      let custom_card_name_end_inex = content.indexOf(']', custom_card_keyword_index);\n\n      //获取卡片末尾的索引\n      let custom_card_end_inex = content.indexOf(')', custom_card_keyword_index);\n      let custom_old_card = content.substring(custom_card_keyword_index, custom_card_end_inex + 1);\n      if (custom_old_card.indexOf(']') < 0 || content[custom_card_name_end_inex + 1] != '(') {} else {\n        let custom_card_name = content.substring(custom_card_keyword_index + 1, custom_card_name_end_inex);\n        let custom_card_url = content.substring(custom_card_name_end_inex, custom_card_end_inex);\n        // [name](./url)\n\n        if (custom_card_url.indexOf('./') < 0 || custom_card_url.indexOf('.md') < 0) {\n          // 如果不是 Heptabase 内部链接则忽略\n        } else {\n          // 卡片默认跳转到 404 页面\n          let custom_new_card = '<a class=\"unknown_card\" href=' + '/404/' + '>' + custom_card_name + '</a>';\n\n          // 根据 ID 匹配数据中是否存在此卡片\n\n          for (let i = 0; i < cards.length; i++) {\n            if (custom_old_card.indexOf(cards[i]['id']) >= 0) {\n              // 存在：设置卡片链接\n              custom_new_card = '<span class=\"my_link\" path=' + '/post/' + cards[i]['id'] + '>' + custom_card_name + '</span>';\n              break;\n            }\n          }\n          console.log('custom_new_card:');\n          console.log(custom_new_card);\n          content = content.replace(custom_old_card, custom_new_card);\n        }\n      }\n    }\n    custom_card_keyword_index = content.indexOf('[', custom_card_keyword_index + 1);\n  }\n\n  // 处理反向连接\n  // 如果 A 卡片中存在当前笔记的 ID，则 A 卡片为当前笔记的反向链接之一\n  let backLinks = [];\n  for (let i = 0; i < cards.length; i++) {\n    if (cards[i]['content'].indexOf(this_card_id) >= 0 && cards[i]['id'] != this_card_id) {\n      backLinks.push(cards[i]);\n    }\n  }\n  card['content'] = content;\n  return {\n    'card': card,\n    'backLinks': backLinks\n  };\n};\n\n// 获取 Heptabase 的笔记数据\nconst getHeptabaseData = new Promise((resolve, reject) => {\n  console.log('getHeptabaseData');\n\n  // 获取本地数据\n  let heptabase_blog_data = localStorage.getItem(\"heptabase_blog_data\");\n\n  // 若本地存在数据则不重新获取\n  if (heptabase_blog_data != undefined) {\n    let createdTime = JSON.parse(heptabase_blog_data)['createdTime'];\n    console.log(Date.parse(new Date()) / 1000);\n    console.log(Date.parse(new Date()) / 1000 - createdTime);\n    if (Date.parse(new Date()) / 1000 - createdTime >= 600) {\n      // 数据比较旧时再重新获取\n      console.log('数据比较旧');\n    } else {\n      console.log('从缓存获取数据');\n      // return heptabase_blog_data\n      resolve(JSON.parse(heptabase_blog_data));\n      return;\n    }\n  }\n  console.log('heptabase_blog_data == undefined');\n  const header = new Headers({\n    \"Access-Control-Allow-Origin\": \"*\"\n  });\n\n  // 接口地址\n  const url = 'https://api.dabing.one/';\n  // 获取 Heptabase 数据\n  fetch(url, {\n    method: \"get\",\n    header: header\n    // mode: 'no-cors'\n  }).then(res => res.json()).then(data => {\n    console.log(data);\n\n    // 按照时间排序卡片\n    data.cards = data.cards.sort((a, b) => {\n      // 最近编辑时间\n      return b.lastEditedTime < a.lastEditedTime ? -1 : 1;\n    });\n    let pages = {};\n    // 获取 About、Projects 页面的数据\n    pages.about = undefined;\n    pages.projects = undefined;\n    for (let i = 0; i < data.cards.length; i++) {\n      console.log(data.cards[i]['title']);\n\n      // About\n      if (data.cards[i]['title'] == 'About') {\n        pages.about = data.cards[i];\n      }\n\n      // Projects\n      if (data.cards[i]['title'] == 'Projects') {\n        pages.projects = data.cards[i];\n      }\n    }\n\n    // createdTime 记录数据获取的时间\n    const local_data = {\n      'createdTime': Date.parse(new Date()) / 1000,\n      'data': data,\n      'pages': pages\n    };\n    // 存储数据到本地缓存\n    localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(local_data));\n    // console.log(this.state.posts);\n\n    console.log('getHeptabaseData return');\n    // return heptabase_blog_data\n    resolve(local_data);\n  }).catch(e => console.log('错误:', e));\n});\nexport { getHeptabaseData, getClearImag, getClearCard };","map":{"version":3,"names":["format","arrSort","obj","console","log","sort","a","b","t1","Date","lastEditedTime","t2","getTime","getClearImag","card","content","img_type","img_keyword_index","indexOf","img_end_inex","img_alt_end_inex","img_etc_index","i","length","substring","img_alt","img_src","old_img_str","img_width_inex","new_img_str","replace","getClearCard","cards","this_card_id","card_keyword_index","card_end_inex","old_card","new_card","custom_card_keyword_index","custom_card_name_end_inex","custom_card_end_inex","custom_old_card","custom_card_name","custom_card_url","custom_new_card","backLinks","push","getHeptabaseData","Promise","resolve","reject","heptabase_blog_data","localStorage","getItem","undefined","createdTime","JSON","parse","header","Headers","url","fetch","method","then","res","json","data","pages","about","projects","local_data","setItem","stringify","catch","e"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/constantFunction.js"],"sourcesContent":["import { format } from 'date-fns'\n\n// 数组按时间排序\nconst arrSort = (obj) => {\n    console.log('arrSort');\n    obj.sort((a, b) => {\n        // 最后编辑时间\n        let t1 = format(new Date(a.lastEditedTime), 'yyyyMMdd')\n        let t2 = format(new Date(b.lastEditedTime), 'yyyyMMdd')\n\n        return t2.getTime() - t1.getTime()\n    })\n\n    return obj\n\n}\n\n// 修复单个 md 文件中的 img\nconst getClearImag = (card) => {\n\n    // 修改图片后缀，避免图片无法显示\n    // 找到 ![]( 符号\n    // 找到上述符号之后的第 1 个 jpg#/png#/gif# 符号\n    // 找到上一个步骤后的第 1 个 ) 符号\n    // 删除前面 2 步 index 中间的符号\n\n    console.log('getClearImag');\n\n    let content = card['content']\n\n    // 支持的图片类型\n    let img_type = ['.png', '.jpeg', '.jpg', '.gif']\n    // 包含以下关键字则认为是图片\n    let img_keyword_index = content.indexOf('![')\n\n    while (img_keyword_index != -1) {\n\n\n        // 获取下一个 ) 索引\n        let img_end_inex = content.indexOf(')', img_keyword_index)\n\n        // 获取下一个 ] 索引\n        let img_alt_end_inex = content.indexOf(']', img_keyword_index)\n\n        // 获取图片扩展名索引\n        let img_etc_index\n        for (let i = 0; i < img_type.length; i++) {\n            img_etc_index = content.indexOf(img_type[i], img_keyword_index + 1)\n            if (img_etc_index >= 0 && img_etc_index <= img_end_inex) {\n\n                // 如果格式字符是这种格式 ![....jpg] 内，则跳过\n                if (content.substring(img_etc_index + img_type[i].length, img_etc_index + img_type[i].length + 2) == '](') {\n                    img_etc_index = content.indexOf(img_type[i], img_etc_index + 1)\n\n                }\n\n                img_etc_index += img_type[i].length\n                break;\n\n\n            }\n        }\n\n        if (img_keyword_index == -1 || img_end_inex == -1 || img_etc_index == -1) {\n            break\n        }\n\n        let img_alt = content.substring(img_keyword_index + 2, img_alt_end_inex)\n        let img_src = content.substring(img_alt_end_inex + 2, img_etc_index)\n\n        console.log('image keyword');\n        console.log(img_alt);\n        console.log(img_src);\n\n        let old_img_str = content.substring(img_keyword_index, img_end_inex + 1)\n\n\n        // 获取 = 索引\n        let img_width_inex = old_img_str.indexOf('=')\n\n        if (img_width_inex > -1 && old_img_str.indexOf('{{width') < 0) {\n            //将图片宽度保存到 alt 中\n            img_alt = img_alt + '{{width ' + old_img_str.substring(img_width_inex + 1, old_img_str.length - 2) + '}}'\n        }\n\n        let new_img_str = '![' + img_alt + '](' + img_src + ')'\n\n        content = content.replace(old_img_str, new_img_str)\n\n        // 获取 ![ 索引\n        img_keyword_index = content.indexOf('![', img_keyword_index + 1)\n\n\n    }\n    card['content'] = content\n    return card\n\n}\n\n// 处理单个 md 文件中的超链接\nconst getClearCard = (card, cards) => {\n    console.log('getClearCard');\n    // 找到 (./ 符号以及之后的第 1 个 ，或找到 {{ 符号 }}) 符号，截取这 2 个 index 中间的字符串\n    // 将上述字符串放在 card 数据中匹配\n    // 如果找到匹配的卡片：修改上述字符串的地址为 /post/post.id\n    let content = card['content']\n    let this_card_id = card['id']\n\n\n    // 获取 {{ 符号\n    let card_keyword_index = content.indexOf('{{')\n\n    while (card_keyword_index != -1) {\n\n        //获取卡片末尾的索引\n        let card_end_inex = content.indexOf('}}', card_keyword_index)\n\n        if (card_keyword_index == -1 || card_end_inex == -1) {\n            break\n        }\n\n        let old_card = content.substring(card_keyword_index, card_end_inex + 2)\n        // {{card xxxx-xxx-xxxx}}\n        let new_card = '<span class=\"unknown_card\">' + '{{未知卡片}}' + '</span>'\n\n        // 检验一下的确是 card\n        if (old_card.indexOf('card ') >= 0) {\n\n            // 根据 ID 匹配数据中是否存在此卡片\n\n            for (let i = 0; i < cards.length; i++) {\n\n                // 处理当前卡片信息\n                if (old_card.indexOf(cards[i]['id']) >= 0) {\n                    // 存在：设置卡片链接\n                    // new_card = '[' + cards[i]['title'] + ']' + '(' + '/post/' + cards[i]['id'] + ')'\n\n                    // path 参数用于点击时加载对应笔记的数据，只有 my_link 类可点击\n                    new_card = '<span class=\"my_link\" path=' + '/post/' + cards[i]['id'] + '>' + cards[i]['title'] + '</span>'\n                    break\n                }\n\n\n            }\n\n            content = content.replace(old_card, new_card)\n\n\n        } else {\n\n        }\n\n        card_keyword_index = content.indexOf('{{', card_keyword_index + 1)\n\n    }\n\n\n    // 获取拥有别名的卡片\n    let custom_card_keyword_index = content.indexOf('[')\n    console.log(custom_card_keyword_index);\n    while (custom_card_keyword_index != -1) {\n\n\n        if (content[custom_card_keyword_index - 1] == '!') {\n            // 如果是图片则忽略\n\n        } else {\n\n            // ](./ 符号\n            let custom_card_name_end_inex = content.indexOf(']', custom_card_keyword_index)\n\n            //获取卡片末尾的索引\n            let custom_card_end_inex = content.indexOf(')', custom_card_keyword_index)\n\n            let custom_old_card = content.substring(custom_card_keyword_index, custom_card_end_inex + 1)\n\n            if (custom_old_card.indexOf(']') < 0 || content[custom_card_name_end_inex + 1] != '(') {\n\n\n\n            } else {\n\n                let custom_card_name = content.substring(custom_card_keyword_index + 1, custom_card_name_end_inex)\n                let custom_card_url = content.substring(custom_card_name_end_inex, custom_card_end_inex)\n                // [name](./url)\n\n                if (custom_card_url.indexOf('./') < 0 || custom_card_url.indexOf('.md') < 0) {\n                    // 如果不是 Heptabase 内部链接则忽略\n                } else {\n                    // 卡片默认跳转到 404 页面\n                    let custom_new_card = '<a class=\"unknown_card\" href=' + '/404/' + '>' + custom_card_name + '</a>'\n\n                    // 根据 ID 匹配数据中是否存在此卡片\n\n                    for (let i = 0; i < cards.length; i++) {\n\n                        if (custom_old_card.indexOf(cards[i]['id']) >= 0) {\n                            // 存在：设置卡片链接\n                            custom_new_card = '<span class=\"my_link\" path=' + '/post/' + cards[i]['id'] + '>' + custom_card_name + '</span>'\n\n                            break\n                        }\n\n                    }\n\n                    console.log('custom_new_card:');\n                    console.log(custom_new_card);\n\n                    content = content.replace(custom_old_card, custom_new_card)\n                }\n\n            }\n\n\n\n        }\n\n        custom_card_keyword_index = content.indexOf('[', custom_card_keyword_index + 1)\n\n    }\n\n\n    // 处理反向连接\n    // 如果 A 卡片中存在当前笔记的 ID，则 A 卡片为当前笔记的反向链接之一\n    let backLinks = []\n    for (let i = 0; i < cards.length; i++) {\n\n        if (cards[i]['content'].indexOf(this_card_id) >= 0 && cards[i]['id'] != this_card_id) {\n\n            backLinks.push(cards[i])\n\n        }\n\n    }\n\n    card['content'] = content\n    return { 'card': card, 'backLinks': backLinks }\n\n}\n\n// 获取 Heptabase 的笔记数据\nconst getHeptabaseData = new Promise((resolve, reject) => {\n\n    console.log('getHeptabaseData');\n\n    // 获取本地数据\n    let heptabase_blog_data = localStorage.getItem(\"heptabase_blog_data\")\n\n\n    // 若本地存在数据则不重新获取\n    if (heptabase_blog_data != undefined) {\n\n        let createdTime = JSON.parse(heptabase_blog_data)['createdTime']\n        console.log(Date.parse(new Date()) / 1000);\n\n        console.log(Date.parse(new Date()) / 1000 - createdTime);\n        if (Date.parse(new Date()) / 1000 - createdTime >= 600) {\n            // 数据比较旧时再重新获取\n            console.log('数据比较旧');\n\n        } else {\n            console.log('从缓存获取数据');\n            // return heptabase_blog_data\n            resolve(JSON.parse(heptabase_blog_data))\n            return\n        }\n\n\n    }\n\n    console.log('heptabase_blog_data == undefined');\n\n    const header = new Headers({ \"Access-Control-Allow-Origin\": \"*\" });\n\n    // 接口地址\n    const url = 'https://api.dabing.one/'\n    // 获取 Heptabase 数据\n    fetch(url, {\n        method: \"get\",\n        header: header\n        // mode: 'no-cors'\n    })\n        .then(res => res.json())\n        .then(data => {\n            console.log(data)\n\n            // 按照时间排序卡片\n            data.cards = data.cards.sort((a, b) => {\n\n                // 最近编辑时间\n                return b.lastEditedTime < a.lastEditedTime ? -1 : 1\n\n            })\n\n            let pages = {}\n            // 获取 About、Projects 页面的数据\n            pages.about = undefined\n            pages.projects = undefined\n\n            for (let i = 0; i < data.cards.length; i++) {\n                console.log(data.cards[i]['title']);\n\n                // About\n                if (data.cards[i]['title'] == 'About') {\n\n                    pages.about = data.cards[i]\n\n                }\n\n                // Projects\n                if (data.cards[i]['title'] == 'Projects') {\n                    pages.projects = data.cards[i]\n\n                }\n            }\n\n            // createdTime 记录数据获取的时间\n            const local_data = { 'createdTime': Date.parse(new Date()) / 1000, 'data': data, 'pages': pages }\n            // 存储数据到本地缓存\n            localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(local_data))\n            // console.log(this.state.posts);\n\n            console.log('getHeptabaseData return');\n            // return heptabase_blog_data\n            resolve(local_data)\n        })\n        .catch(e => console.log('错误:', e))\n\n})\n\n\nexport { getHeptabaseData, getClearImag, getClearCard }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}