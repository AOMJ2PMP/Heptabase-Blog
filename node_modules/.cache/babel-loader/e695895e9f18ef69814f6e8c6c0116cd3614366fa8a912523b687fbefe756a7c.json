{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/page/Post.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport Container from '../components/Container';\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer';\nimport '../index.css';\nimport 'github-markdown-css';\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction';\nimport { id } from 'date-fns/locale';\nimport useHash from \"../hooks/useHash\";\n\n// 文章页面\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.findContent = (id, heptabase_blog_data) => {\n      if (heptabase_blog_data === '') {\n        return;\n      }\n      let new_card = null;\n      console.log('Post findContent for:');\n      for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n        if (heptabase_blog_data.cards[i]['id'] == id) {\n          // 处理内容中的图片\n          heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i]);\n          console.log('getClearImag done');\n          // 处理内容中的链接\n          new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards);\n          heptabase_blog_data.cards[i] = new_card['card'];\n\n          // 设置网页标题\n          if (new_card['card']['title'] !== 'About') {\n            document.title = new_card['card']['title'];\n          } else {\n            document.title = 'Jiang 的数字花园🌱';\n          }\n          let cardList = [];\n          // let container = <Container key = {new_card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={new_card} />\n\n          // setCardList(cardList)\n\n          // this.setState({\n          //     cardList: this.state.cardList.concat(new_card)\n          // })\n\n          return new_card;\n        }\n      }\n      return new_card;\n    };\n    this.handleLinkClick = (link_id, current_id) => {\n      // window.location.search = window.location.search+'&note-id='+id\n      // setHash(hash + 'note-id='+id)\n      console.log(this.state.card);\n      console.log(current_id);\n\n      // 删除 Link 所在 card 后的所有 URL 参数\n      let url_search = window.location.search;\n      url_search = url_search.replace('?', '');\n      url_search = url_search.replace(/&/gi, '');\n      let url_search_list = url_search.split('note-id=');\n      let new_url_search = '';\n      let current_page_index = -1;\n      for (let i = 0; i < url_search_list.length; i++) {\n        if (url_search_list[i] === '') {\n          continue;\n        }\n        if (url_search_list[i] === current_id) {\n          // URL 参数 === current_id\n          current_page_index = i;\n        } else {\n          // URL 参数 !== current_id\n        }\n        if (new_url_search == '') {\n          new_url_search += '?note-id=' + url_search_list[i];\n        } else {\n          new_url_search += '&note-id=' + url_search_list[i];\n        }\n\n        //如果当前 id === current_id，则忽略后面的所有 ID\n        if (current_page_index > -1) {\n          break;\n        }\n      }\n      if (new_url_search == '') {\n        new_url_search += '?note-id=' + link_id;\n      } else {\n        new_url_search += '&note-id=' + link_id;\n      }\n      window.history.pushState({}, '', window.location.origin + '/post' + new_url_search);\n      // 记录 URL\n      this.setState({\n        location: window.location.href\n      });\n      this.herfToData();\n    };\n    this.herfToData = () => {\n      let card_list = [];\n      let url_search = window.location.search;\n      url_search = url_search.replace('?', '');\n      url_search = url_search.replace(/&/gi, '');\n      let url_search_list = url_search.split('note-id=');\n      for (let i = 0; i < url_search_list.length; i++) {\n        if (url_search_list[i] == '') {\n          continue;\n        }\n        card_list.push(this.findContent(url_search_list[i], this.state.card));\n      }\n      console.log(card_list);\n      this.setState({\n        cardList: card_list\n      });\n    };\n    this.handleHashChange = url => {\n      console.log(url);\n      // 如果 url 发生变化，则更新数据\n      if (url !== this.state.location) {\n        this.setState({\n          location: url\n        });\n        if (this.state.location !== '') {\n          // cardList 中不存在 URL 的某一个 card\n          // 加载此 card 的数据\n          this.herfToData();\n\n          //处理数据\n          // this.ttest()\n        }\n      }\n\n      // 删除 URL 中不存在的 Card\n      this.resetCardList();\n    };\n    this.resetCardList = () => {\n      let url = window.location.href;\n      //比对 url 和 cardList\n      for (let i = 0; i < this.state.cardList.length; i++) {\n        // url 中不存在此 card\n        if (url.indexOf(this.state.cardList[i]['card']['id']) < 0) {\n          // let new_card_list = this.state.cardList\n          // new_card_list = new_card_list.splice(i,1)\n\n          // 删除 card\n          this.state.cardList.splice(i, 1);\n          this.setState({\n            cardList: this.state.cardList\n          });\n        } else {\n          // url 中存在此 card\n          // continue\n        }\n      }\n    };\n    this.state = {\n      card: null //所有的 hepta 数据\n      ,\n      cardList: [] // 当前页面的卡片列表\n      ,\n      location: '' // 记录 URL\n    };\n  }\n\n  componentDidMount() {\n    // 请求 hepta 数据 getHeptabaseData\n    // then 返回中根据 URL 遍历数据 herfToData() --》 findContent，根据返回值加入数组，然后集中 setState\n\n    getHeptabaseData.then(res => {\n      let heptabase_blog_data = res.data;\n      this.setState({\n        card: heptabase_blog_data\n      }, () => {\n        this.herfToData();\n      });\n    });\n  }\n\n  // let { slug } = useParams();\n  // // 记录 heptabase 数据\n  // let [card, setCard] = useState();\n  // // \n  // let [cardList, setCardList] = useState([]);\n  // // 记录数据加载状态\n  // let [isLoading, setLoadingState] = useState(true)\n  // // hash\n  // let [hash, setHash] = useHash()\n\n  // const { pathname } = useLocation();\n\n  // console.log(slug);\n  // console.log(hash);\n  // console.log(window.location);\n  // // setHash('note-id=123')\n\n  // // window.location = window.location+'&note-id=b81a2f54-ec5b-4de0-9e97-ab841c0e18f9'\n  // console.log(window.location);\n\n  // // 获取 URL 参数\n  // let url_search = window.location.search\n  // url_search = url_search.replace('?', '')\n  // url_search = url_search.replace('&', '')\n  // let url_search_list = url_search.split('note-id=')\n\n  // const useScrollToTop = () => {   //注意自定义Hooks要用useXXX定义\n\n  //     useEffect(() => {\n\n  //         console.log('useScrollToTop');\n\n  //         console.log(window.history);\n  //         window.history.scrollRestoration = 'manual';\n\n  //         // 根据跳转类型来决定是否要定位到顶部，如果不是点击 span 或 backLink 则不回到顶部\n\n  //         let nav_type = sessionStorage.getItem('nav_type')\n\n  //         if (nav_type > -1) {\n  //             // 点击了 span 或 backLink\n\n  //             setTimeout(() => {\n  //                 window.scrollTo({\n  //                     top: 0,\n  //                     left: 0,\n  //                     behavior: 'auto'\n  //                 });\n  //             }, 10);\n\n  //             // window.scrollTo(0, 0);\n\n  //             // 重置 nav_type\n  //             sessionStorage.setItem('nav_type', -1)\n  //         } else {\n\n  //             // 返回上一页\n  //             setTimeout(() => {\n\n  //                 window.scrollTo({\n  //                     top: sessionStorage.getItem('scrollY'),\n  //                     left: 0,\n  //                     behavior: 'auto'\n  //                 });\n\n  //                 // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n  //             }, 10);\n\n  //             // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n  //         }\n\n  //     }, [pathname]);\n  // }\n\n  // useScrollToTop();\n  // useReStoreScrollTop();\n\n  // useEffect(() => {\n  //     // console.log('scrollTo(0, 0)');\n  //     // window.scrollTo(0, 0);\n  //     console.log('Post useEffect');\n  //     // 根据 URL 参数加载数据\n  //     let note_list_dom = []\n\n  //     // for (let i = 0; i < url_search_list.length; i++) {\n  //     //     if (url_search_list[i] == '') {\n  //     //         continue\n  //     //     }\n  //     //     let new_card = setContent(url_search_list[i])\n  //     //     if (new_card) {\n\n  //     //     }\n\n  //     // }\n\n  //     ttest()\n\n  //     // \n\n  // }, [window.location.href])\n\n  // 获取文章数据、处理文章数据\n  // setContent = (id) => {\n  //     console.log('setContent');\n  //     let bingo = false\n  //     // state 中已存在数据，则忽略\n  //     this.state.cardList.forEach(item => {\n  //         if (item['card']['id'] === id) {\n  //             bingo = true\n  //             return\n  //         }\n\n  //     });\n\n  //     if (bingo) {\n  //         return\n  //     }\n\n  //     // 如果已经获取过数据，则直接从获取的数据中提取\n  //     if (this.state.card === null) {\n  //         // 存储数据的变量\n  //         let heptabase_blog_data\n\n  //         getHeptabaseData.then((res) => {\n  //             heptabase_blog_data = res.data\n\n  //             let new_card = this.findContent(id, heptabase_blog_data)\n\n  //             // 404\n  //             if (new_card == null) {\n  //                 console.log('404');\n  //                 // window.location = '/404'\n  //             } else {\n\n  //             }\n\n  //             // setCard(heptabase_blog_data)\n  //             this.setState({\n  //                 card: heptabase_blog_data\n  //             })\n\n  //         })\n  //     } else {\n  //         // 已经有数据了\n  //         console.log(this.state.card);\n  //         let new_card = this.findContent(id, this.state.card)\n\n  //         // 404\n  //         if (new_card == null) {\n  //             console.log('404');\n  //             // window.location = '/404'\n  //         } else {\n\n  //         }\n  //     }\n\n  // }\n\n  render() {\n    if (this.state.card === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }, this);\n    } else {\n      let card_list_dom = this.state.cardList.map(card => /*#__PURE__*/_jsxDEV(Container, {\n        handleHashChange: this.handleHashChange,\n        handleLinkClick: this.handleLinkClick,\n        card: card\n      }, card['card']['id'], false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }, this));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"notes\",\n            children: card_list_dom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 21\n      }, this);\n    }\n  }\n}\nexport default Post;","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","Link","useParams","useNavigate","useLocation","Container","Nav","Footer","getHeptabaseData","getClearCard","getClearImag","id","useHash","Post","Component","constructor","props","findContent","heptabase_blog_data","new_card","console","log","i","cards","length","document","title","cardList","handleLinkClick","link_id","current_id","state","card","url_search","window","location","search","replace","url_search_list","split","new_url_search","current_page_index","history","pushState","origin","setState","href","herfToData","card_list","push","handleHashChange","url","resetCardList","indexOf","splice","componentDidMount","then","res","data","render","card_list_dom","map"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Post.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\n\nimport Container from '../components/Container'\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer'\n\nimport '../index.css'\nimport 'github-markdown-css'\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction'\nimport { id } from 'date-fns/locale';\n\nimport useHash from \"../hooks/useHash\";\n\n// 文章页面\nclass Post extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            card: null //所有的 hepta 数据\n            , cardList: [] // 当前页面的卡片列表\n            , location: '' // 记录 URL\n        };\n    }\n\n    componentDidMount() {\n\n        // 请求 hepta 数据 getHeptabaseData\n        // then 返回中根据 URL 遍历数据 herfToData() --》 findContent，根据返回值加入数组，然后集中 setState\n\n        getHeptabaseData.then((res) => {\n            \n            let heptabase_blog_data = res.data\n\n            this.setState({\n                card: heptabase_blog_data\n            },()=>{\n                this.herfToData()\n            })\n\n        })\n\n    }\n\n    // let { slug } = useParams();\n    // // 记录 heptabase 数据\n    // let [card, setCard] = useState();\n    // // \n    // let [cardList, setCardList] = useState([]);\n    // // 记录数据加载状态\n    // let [isLoading, setLoadingState] = useState(true)\n    // // hash\n    // let [hash, setHash] = useHash()\n\n    // const { pathname } = useLocation();\n\n    // console.log(slug);\n    // console.log(hash);\n    // console.log(window.location);\n    // // setHash('note-id=123')\n\n    // // window.location = window.location+'&note-id=b81a2f54-ec5b-4de0-9e97-ab841c0e18f9'\n    // console.log(window.location);\n\n    // // 获取 URL 参数\n    // let url_search = window.location.search\n    // url_search = url_search.replace('?', '')\n    // url_search = url_search.replace('&', '')\n    // let url_search_list = url_search.split('note-id=')\n\n    // const useScrollToTop = () => {   //注意自定义Hooks要用useXXX定义\n\n    //     useEffect(() => {\n\n    //         console.log('useScrollToTop');\n\n    //         console.log(window.history);\n    //         window.history.scrollRestoration = 'manual';\n\n    //         // 根据跳转类型来决定是否要定位到顶部，如果不是点击 span 或 backLink 则不回到顶部\n\n    //         let nav_type = sessionStorage.getItem('nav_type')\n\n    //         if (nav_type > -1) {\n    //             // 点击了 span 或 backLink\n\n    //             setTimeout(() => {\n    //                 window.scrollTo({\n    //                     top: 0,\n    //                     left: 0,\n    //                     behavior: 'auto'\n    //                 });\n    //             }, 10);\n\n    //             // window.scrollTo(0, 0);\n\n    //             // 重置 nav_type\n    //             sessionStorage.setItem('nav_type', -1)\n    //         } else {\n\n    //             // 返回上一页\n    //             setTimeout(() => {\n\n    //                 window.scrollTo({\n    //                     top: sessionStorage.getItem('scrollY'),\n    //                     left: 0,\n    //                     behavior: 'auto'\n    //                 });\n\n    //                 // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n    //             }, 10);\n\n    //             // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n\n    //         }\n\n\n    //     }, [pathname]);\n    // }\n\n    // useScrollToTop();\n    // useReStoreScrollTop();\n\n    // useEffect(() => {\n    //     // console.log('scrollTo(0, 0)');\n    //     // window.scrollTo(0, 0);\n    //     console.log('Post useEffect');\n    //     // 根据 URL 参数加载数据\n    //     let note_list_dom = []\n\n    //     // for (let i = 0; i < url_search_list.length; i++) {\n    //     //     if (url_search_list[i] == '') {\n    //     //         continue\n    //     //     }\n    //     //     let new_card = setContent(url_search_list[i])\n    //     //     if (new_card) {\n\n    //     //     }\n\n    //     // }\n\n    //     ttest()\n\n\n    //     // \n\n    // }, [window.location.href])\n\n    // 获取文章数据、处理文章数据\n    // setContent = (id) => {\n    //     console.log('setContent');\n    //     let bingo = false\n    //     // state 中已存在数据，则忽略\n    //     this.state.cardList.forEach(item => {\n    //         if (item['card']['id'] === id) {\n    //             bingo = true\n    //             return\n    //         }\n\n    //     });\n\n    //     if (bingo) {\n    //         return\n    //     }\n\n    //     // 如果已经获取过数据，则直接从获取的数据中提取\n    //     if (this.state.card === null) {\n    //         // 存储数据的变量\n    //         let heptabase_blog_data\n\n    //         getHeptabaseData.then((res) => {\n    //             heptabase_blog_data = res.data\n\n    //             let new_card = this.findContent(id, heptabase_blog_data)\n\n    //             // 404\n    //             if (new_card == null) {\n    //                 console.log('404');\n    //                 // window.location = '/404'\n    //             } else {\n\n\n    //             }\n\n    //             // setCard(heptabase_blog_data)\n    //             this.setState({\n    //                 card: heptabase_blog_data\n    //             })\n\n    //         })\n    //     } else {\n    //         // 已经有数据了\n    //         console.log(this.state.card);\n    //         let new_card = this.findContent(id, this.state.card)\n\n    //         // 404\n    //         if (new_card == null) {\n    //             console.log('404');\n    //             // window.location = '/404'\n    //         } else {\n\n\n    //         }\n    //     }\n\n\n\n    // }\n\n\n    findContent = (id, heptabase_blog_data) => {\n        if (heptabase_blog_data === '') {\n            return\n        }\n\n        let new_card = null\n        console.log('Post findContent for:');\n        for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n\n            if (heptabase_blog_data.cards[i]['id'] == id) {\n\n                // 处理内容中的图片\n                heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i])\n                console.log('getClearImag done');\n                // 处理内容中的链接\n                new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards)\n                heptabase_blog_data.cards[i] = new_card['card']\n\n                // 设置网页标题\n                if (new_card['card']['title'] !== 'About') {\n                    document.title = new_card['card']['title']\n                } else {\n                    document.title = 'Jiang 的数字花园🌱'\n                }\n\n                let cardList = []\n                // let container = <Container key = {new_card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={new_card} />\n\n                // setCardList(cardList)\n\n                // this.setState({\n                //     cardList: this.state.cardList.concat(new_card)\n                // })\n\n                return new_card\n\n\n            }\n        }\n\n        return new_card\n\n    }\n\n    handleLinkClick = (link_id, current_id) => {\n        // window.location.search = window.location.search+'&note-id='+id\n        // setHash(hash + 'note-id='+id)\n        console.log(this.state.card);\n        console.log(current_id);\n\n        // 删除 Link 所在 card 后的所有 URL 参数\n        let url_search = window.location.search\n        url_search = url_search.replace('?', '')\n        url_search = url_search.replace(/&/gi, '')\n        let url_search_list = url_search.split('note-id=')\n\n        let new_url_search = ''\n        let current_page_index = -1\n        for (let i = 0; i < url_search_list.length; i++) {\n\n            if (url_search_list[i] === '') {\n                continue\n            }\n\n            if (url_search_list[i] === current_id) {\n                // URL 参数 === current_id\n                current_page_index = i\n            } else {\n                // URL 参数 !== current_id\n            }\n\n            if (new_url_search == '') {\n                new_url_search += '?note-id=' + url_search_list[i]\n            } else {\n                new_url_search += '&note-id=' + url_search_list[i]\n            }\n\n            //如果当前 id === current_id，则忽略后面的所有 ID\n            if (current_page_index > -1) {\n                break;\n            }\n        }\n\n        if (new_url_search == '') {\n            new_url_search += '?note-id=' + link_id\n        } else {\n            new_url_search += '&note-id=' + link_id\n        }\n\n        window.history.pushState({}, '', window.location.origin + '/post' + new_url_search)\n        // 记录 URL\n        this.setState({\n            location: window.location.href\n        })\n        this.herfToData()\n    }\n\n    herfToData = () => {\n\n        let card_list = []\n        let url_search = window.location.search\n        url_search = url_search.replace('?', '')\n        url_search = url_search.replace(/&/gi, '')\n        let url_search_list = url_search.split('note-id=')\n\n        for (let i = 0; i < url_search_list.length; i++) {\n            if (url_search_list[i] == '') {\n                continue\n            }\n            card_list.push(this.findContent(url_search_list[i], this.state.card))\n\n        }\n\n        console.log(card_list);\n        this.setState({\n            cardList:card_list\n        })\n        \n\n    }\n\n    handleHashChange = (url) => {\n        console.log(url);\n        // 如果 url 发生变化，则更新数据\n        if (url !== this.state.location) {\n\n            this.setState({\n                location: url\n            })\n\n            if (this.state.location !== '') {\n\n\n                // cardList 中不存在 URL 的某一个 card\n                // 加载此 card 的数据\n                this.herfToData()\n\n                //处理数据\n                // this.ttest()\n            }\n\n        }\n\n        // 删除 URL 中不存在的 Card\n        this.resetCardList()\n\n    }\n\n    resetCardList = () => {\n        let url = window.location.href\n        //比对 url 和 cardList\n        for (let i = 0; i < this.state.cardList.length; i++) {\n            // url 中不存在此 card\n            if (url.indexOf(this.state.cardList[i]['card']['id']) < 0) {\n\n                // let new_card_list = this.state.cardList\n                // new_card_list = new_card_list.splice(i,1)\n\n                // 删除 card\n                this.state.cardList.splice(i, 1)\n                this.setState({\n                    cardList: this.state.cardList\n                })\n\n            } else {\n                // url 中存在此 card\n                // continue\n            }\n\n        }\n\n    }\n\n    render() {\n        if (this.state.card === null) {\n            return (<div>loading</div>)\n        } else {\n\n            let card_list_dom = this.state.cardList.map((card) =>\n                <Container key={card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={card} />\n            )\n\n            return (<div>\n\n                <div>\n                    <Nav />\n                    {/* <Container card={card} /> */}\n                    <div className='notes'>\n                        {card_list_dom}\n                    </div>\n\n                    <Footer />\n                </div>\n\n            </div>)\n        }\n    }\n\n\n\n}\n\nexport default Post;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}