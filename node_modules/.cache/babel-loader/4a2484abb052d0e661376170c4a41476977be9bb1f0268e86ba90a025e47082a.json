{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/page/Post.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport Container from '../components/Container';\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer';\nimport Loading from '../components/Loading';\nimport '../index.css';\nimport 'github-markdown-css';\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction';\nimport { id } from 'date-fns/locale';\nimport useHash from \"../hooks/useHash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet windowWidth = window.innerWidth;\nlet minWidth = 600;\n\n// 文章页面\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.findContent = (id, heptabase_blog_data) => {\n      if (heptabase_blog_data === '') {\n        return;\n      }\n      let new_card = null;\n      console.log('Post findContent for:');\n      for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n        if (heptabase_blog_data.cards[i]['id'] == id) {\n          // 处理内容中的图片\n          heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i]);\n          console.log('getClearImag done');\n          // 处理内容中的链接\n          new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards);\n          heptabase_blog_data.cards[i] = new_card['card'];\n          return new_card;\n        }\n      }\n      return new_card;\n    };\n    this.handleLinkClick = (link_id, current_id) => {\n      // 设置当前活跃的笔记（用户焦点）\n      if (this.state.activeNote !== link_id) {\n        // 设置 state\n        this.setState({\n          activeNote: link_id\n        });\n      }\n\n      // 已经显示此卡片则不更新 URL 和数据\n      let bingo = false;\n      this.state.cardList.forEach(item => {\n        if (link_id == item['card']['id']) {\n          bingo = true;\n        }\n      });\n      if (bingo) {\n        return;\n      }\n\n      // 删除 Link 所在 card 后的所有 URL 参数\n      let url_search = window.location.search;\n      url_search = url_search.replace('?', '');\n      url_search = url_search.replace(/&/gi, '');\n      let url_search_list = url_search.split('note-id=');\n      let new_url_search = '';\n      let current_page_index = -1;\n      for (let i = 0; i < url_search_list.length; i++) {\n        if (url_search_list[i] === '') {\n          continue;\n        }\n        if (url_search_list[i] === current_id) {\n          // URL 参数 === current_id\n          current_page_index = i;\n        } else {\n          // URL 参数 !== current_id\n        }\n        if (new_url_search == '') {\n          new_url_search += '?note-id=' + url_search_list[i];\n        } else {\n          new_url_search += '&note-id=' + url_search_list[i];\n        }\n\n        //如果当前 id === current_id，则忽略后面的所有 ID\n        if (current_page_index > -1) {\n          break;\n        }\n      }\n      if (new_url_search == '') {\n        new_url_search += '?note-id=' + link_id;\n      } else {\n        new_url_search += '&note-id=' + link_id;\n      }\n\n      // 设置 URL\n      window.history.pushState({}, '', window.location.origin + '/post' + new_url_search);\n      // 记录 URL\n      this.setState({\n        location: window.location.href\n      });\n\n      // 删除 URL 中不存在的 Card\n      this.resetCardList();\n      // 根据 URL 获取 card 数据\n      this.herfToData();\n    };\n    this.herfToData = () => {\n      // 首页的情况\n      if (window.location.search === '') {\n        // 找到首页卡片的 ID\n        let main_id = this.state.main_card['id'];\n        // 设置 URL\n        window.location.replace(window.location.origin + '/post?note-id=' + main_id);\n      }\n\n      // 从 URL 中获取 note id，根据 id 获取卡片数据\n      let card_list = [];\n      let url_search = window.location.search;\n      url_search = url_search.replace('?', '');\n      url_search = url_search.replace(/&/gi, '');\n\n      // 忽略焦点卡片\n      let active_str = '';\n      let active_index = url_search.indexOf('active-note-id');\n      if (active_index > -1) {\n        let is_last_index = url_search.indexOf('note-id', active_index + 14);\n        if (is_last_index > -1) {\n          // 焦点卡片不是最后一个参数\n          active_str = url_search.substring(active_index, is_last_index);\n        } else {\n          // 焦点卡片是最后一个参数\n          active_str = url_search.substring(active_index, url_search.length);\n        }\n      }\n      url_search = url_search.replace(active_str, '');\n      let url_search_list = url_search.split('note-id=');\n      for (let i = 0; i < url_search_list.length; i++) {\n        if (url_search_list[i] == '') {\n          continue;\n        }\n        // 将数据保存到 card list 中\n        card_list.push(this.findContent(url_search_list[i], this.state.card));\n      }\n\n      // 收集 card 数据后一次性 setState（在 for 内分多次 setState 的话容易丢失数据）\n      this.setState({\n        cardList: card_list,\n        activeNote: card_list[card_list.length - 1]['card']['id'] // 设置当前活跃的笔记（用户焦点）\n      });\n\n      // 更新 URL\n    };\n    this.handleHashChange = url => {\n      setTimeout(() => {\n        let note_list = document.getElementsByClassName('container');\n        let foucus_note = this.state.activeNote;\n        let target_note_offsetLeft = 0;\n        for (let j = 0; j < note_list.length; j++) {\n          let note = note_list[j];\n\n          // 定位到当前用户关注的笔记\n          if (note.getAttribute('note_id') === foucus_note) {\n            if (windowWidth > minWidth) {\n              console.log(target_note_offsetLeft);\n              document.getElementsByClassName('notes')[0].scrollTo({\n                left: j * 650,\n                behavior: 'smooth'\n              });\n            } else {}\n            break;\n          }\n          target_note_offsetLeft += note.clientWidth;\n        }\n\n        // 设置样式、小标题\n        this.setCardMiniTitleAndStyle();\n      }, 100);\n\n      // 如果 url 发生变化，则更新数据\n      if (url !== this.state.location) {\n        // 将当前 URL 保存到 state 中\n        this.setState({\n          location: url\n        });\n        if (this.state.location !== '') {\n          // cardList 中不存在 URL 的某一个 card\n          // 加载此 card 的数据\n          this.herfToData();\n        }\n      }\n\n      // 删除 URL 中不存在的 Card\n      this.resetCardList();\n    };\n    this.resetCardList = () => {\n      let url = window.location.href;\n      //比对 url 和 cardList\n      for (let i = 0; i < this.state.cardList.length; i++) {\n        // url 中不存在此 card\n        if (url.indexOf(this.state.cardList[i]['card']['id']) < 0) {\n          // 删除 card\n          this.state.cardList.splice(i, 1);\n          this.setState({\n            cardList: this.state.cardList\n          });\n        } else {\n          // url 中存在此 card\n          // continue\n        }\n      }\n    };\n    this.setCardMiniTitleAndStyle = () => {\n      let notes = document.getElementsByClassName('container');\n\n      // console.log('setCardMiniTitleAndStyle');\n\n      for (let j = 0; j < notes.length; j++) {\n        // 小标题\n\n        let type = 0; // 记录标题在左侧还是右侧\n        let note; // 记录需要添加标题的节点\n\n        // 判断卡片的位置，当遮挡前 1 个卡片时，前 1 个卡片显示垂直标题\n        let left_mark = notes[j].getBoundingClientRect().x <= j * 40;\n        // 判断是否要显示右侧标题\n        let right_mark = notes[j].getBoundingClientRect().x + 1 >= window.innerWidth - (notes.length - j) * 40;\n\n        // 左侧小标题\n        if (right_mark !== true) {\n          if (left_mark) {\n            if (j !== 0) {\n              type = 1;\n              note = notes[j - 1];\n            }\n          } else {\n            // 移除小标题\n            if (j !== 0) {\n              note = notes[j - 1];\n            }\n            if (note !== undefined) {\n              let note_title = note.getElementsByClassName('note_title')[0];\n              if (note_title !== undefined) {\n                // 移除标题父级容器的类名标记\n                note.classList.remove('mini');\n\n                // 移除前一个元素的垂直标题\n                note.removeChild(note_title);\n              }\n            }\n          }\n        }\n\n        // 右侧小标题\n        if (left_mark !== true) {\n          if (right_mark) {\n            type = 2;\n            note = notes[j];\n            // 添加悬浮样式\n            // note.classList.add('overlay')\n          } else {\n            // 移除小标题\n            note = notes[j];\n            if (note !== undefined && j !== 0) {\n              let note_title = note.getElementsByClassName('note_title')[0];\n              if (note_title !== undefined) {\n                // 移除标题父级容器的类名标记\n                note.classList.remove('mini');\n\n                // 移除前一个元素的垂直标题\n                note.removeChild(note_title);\n              }\n            }\n\n            // 移除悬浮样式\n            // note.classList.remove('overlay')\n          }\n        }\n\n        // 需要显示小标题\n        if (type > 0) {\n          // 如果元素无标题\n          if (note.classList.contains('mini') == false) {\n            // 前一个元素显示垂直标题\n            let note_title = document.createElement('div');\n            note_title.classList.add('note_title');\n            if (type === 1) {\n              note_title.style.left = (j - 1) * 40 + 'px';\n            } else {\n              note_title.style.right = (notes.length - j) * 40 - 40 + 'px';\n            }\n\n            // 小标题文案\n            let note_title_span = document.createElement('p');\n            if (note.getElementsByTagName('H1').length === 0) {\n              // 如果笔记中没有 H1 标题\n              note_title_span.innerHTML = note.innerText.substring(0, 6) + '...';\n            } else {\n              note_title_span.innerHTML = note.getElementsByTagName('H1')[0].innerHTML;\n            }\n\n            // 小标题关闭按钮\n            let note_close_button = document.createElement('span');\n            note_close_button.innerHTML = '<svg t=\"1670226356192\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2683\" width=\"16\" height=\"16\"><path d=\"M557.2 512l233.4-233.4c12.5-12.5 12.5-32.8 0-45.2s-32.8-12.5-45.2 0L512 466.8 278.6 233.4c-12.5-12.5-32.8-12.5-45.2 0s-12.5 32.8 0 45.2L466.8 512 233.4 745.4c-12.5 12.5-12.5 32.8 0 45.2 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.2l233.4 233.4c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.2L557.2 512z\" p-id=\"2684\"></path></svg>';\n            note_close_button.classList.add('note_close_button');\n            note_close_button.onclick = event => {\n              // 点击关闭按钮\n\n              this.handleCardCloseClick(note.getAttribute('note_id'));\n            };\n            note_title.appendChild(note_title_span);\n            note_title.appendChild(note_close_button);\n            note.appendChild(note_title);\n            note.classList.add('mini');\n          }\n        }\n\n        // 样式\n        if (j !== 0) {\n          if (notes[j].getBoundingClientRect().x < notes[j - 1].getBoundingClientRect().x + notes[j - 1].getBoundingClientRect().width) {\n            notes[j].classList.add('overlay');\n          } else {\n            notes[j].classList.remove('overlay');\n          }\n        }\n      }\n    };\n    this.handleCardCloseClick = note_id => {\n      console.log('handleCardCloseClick');\n      // 修改 URL\n      let new_url = window.location.href.replace('note-id=' + note_id, '');\n      // 设置 URL\n      window.history.pushState({}, '', new_url);\n\n      // 记录 URL\n      this.setState({\n        location: window.location.href\n      });\n\n      // 从 UI 中隐藏卡片？？\n    };\n    this.state = {\n      card: null //所有的 hepta 数据\n      ,\n      main_card: null //首页卡片\n      ,\n      cardList: [] // 当前页面的卡片列表\n      ,\n      location: '' // 记录 URL\n      ,\n      activeNote: 'null' // 记录当前焦点卡片\n    };\n  }\n\n  componentDidMount() {\n    // 请求 hepta 数据 getHeptabaseData\n    getHeptabaseData.then(res => {\n      let heptabase_blog_data = res.data;\n\n      // 将数据保存到 state 中\n      this.setState({\n        card: heptabase_blog_data,\n        main_card: res['pages']['about']\n      }, () => {\n        // 渲染 URL、数据\n        this.herfToData();\n      });\n    });\n\n    // 监听 notes 容器滚动\n    if (document.getElementsByClassName('notes')[0] !== undefined) {\n      document.getElementsByClassName('notes')[0].addEventListener('scroll', this.setCardMiniTitleAndStyle);\n    }\n  }\n\n  // 根据 card id 获取 card content\n\n  render() {\n    if (this.state.card === null || this.state.cardList.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notes\",\n          children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 21\n      }, this);\n    } else {\n      // console.log(this.state.activeNote);\n\n      let card_list_dom = [];\n\n      //如果屏幕宽度较小，则只显示 1 条笔记\n      if (windowWidth < minWidth) {\n        // 获取用户关注的笔记进行展示\n\n        let card = this.state.cardList[this.state.cardList.length - 1];\n        for (let k = 0; k < this.state.cardList.length; k++) {\n          if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n            card = this.state.cardList[k];\n            break;\n          }\n        }\n\n        //设置笔记样式\n        // left = index*40px; right = index*-40-400\n        let note_style = {\n          left: 0\n        };\n        card_list_dom.push( /*#__PURE__*/_jsxDEV(Container, {\n          style: note_style,\n          handleHashChange: this.handleHashChange,\n          handleLinkClick: this.handleLinkClick,\n          card: card\n        }, card['card']['id'], false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 36\n        }, this));\n      } else {\n        for (let i = 0; i < this.state.cardList.length; i++) {\n          let card = this.state.cardList[i];\n\n          //设置笔记样式\n          // left = index*40px; right = index*-40-400\n          let note_style = {\n            left: i * 40 + 'px',\n            right: -694.8 + (this.state.cardList.length - i) * 40 + 'px',\n            flex: '0 0 auto'\n          };\n          let note = /*#__PURE__*/_jsxDEV(Container, {\n            style: note_style,\n            handleHashChange: this.handleHashChange,\n            handleLinkClick: this.handleLinkClick,\n            card: card\n          }, card['card']['id'], false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 32\n          }, this);\n          card_list_dom.push(note);\n        }\n      }\n\n      // 设置网页标题\n      for (let k = 0; k < this.state.cardList.length; k++) {\n        if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n          if (this.state.cardList[k]['card']['title'] !== 'About') {\n            document.title = this.state.cardList[k]['card']['title'];\n          } else {\n            document.title = 'Jiang 的数字花园🌱';\n          }\n          break;\n        }\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notes_box\",\n        children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notes\",\n          children: card_list_dom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 21\n      }, this);\n    }\n  }\n}\nexport default Post;","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","Link","useParams","useNavigate","useLocation","Container","Nav","Footer","Loading","getHeptabaseData","getClearCard","getClearImag","id","useHash","windowWidth","window","innerWidth","minWidth","Post","Component","constructor","props","findContent","heptabase_blog_data","new_card","console","log","i","cards","length","handleLinkClick","link_id","current_id","state","activeNote","setState","bingo","cardList","forEach","item","url_search","location","search","replace","url_search_list","split","new_url_search","current_page_index","history","pushState","origin","href","resetCardList","herfToData","main_id","main_card","card_list","active_str","active_index","indexOf","is_last_index","substring","push","card","handleHashChange","url","setTimeout","note_list","document","getElementsByClassName","foucus_note","target_note_offsetLeft","j","note","getAttribute","scrollTo","left","behavior","clientWidth","setCardMiniTitleAndStyle","splice","notes","type","left_mark","getBoundingClientRect","x","right_mark","undefined","note_title","classList","remove","removeChild","contains","createElement","add","style","right","note_title_span","getElementsByTagName","innerHTML","innerText","note_close_button","onclick","event","handleCardCloseClick","appendChild","width","note_id","new_url","componentDidMount","then","res","data","addEventListener","render","card_list_dom","k","note_style","flex","title"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Post.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\n\nimport Container from '../components/Container'\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer'\nimport Loading from '../components/Loading'\n\nimport '../index.css'\nimport 'github-markdown-css'\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction'\nimport { id } from 'date-fns/locale';\n\nimport useHash from \"../hooks/useHash\";\n\n\n\nlet windowWidth = window.innerWidth\nlet minWidth = 600\n\n// 文章页面\nclass Post extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            card: null //所有的 hepta 数据\n            , main_card: null //首页卡片\n            , cardList: [] // 当前页面的卡片列表\n            , location: '' // 记录 URL\n            , activeNote: 'null' // 记录当前焦点卡片\n        };\n    }\n\n    componentDidMount() {\n\n        // 请求 hepta 数据 getHeptabaseData\n        getHeptabaseData.then((res) => {\n\n            let heptabase_blog_data = res.data\n\n            // 将数据保存到 state 中\n            this.setState({\n                card: heptabase_blog_data,\n                main_card: res['pages']['about']\n            }, () => {\n\n                // 渲染 URL、数据\n                this.herfToData()\n            })\n\n        })\n\n        // 监听 notes 容器滚动\n        if (document.getElementsByClassName('notes')[0] !== undefined) {\n\n            document.getElementsByClassName('notes')[0].addEventListener('scroll', this.setCardMiniTitleAndStyle)\n        }\n\n    }\n\n    // 根据 card id 获取 card content\n    findContent = (id, heptabase_blog_data) => {\n        if (heptabase_blog_data === '') {\n            return\n        }\n\n        let new_card = null\n        console.log('Post findContent for:');\n        for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n\n            if (heptabase_blog_data.cards[i]['id'] == id) {\n\n                // 处理内容中的图片\n                heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i])\n                console.log('getClearImag done');\n                // 处理内容中的链接\n                new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards)\n                heptabase_blog_data.cards[i] = new_card['card']\n\n                return new_card\n\n            }\n        }\n\n        return new_card\n\n    }\n\n    // 文章内链接、反向链接点击\n    handleLinkClick = (link_id, current_id) => {\n\n        // 设置当前活跃的笔记（用户焦点）\n        if (this.state.activeNote !== link_id) {\n\n            // 设置 state\n            this.setState({\n                activeNote: link_id\n            })\n\n        }\n\n\n        // 已经显示此卡片则不更新 URL 和数据\n        let bingo = false\n        this.state.cardList.forEach(item => {\n\n            if (link_id == item['card']['id']) {\n\n                bingo = true\n\n            }\n\n        });\n\n        if (bingo) {\n\n            return\n        }\n\n        // 删除 Link 所在 card 后的所有 URL 参数\n        let url_search = window.location.search\n        url_search = url_search.replace('?', '')\n        url_search = url_search.replace(/&/gi, '')\n        let url_search_list = url_search.split('note-id=')\n\n        let new_url_search = ''\n        let current_page_index = -1\n        for (let i = 0; i < url_search_list.length; i++) {\n\n            if (url_search_list[i] === '') {\n                continue\n            }\n\n            if (url_search_list[i] === current_id) {\n                // URL 参数 === current_id\n                current_page_index = i\n            } else {\n                // URL 参数 !== current_id\n            }\n\n            if (new_url_search == '') {\n                new_url_search += '?note-id=' + url_search_list[i]\n            } else {\n                new_url_search += '&note-id=' + url_search_list[i]\n            }\n\n            //如果当前 id === current_id，则忽略后面的所有 ID\n            if (current_page_index > -1) {\n                break;\n            }\n        }\n\n        if (new_url_search == '') {\n            new_url_search += '?note-id=' + link_id\n        } else {\n            new_url_search += '&note-id=' + link_id\n        }\n\n\n        // 设置 URL\n        window.history.pushState({}, '', window.location.origin + '/post' + new_url_search)\n        // 记录 URL\n        this.setState({\n            location: window.location.href\n        })\n\n\n        // 删除 URL 中不存在的 Card\n        this.resetCardList()\n        // 根据 URL 获取 card 数据\n        this.herfToData()\n\n    }\n\n    herfToData = () => {\n\n        // 首页的情况\n        if (window.location.search === '') {\n\n            // 找到首页卡片的 ID\n            let main_id = this.state.main_card['id']\n            // 设置 URL\n            window.location.replace(window.location.origin + '/post?note-id=' + main_id)\n\n        }\n\n        // 从 URL 中获取 note id，根据 id 获取卡片数据\n        let card_list = []\n        let url_search = window.location.search\n        url_search = url_search.replace('?', '')\n        url_search = url_search.replace(/&/gi, '')\n\n        // 忽略焦点卡片\n        let active_str = ''\n        let active_index = url_search.indexOf('active-note-id')\n        if (active_index > -1) {\n            let is_last_index = url_search.indexOf('note-id', active_index + 14)\n            if (is_last_index > -1) {\n                // 焦点卡片不是最后一个参数\n                active_str = url_search.substring(active_index,is_last_index)\n            } else {\n                // 焦点卡片是最后一个参数\n                active_str = url_search.substring(active_index,url_search.length)\n            }\n\n        }\n\n        url_search = url_search.replace(active_str, '')\n\n        let url_search_list = url_search.split('note-id=')\n\n        for (let i = 0; i < url_search_list.length; i++) {\n            if (url_search_list[i] == '') {\n                continue\n            }\n            // 将数据保存到 card list 中\n            card_list.push(this.findContent(url_search_list[i], this.state.card))\n\n        }\n\n        // 收集 card 数据后一次性 setState（在 for 内分多次 setState 的话容易丢失数据）\n        this.setState({\n            cardList: card_list,\n            activeNote: card_list[card_list.length - 1]['card']['id'] // 设置当前活跃的笔记（用户焦点）\n        })\n\n        // 更新 URL\n\n\n    }\n\n    // 当 URL 变化时（子组件 container 载入完毕后也会调用此方法）\n    handleHashChange = (url) => {\n\n        setTimeout(() => {\n            let note_list = document.getElementsByClassName('container')\n            let foucus_note = this.state.activeNote\n\n            let target_note_offsetLeft = 0\n            for (let j = 0; j < note_list.length; j++) {\n                let note = note_list[j]\n\n                // 定位到当前用户关注的笔记\n                if (note.getAttribute('note_id') === foucus_note) {\n\n                    if (windowWidth > minWidth) {\n                        console.log(target_note_offsetLeft);\n                        document.getElementsByClassName('notes')[0].scrollTo({ left: j * 650, behavior: 'smooth' })\n                    } else {\n\n                    }\n\n                    break;\n\n                }\n\n                target_note_offsetLeft += note.clientWidth\n            }\n\n            // 设置样式、小标题\n            this.setCardMiniTitleAndStyle()\n\n        }, 100);\n\n        // 如果 url 发生变化，则更新数据\n        if (url !== this.state.location) {\n\n\n            // 将当前 URL 保存到 state 中\n            this.setState({\n                location: url\n            })\n\n            if (this.state.location !== '') {\n\n                // cardList 中不存在 URL 的某一个 card\n                // 加载此 card 的数据\n                this.herfToData()\n\n            }\n\n        }\n\n        // 删除 URL 中不存在的 Card\n        this.resetCardList()\n\n    }\n\n    // 删除 URL 中不存在的 Card\n    resetCardList = () => {\n        let url = window.location.href\n        //比对 url 和 cardList\n        for (let i = 0; i < this.state.cardList.length; i++) {\n            // url 中不存在此 card\n            if (url.indexOf(this.state.cardList[i]['card']['id']) < 0) {\n\n                // 删除 card\n                this.state.cardList.splice(i, 1)\n                this.setState({\n                    cardList: this.state.cardList\n                })\n\n            } else {\n                // url 中存在此 card\n                // continue\n            }\n\n        }\n\n    }\n\n    setCardMiniTitleAndStyle = () => {\n\n        let notes = document.getElementsByClassName('container')\n\n        // console.log('setCardMiniTitleAndStyle');\n\n        for (let j = 0; j < notes.length; j++) {\n\n            // 小标题\n\n            let type = 0 // 记录标题在左侧还是右侧\n            let note // 记录需要添加标题的节点\n\n            // 判断卡片的位置，当遮挡前 1 个卡片时，前 1 个卡片显示垂直标题\n            let left_mark = notes[j].getBoundingClientRect().x <= j * 40\n            // 判断是否要显示右侧标题\n            let right_mark = notes[j].getBoundingClientRect().x + 1 >= window.innerWidth - (notes.length - j) * 40\n\n            // 左侧小标题\n            if (right_mark !== true) {\n\n                if (left_mark) {\n\n                    if (j !== 0) {\n                        type = 1\n                        note = notes[j - 1]\n                    }\n\n                } else {\n\n                    // 移除小标题\n                    if (j !== 0) {\n                        note = notes[j - 1]\n                    }\n\n                    if (note !== undefined) {\n                        let note_title = note.getElementsByClassName('note_title')[0]\n                        if (note_title !== undefined) {\n\n                            // 移除标题父级容器的类名标记\n                            note.classList.remove('mini')\n\n                            // 移除前一个元素的垂直标题\n                            note.removeChild(note_title)\n                        }\n                    }\n\n                }\n\n            }\n\n\n            // 右侧小标题\n            if (left_mark !== true) {\n\n                if (right_mark) {\n\n                    type = 2\n                    note = notes[j]\n                    // 添加悬浮样式\n                    // note.classList.add('overlay')\n\n                } else {\n                    // 移除小标题\n                    note = notes[j]\n\n                    if (note !== undefined && j !== 0) {\n                        let note_title = note.getElementsByClassName('note_title')[0]\n                        if (note_title !== undefined) {\n\n                            // 移除标题父级容器的类名标记\n                            note.classList.remove('mini')\n\n                            // 移除前一个元素的垂直标题\n                            note.removeChild(note_title)\n                        }\n                    }\n\n                    // 移除悬浮样式\n                    // note.classList.remove('overlay')\n                }\n\n            }\n\n\n            // 需要显示小标题\n            if (type > 0) {\n\n                // 如果元素无标题\n                if (note.classList.contains('mini') == false) {\n                    // 前一个元素显示垂直标题\n                    let note_title = document.createElement('div')\n                    note_title.classList.add('note_title')\n\n                    if (type === 1) {\n                        note_title.style.left = (j - 1) * 40 + 'px'\n                    } else {\n                        note_title.style.right = (notes.length - j) * 40 - 40 + 'px'\n                    }\n\n                    // 小标题文案\n                    let note_title_span = document.createElement('p')\n\n                    if (note.getElementsByTagName('H1').length === 0) {\n                        // 如果笔记中没有 H1 标题\n                        note_title_span.innerHTML = note.innerText.substring(0, 6) + '...'\n                    } else {\n                        note_title_span.innerHTML = note.getElementsByTagName('H1')[0].innerHTML\n                    }\n\n                    // 小标题关闭按钮\n                    let note_close_button = document.createElement('span')\n                    note_close_button.innerHTML = '<svg t=\"1670226356192\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2683\" width=\"16\" height=\"16\"><path d=\"M557.2 512l233.4-233.4c12.5-12.5 12.5-32.8 0-45.2s-32.8-12.5-45.2 0L512 466.8 278.6 233.4c-12.5-12.5-32.8-12.5-45.2 0s-12.5 32.8 0 45.2L466.8 512 233.4 745.4c-12.5 12.5-12.5 32.8 0 45.2 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.2l233.4 233.4c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.2L557.2 512z\" p-id=\"2684\"></path></svg>'\n                    note_close_button.classList.add('note_close_button')\n                    note_close_button.onclick = (event) => {\n\n                        // 点击关闭按钮\n\n                        this.handleCardCloseClick(note.getAttribute('note_id'))\n                    }\n\n                    note_title.appendChild(note_title_span)\n                    note_title.appendChild(note_close_button)\n                    note.appendChild(note_title)\n\n                    note.classList.add('mini')\n                }\n\n            }\n\n            // 样式\n            if (j !== 0) {\n                if (notes[j].getBoundingClientRect().x < notes[j - 1].getBoundingClientRect().x + notes[j - 1].getBoundingClientRect().width) {\n                    notes[j].classList.add('overlay')\n                } else {\n                    notes[j].classList.remove('overlay')\n                }\n            }\n\n\n        }\n    }\n\n    // 关闭卡片\n    handleCardCloseClick = (note_id) => {\n\n        console.log('handleCardCloseClick');\n        // 修改 URL\n        let new_url = window.location.href.replace('note-id=' + note_id, '')\n        // 设置 URL\n        window.history.pushState({}, '', new_url)\n\n        // 记录 URL\n        this.setState({\n            location: window.location.href\n        })\n\n        // 从 UI 中隐藏卡片？？\n\n    }\n\n    render() {\n        if (this.state.card === null || this.state.cardList.length === 0) {\n            return (<div>\n                <Nav />\n                <div className='notes'>\n                    <Loading />\n                </div>\n                <Footer />\n            </div>)\n        } else {\n\n            // console.log(this.state.activeNote);\n\n            let card_list_dom = []\n\n            //如果屏幕宽度较小，则只显示 1 条笔记\n            if (windowWidth < minWidth) {\n\n                // 获取用户关注的笔记进行展示\n\n                let card = this.state.cardList[this.state.cardList.length - 1]\n\n                for (let k = 0; k < this.state.cardList.length; k++) {\n                    if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n                        card = this.state.cardList[k]\n                        break;\n                    }\n                }\n\n                //设置笔记样式\n                // left = index*40px; right = index*-40-400\n                let note_style = {\n                    left: 0\n                }\n                card_list_dom.push(<Container style={note_style} key={card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={card} />)\n            } else {\n                for (let i = 0; i < this.state.cardList.length; i++) {\n                    let card = this.state.cardList[i]\n\n                    //设置笔记样式\n                    // left = index*40px; right = index*-40-400\n                    let note_style = {\n                        left: i * 40 + 'px',\n                        right: -694.8 + (this.state.cardList.length - i) * 40 + 'px',\n                        flex: '0 0 auto'\n                    }\n\n                    let note = <Container style={note_style} key={card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={card} />\n                    card_list_dom.push(note)\n                }\n            }\n\n            // 设置网页标题\n            for (let k = 0; k < this.state.cardList.length; k++) {\n                if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n\n                    if (this.state.cardList[k]['card']['title'] !== 'About') {\n                        document.title = this.state.cardList[k]['card']['title']\n                    } else {\n                        document.title = 'Jiang 的数字花园🌱'\n                    }\n\n                    break;\n                }\n            }\n\n            return (<div className='notes_box'>\n\n                <Nav />\n                {/* <Container card={card} /> */}\n                <div className='notes'>\n                    {card_list_dom}\n                </div>\n\n                {/* <Footer /> */}\n\n            </div>)\n        }\n    }\n\n\n\n}\n\nexport default Post;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}