{"ast":null,"code":"const getHeptabaseData = new Promise((resolve, reject) => {\n  console.log('getHeptabaseData');\n  console.log(window.performance);\n  console.log(performance);\n\n  // 获取本地数据\n  let heptabase_blog_data = localStorage.getItem(\"heptabase_blog_data\");\n\n  // 若本地存在数据则不重新获取\n  if (heptabase_blog_data != undefined) {\n    let createdTime = JSON.parse(heptabase_blog_data)['createdTime'];\n    if (Date.parse(new Date()) / 1000 - createdTime >= 15) {\n\n      // 数据比较旧时再重新获取\n    } else {\n      heptabase_blog_data = JSON.parse(heptabase_blog_data)['data'];\n      // return heptabase_blog_data\n      resolve(heptabase_blog_data);\n    }\n  }\n\n  // 本地无数据\n  // 获取 Heptabase 数据\n  fetch('https://app.heptabase.com/api/whiteboard/?secret=d4cc3728297609add1a00aab108e90c4e57a1c378cfc2307c251745bf7d2a884').then(res => res.json()).then(data => {\n    console.log(data);\n    heptabase_blog_data = data;\n    const local_data = {\n      'createdTime': Date.parse(new Date()) / 1000,\n      'data': data\n    };\n    // 存储数据到本地缓存\n    localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(local_data));\n    // console.log(this.state.posts);\n\n    console.log('getHeptabaseData return');\n    // return heptabase_blog_data\n    resolve(heptabase_blog_data);\n  }).catch(e => console.log('错误:', e));\n});\n\n// 修复单个 md 文件中的 img\nconst getClearImag = content => {\n  // 修改图片后缀，避免图片无法显示\n  // 找到 ![]( 符号\n  // 找到上述符号之后的第 1 个 jpg#/png#/gif# 符号\n  // 找到上一个步骤后的第 1 个 ) 符号\n  // 删除前面 2 步 index 中间的符号\n\n  let img_type = ['.png', '.jpeg', '.jpg', '.gif'];\n  let img_keyword_index = content.indexOf('![');\n  while (img_keyword_index != -1) {\n    // 获取下一个 ) 索引\n    let img_end_inex = content.indexOf(')', img_keyword_index);\n    // 获取图片扩展名索引\n    let img_etc_index;\n    for (let i = 0; i < img_type.length; i++) {\n      img_etc_index = content.indexOf(img_type[i], img_keyword_index + 1);\n      if (img_etc_index >= 0 && img_etc_index <= img_end_inex) {\n        // 如果格式字符是这种格式 ![....jpg] 内，则跳过\n        if (content.substring(img_etc_index + img_type[i].length, img_etc_index + img_type[i].length + 2) == '](') {\n          img_etc_index = content.indexOf(img_type[i], img_etc_index + 1);\n        }\n        img_etc_index += img_type[i].length;\n        break;\n      }\n    }\n\n    // console.log('img_keyword_index');\n    // console.log(img_keyword_index);\n    // console.log('img_end_inex');\n    // console.log(img_end_inex);\n    // console.log('img_etc_index');\n    // console.log(img_etc_index);\n\n    if (img_keyword_index == -1 || img_end_inex == -1 || img_etc_index == -1) {\n      break;\n    }\n    let old_img_str = content.substring(img_keyword_index, img_end_inex);\n    let new_img_str = content.substring(img_keyword_index, img_etc_index);\n\n    // console.log(old_img_str);\n    // console.log(new_img_str);\n\n    content = content.replace(old_img_str, new_img_str);\n\n    // 获取 ![ 索引\n    img_keyword_index = content.indexOf('![', img_keyword_index + 1);\n  }\n  return content;\n};\n\n// 处理单个 md 文件中的超链接\nconst getClearCard = (content, cards) => {\n  // 找到 (./ 符号以及之后的第 1 个 ，或找到 {{ 符号 }}) 符号，截取这 2 个 index 中间的字符串\n  // 将上述字符串放在 card 数据中匹配\n  // 如果找到匹配的卡片：修改上述字符串的地址为 /post/post.id\n\n  // 获取 {{ 符号\n  let card_keyword_index = content.indexOf('{{');\n  while (card_keyword_index != -1) {\n    //获取卡片末尾的索引\n    let card_end_inex = content.indexOf('}}', card_keyword_index);\n    if (card_keyword_index == -1 || card_end_inex == -1) {\n      break;\n    }\n\n    // console.log('card_keyword_index:');\n    // console.log(card_keyword_index);\n    // console.log('card_end_inex:');\n    // console.log(card_end_inex);\n\n    let old_card = content.substring(card_keyword_index, card_end_inex + 2);\n    // {{card xxxx-xxx-xxxx}}\n    let new_card = '{{未知卡片}}';\n\n    // 检验一下的确是 card\n    if (old_card.indexOf('card ') >= 0) {\n      // console.log('old_card：');\n      // console.log(old_card);\n\n      // 根据 ID 匹配数据中是否存在此卡片\n\n      for (let i = 0; i < cards.length; i++) {\n        if (old_card.indexOf(cards[i]['id']) >= 0) {\n          // 存在：设置卡片链接\n          new_card = '[' + cards[i]['title'] + ']' + '(' + '/post/' + cards[i]['id'] + ')';\n          break;\n        }\n      }\n\n      // console.log('new_card:');\n      // console.log(new_card);\n\n      content = content.replace(old_card, new_card);\n      card_keyword_index = content.indexOf('{{', card_keyword_index + 1);\n    }\n  }\n\n  // 获取 (./ 符号\n  let custom_card_keyword_index = content.indexOf('(./');\n  while (custom_card_keyword_index != -1) {\n    //获取卡片末尾的索引\n    let custom_card_end_inex = content.indexOf(')', custom_card_keyword_index);\n    if (custom_card_keyword_index == -1 || custom_card_end_inex == -1) {\n      break;\n    }\n    let custom_old_card = content.substring(custom_card_end_inex, custom_card_keyword_index + 1);\n    // {{card xxxx-xxx-xxxx}}\n    let custom_new_card = '/404/';\n\n    // 根据 ID 匹配数据中是否存在此卡片\n\n    for (let i = 0; i < cards.length; i++) {\n      if (custom_old_card.indexOf(cards[i]['id']) >= 0) {\n        // 存在：设置卡片链接\n        custom_new_card = '/post/' + cards[i]['id'] + ')';\n        break;\n      }\n    }\n    console.log('custom_new_card:');\n    console.log(custom_new_card);\n    content = content.replace(custom_old_card, custom_new_card);\n    custom_card_keyword_index = content.indexOf('(./', card_keyword_index + 1);\n  }\n  return content;\n};\nexport { getHeptabaseData, getClearImag, getClearCard };","map":{"version":3,"names":["getHeptabaseData","Promise","resolve","reject","console","log","window","performance","heptabase_blog_data","localStorage","getItem","undefined","createdTime","JSON","parse","Date","fetch","then","res","json","data","local_data","setItem","stringify","catch","e","getClearImag","content","img_type","img_keyword_index","indexOf","img_end_inex","img_etc_index","i","length","substring","old_img_str","new_img_str","replace","getClearCard","cards","card_keyword_index","card_end_inex","old_card","new_card","custom_card_keyword_index","custom_card_end_inex","custom_old_card","custom_new_card"],"sources":["/Users/jiangzilong/学习/minpg/heptabase_blog/src/constantFunction.js"],"sourcesContent":["const getHeptabaseData = new Promise((resolve, reject) => {\n\n    console.log('getHeptabaseData');\n    console.log(window.performance);\n    console.log(performance);\n\n    // 获取本地数据\n    let heptabase_blog_data = localStorage.getItem(\"heptabase_blog_data\")\n\n\n    // 若本地存在数据则不重新获取\n    if (heptabase_blog_data != undefined) {\n\n\n\n        let createdTime = JSON.parse(heptabase_blog_data)['createdTime']\n        if (Date.parse(new Date()) / 1000 - createdTime >= 15) {\n\n            // 数据比较旧时再重新获取\n\n        } else {\n            heptabase_blog_data = JSON.parse(heptabase_blog_data)['data']\n            // return heptabase_blog_data\n            resolve(heptabase_blog_data)\n        }\n\n\n    }\n    \n    // 本地无数据\n    // 获取 Heptabase 数据\n    fetch(\n        'https://app.heptabase.com/api/whiteboard/?secret=d4cc3728297609add1a00aab108e90c4e57a1c378cfc2307c251745bf7d2a884'\n    )\n        .then(res => res.json())\n        .then(data => {\n            console.log(data)\n\n            heptabase_blog_data = data\n\n            const local_data = { 'createdTime': Date.parse(new Date()) / 1000, 'data': data }\n            // 存储数据到本地缓存\n            localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(local_data))\n            // console.log(this.state.posts);\n\n            console.log('getHeptabaseData return');\n            // return heptabase_blog_data\n            resolve(heptabase_blog_data)\n        })\n        .catch(e => console.log('错误:', e))\n\n\n})\n\n\n// 修复单个 md 文件中的 img\nconst getClearImag = (content) => {\n\n    // 修改图片后缀，避免图片无法显示\n    // 找到 ![]( 符号\n    // 找到上述符号之后的第 1 个 jpg#/png#/gif# 符号\n    // 找到上一个步骤后的第 1 个 ) 符号\n    // 删除前面 2 步 index 中间的符号\n\n    let img_type = ['.png', '.jpeg', '.jpg', '.gif']\n\n    let img_keyword_index = content.indexOf('![')\n\n    while (img_keyword_index != -1) {\n\n\n        // 获取下一个 ) 索引\n        let img_end_inex = content.indexOf(')', img_keyword_index)\n        // 获取图片扩展名索引\n        let img_etc_index\n        for (let i = 0; i < img_type.length; i++) {\n            img_etc_index = content.indexOf(img_type[i], img_keyword_index + 1)\n            if (img_etc_index >= 0 && img_etc_index <= img_end_inex) {\n\n                // 如果格式字符是这种格式 ![....jpg] 内，则跳过\n                if (content.substring(img_etc_index + img_type[i].length, img_etc_index + img_type[i].length + 2) == '](') {\n                    img_etc_index = content.indexOf(img_type[i], img_etc_index + 1)\n\n                }\n\n                img_etc_index += img_type[i].length\n                break;\n\n\n            }\n        }\n\n        // console.log('img_keyword_index');\n        // console.log(img_keyword_index);\n        // console.log('img_end_inex');\n        // console.log(img_end_inex);\n        // console.log('img_etc_index');\n        // console.log(img_etc_index);\n\n        if (img_keyword_index == -1 || img_end_inex == -1 || img_etc_index == -1) {\n            break\n        }\n\n        let old_img_str = content.substring(img_keyword_index, img_end_inex)\n        let new_img_str = content.substring(img_keyword_index, img_etc_index)\n\n        // console.log(old_img_str);\n        // console.log(new_img_str);\n\n        content = content.replace(old_img_str, new_img_str)\n\n        // 获取 ![ 索引\n        img_keyword_index = content.indexOf('![', img_keyword_index + 1)\n\n\n    }\n\n    return content\n\n}\n\n// 处理单个 md 文件中的超链接\nconst getClearCard = (content, cards) => {\n\n    // 找到 (./ 符号以及之后的第 1 个 ，或找到 {{ 符号 }}) 符号，截取这 2 个 index 中间的字符串\n    // 将上述字符串放在 card 数据中匹配\n    // 如果找到匹配的卡片：修改上述字符串的地址为 /post/post.id\n\n    // 获取 {{ 符号\n    let card_keyword_index = content.indexOf('{{')\n\n    while (card_keyword_index != -1) {\n\n        //获取卡片末尾的索引\n        let card_end_inex = content.indexOf('}}', card_keyword_index)\n\n        if (card_keyword_index == -1 || card_end_inex == -1) {\n            break\n        }\n\n        // console.log('card_keyword_index:');\n        // console.log(card_keyword_index);\n        // console.log('card_end_inex:');\n        // console.log(card_end_inex);\n\n        let old_card = content.substring(card_keyword_index, card_end_inex + 2)\n        // {{card xxxx-xxx-xxxx}}\n        let new_card = '{{未知卡片}}'\n\n        // 检验一下的确是 card\n        if (old_card.indexOf('card ') >= 0) {\n            // console.log('old_card：');\n            // console.log(old_card);\n\n            // 根据 ID 匹配数据中是否存在此卡片\n\n            for (let i = 0; i < cards.length; i++) {\n\n                if (old_card.indexOf(cards[i]['id']) >= 0) {\n                    // 存在：设置卡片链接\n                    new_card = '[' + cards[i]['title'] + ']' + '(' + '/post/' + cards[i]['id'] + ')'\n                    break\n                }\n\n            }\n\n            // console.log('new_card:');\n            // console.log(new_card);\n\n            content = content.replace(old_card, new_card)\n\n\n            card_keyword_index = content.indexOf('{{', card_keyword_index + 1)\n\n        }\n\n    }\n\n\n    // 获取 (./ 符号\n    let custom_card_keyword_index = content.indexOf('(./')\n    while (custom_card_keyword_index != -1) {\n\n        //获取卡片末尾的索引\n        let custom_card_end_inex = content.indexOf(')', custom_card_keyword_index)\n\n        if (custom_card_keyword_index == -1 || custom_card_end_inex == -1) {\n            break\n        }\n\n        let custom_old_card = content.substring(custom_card_end_inex, custom_card_keyword_index + 1)\n        // {{card xxxx-xxx-xxxx}}\n        let custom_new_card = '/404/'\n\n        // 根据 ID 匹配数据中是否存在此卡片\n\n        for (let i = 0; i < cards.length; i++) {\n\n            if (custom_old_card.indexOf(cards[i]['id']) >= 0) {\n                // 存在：设置卡片链接\n                custom_new_card = '/post/' + cards[i]['id'] + ')'\n                break\n            }\n\n        }\n\n        console.log('custom_new_card:');\n        console.log(custom_new_card);\n\n        content = content.replace(custom_old_card, custom_new_card)\n\n\n        custom_card_keyword_index = content.indexOf('(./', card_keyword_index + 1)\n\n\n\n    }\n\n    return content\n\n}\n\n\nexport { getHeptabaseData, getClearImag, getClearCard }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}