{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/page/Post.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport Container from '../components/Container';\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer';\nimport Loading from '../components/Loading';\nimport '../index.css';\nimport 'github-markdown-css';\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction';\nimport { id } from 'date-fns/locale';\nimport useHash from \"../hooks/useHash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet windowWidth = window.innerWidth;\nlet minWidth = 600;\nfunction setCardMiniTitleAndStyle(notes) {\n  for (let j = 0; j < notes.length; j++) {\n    // 小标题\n\n    let type = 0; // 记录标题在左侧还是右侧\n    let note; // 记录需要添加标题的节点\n\n    // 判断卡片的位置，当遮挡前 1 个卡片时，前 1 个卡片显示垂直标题\n    let left_mark = notes[j].getBoundingClientRect().x <= j * 40 + 80;\n    // 判断是否要显示右侧标题\n    let right_mark = notes[j].getBoundingClientRect().x >= window.innerWidth - (notes.length - j) * 40;\n\n    // 左侧小标题\n    if (right_mark !== true) {\n      if (left_mark) {\n        if (j !== 0) {\n          type = 1;\n          note = notes[j - 1];\n        }\n      } else {\n        // 移除小标题\n        if (j !== 0) {\n          note = notes[j - 1];\n        }\n        if (note !== undefined) {\n          let note_title = note.getElementsByClassName('note_title')[0];\n          if (note_title !== undefined) {\n            // 移除标题父级容器的类名标记\n            note.classList.remove('mini');\n\n            // 移除前一个元素的垂直标题\n            note.removeChild(note_title);\n          }\n        }\n      }\n    }\n\n    // 右侧小标题\n    if (left_mark !== true) {\n      if (right_mark) {\n        type = 2;\n        note = notes[j];\n        // 添加悬浮样式\n        note.classList.add('overlay');\n      } else {\n        // 移除小标题\n        note = notes[j];\n        if (note !== undefined && j !== 0) {\n          let note_title = note.getElementsByClassName('note_title')[0];\n          if (note_title !== undefined) {\n            // 移除标题父级容器的类名标记\n            note.classList.remove('mini');\n\n            // 移除前一个元素的垂直标题\n            note.removeChild(note_title);\n          }\n        }\n\n        // 移除悬浮样式\n        note.classList.remove('overlay');\n      }\n    }\n\n    // 需要显示小标题\n    if (type > 0) {\n      // 如果元素无标题\n      if (note.classList.contains('mini') == false) {\n        // 前一个元素显示垂直标题\n        let note_title = document.createElement('div');\n        note_title.classList.add('note_title');\n        if (type === 1) {\n          note_title.style.left = (j - 1) * 40 + 'px';\n        } else {\n          note_title.style.right = (notes.length - j) * 40 - 248 + 'px';\n        }\n\n        // 小标题文案\n        if (note.getElementsByTagName('H1').length === 0) {\n          // 如果笔记中没有 H1 标题\n          note_title.innerHTML = note.innerText.substring(0, 6) + '...';\n        } else {\n          note_title.innerHTML = note.getElementsByTagName('H1')[0].innerHTML;\n        }\n        note.appendChild(note_title);\n        note.classList.add('mini');\n      }\n    }\n\n    // 样式\n    if (j !== 0) {\n      if (notes[j].getBoundingClientRect().x < notes[j - 1].getBoundingClientRect().x + notes[j - 1].getBoundingClientRect().width) {\n        notes[j].classList.add('overlay');\n      } else {\n        notes[j].classList.remove('overlay');\n      }\n    }\n  }\n}\n\n// 文章页面\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.findContent = (id, heptabase_blog_data) => {\n      if (heptabase_blog_data === '') {\n        return;\n      }\n      let new_card = null;\n      console.log('Post findContent for:');\n      for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n        if (heptabase_blog_data.cards[i]['id'] == id) {\n          // 处理内容中的图片\n          heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i]);\n          console.log('getClearImag done');\n          // 处理内容中的链接\n          new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards);\n          heptabase_blog_data.cards[i] = new_card['card'];\n          return new_card;\n        }\n      }\n      return new_card;\n    };\n    this.handleLinkClick = (link_id, current_id) => {\n      // 设置当前活跃的笔记（用户焦点）\n      this.setState({\n        activeNote: link_id\n      });\n\n      // 已经显示此卡片则不更新 URL 和数据\n      let bingo = false;\n      this.state.cardList.forEach(item => {\n        if (link_id == item['card']['id']) {\n          bingo = true;\n        }\n      });\n      if (bingo) {\n        return;\n      }\n\n      // 删除 Link 所在 card 后的所有 URL 参数\n      let url_search = window.location.search;\n      url_search = url_search.replace('?', '');\n      url_search = url_search.replace(/&/gi, '');\n      let url_search_list = url_search.split('note-id=');\n      let new_url_search = '';\n      let current_page_index = -1;\n      for (let i = 0; i < url_search_list.length; i++) {\n        if (url_search_list[i] === '') {\n          continue;\n        }\n        if (url_search_list[i] === current_id) {\n          // URL 参数 === current_id\n          current_page_index = i;\n        } else {\n          // URL 参数 !== current_id\n        }\n        if (new_url_search == '') {\n          new_url_search += '?note-id=' + url_search_list[i];\n        } else {\n          new_url_search += '&note-id=' + url_search_list[i];\n        }\n\n        //如果当前 id === current_id，则忽略后面的所有 ID\n        if (current_page_index > -1) {\n          break;\n        }\n      }\n      if (new_url_search == '') {\n        new_url_search += '?note-id=' + link_id;\n      } else {\n        new_url_search += '&note-id=' + link_id;\n      }\n\n      // 设置 URL\n      window.history.pushState({}, '', window.location.origin + '/post' + new_url_search);\n      // 记录 URL\n      this.setState({\n        location: window.location.href\n      });\n\n      // 删除 URL 中不存在的 Card\n      this.resetCardList();\n      // 根据 URL 获取 card 数据\n      this.herfToData();\n    };\n    this.herfToData = () => {\n      // 首页的情况\n      if (window.location.search === '') {\n        // 找到首页卡片的 ID\n        let main_id = this.state.main_card['id'];\n        // 设置 URL\n        window.location.replace(window.location.origin + '/post?note-id=' + main_id);\n      }\n\n      // 从 URL 中获取 note id，根据 id 获取卡片数据\n      let card_list = [];\n      let url_search = window.location.search;\n      url_search = url_search.replace('?', '');\n      url_search = url_search.replace(/&/gi, '');\n      let url_search_list = url_search.split('note-id=');\n      for (let i = 0; i < url_search_list.length; i++) {\n        if (url_search_list[i] == '') {\n          continue;\n        }\n        // 将数据保存到 card list 中\n        card_list.push(this.findContent(url_search_list[i], this.state.card));\n      }\n\n      // 收集 card 数据后一次性 setState（在 for 内分多次 setState 的话容易丢失数据）\n      this.setState({\n        cardList: card_list,\n        activeNote: card_list[card_list.length - 1]['card']['id'] // 设置当前活跃的笔记（用户焦点）\n      });\n    };\n    this.handleHashChange = url => {\n      setTimeout(() => {\n        let note_list = document.getElementsByClassName('container');\n        let foucus_note = this.state.activeNote;\n        console.log(note_list);\n        let target_note_offsetLeft = 0;\n        for (let j = 0; j < note_list.length; j++) {\n          let note = note_list[j];\n\n          // 定位到当前用户关注的笔记\n          if (note.getAttribute('note_id') === foucus_note) {\n            if (windowWidth > minWidth) {\n              console.log(target_note_offsetLeft);\n              document.getElementsByClassName('notes')[0].scrollTo({\n                left: j * 650,\n                behavior: 'smooth'\n              });\n            } else {}\n            break;\n          }\n          target_note_offsetLeft += note.clientWidth;\n        }\n\n        // 设置样式、小标题\n        setCardMiniTitleAndStyle(note_list);\n      }, 100);\n\n      // 如果 url 发生变化，则更新数据\n      if (url !== this.state.location) {\n        // 将当前 URL 保存到 state 中\n        this.setState({\n          location: url\n        });\n        if (this.state.location !== '') {\n          // cardList 中不存在 URL 的某一个 card\n          // 加载此 card 的数据\n          this.herfToData();\n        }\n      }\n\n      // 删除 URL 中不存在的 Card\n      this.resetCardList();\n    };\n    this.resetCardList = () => {\n      let url = window.location.href;\n      //比对 url 和 cardList\n      for (let i = 0; i < this.state.cardList.length; i++) {\n        // url 中不存在此 card\n        if (url.indexOf(this.state.cardList[i]['card']['id']) < 0) {\n          // 删除 card\n          this.state.cardList.splice(i, 1);\n          this.setState({\n            cardList: this.state.cardList\n          });\n        } else {\n          // url 中存在此 card\n          // continue\n        }\n      }\n    };\n    this.setNoteStyle = notes => {};\n    this.state = {\n      card: null //所有的 hepta 数据\n      ,\n      main_card: null //首页卡片\n      ,\n      cardList: [] // 当前页面的卡片列表\n      ,\n      location: '' // 记录 URL\n      ,\n      activeNote: 'null'\n    };\n  }\n  componentDidMount() {\n    // 请求 hepta 数据 getHeptabaseData\n    getHeptabaseData.then(res => {\n      let heptabase_blog_data = res.data;\n\n      // 将数据保存到 state 中\n      this.setState({\n        card: heptabase_blog_data,\n        main_card: res['pages']['about']\n      }, () => {\n        // 渲染 URL、数据\n        this.herfToData();\n      });\n    });\n  }\n\n  // 根据 card id 获取 card content\n\n  render() {\n    if (this.state.card === null || this.state.cardList.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 21\n      }, this);\n    } else {\n      console.log(this.state.activeNote);\n      let card_list_dom = [];\n\n      //如果屏幕宽度较小，则只显示 1 条笔记\n      if (windowWidth < minWidth) {\n        // 获取用户关注的笔记进行展示\n\n        let card = this.state.cardList[this.state.cardList.length - 1];\n        for (let k = 0; k < this.state.cardList.length; k++) {\n          if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n            card = this.state.cardList[k];\n            break;\n          }\n        }\n\n        //设置笔记样式\n        // left = index*40px; right = index*-40-400\n        let note_style = {\n          left: 0\n        };\n        card_list_dom.push( /*#__PURE__*/_jsxDEV(Container, {\n          style: note_style,\n          handleHashChange: this.handleHashChange,\n          handleLinkClick: this.handleLinkClick,\n          card: card\n        }, card['card']['id'], false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 36\n        }, this));\n      } else {\n        for (let i = 0; i < this.state.cardList.length; i++) {\n          let card = this.state.cardList[i];\n\n          //设置笔记样式\n          // left = index*40px; right = index*-40-400\n          let note_style = {\n            left: i * 40 + 'px',\n            right: -540 - i * 40 + 'px',\n            flex: '0 0 auto'\n          };\n          let note = /*#__PURE__*/_jsxDEV(Container, {\n            style: note_style,\n            handleHashChange: this.handleHashChange,\n            handleLinkClick: this.handleLinkClick,\n            card: card\n          }, card['card']['id'], false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 32\n          }, this);\n          card_list_dom.push(note);\n        }\n      }\n\n      // 设置网页标题\n      for (let k = 0; k < this.state.cardList.length; k++) {\n        if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n          if (this.state.cardList[k]['card']['title'] !== 'About') {\n            document.title = this.state.cardList[k]['card']['title'];\n          } else {\n            document.title = 'Jiang 的数字花园🌱';\n          }\n          break;\n        }\n      }\n\n      // 监听 notes 容器滚动\n      if (document.getElementsByClassName('notes')[0] !== undefined) {\n        let notes = document.getElementsByClassName('container');\n        document.getElementsByClassName('notes')[0].addEventListener('scroll', function () {\n          setCardMiniTitleAndStyle(notes);\n        });\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notes_box\",\n        children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notes\",\n          children: card_list_dom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 21\n      }, this);\n    }\n  }\n}\nexport default Post;","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","Link","useParams","useNavigate","useLocation","Container","Nav","Footer","Loading","getHeptabaseData","getClearCard","getClearImag","id","useHash","windowWidth","window","innerWidth","minWidth","setCardMiniTitleAndStyle","notes","j","length","type","note","left_mark","getBoundingClientRect","x","right_mark","undefined","note_title","getElementsByClassName","classList","remove","removeChild","add","contains","document","createElement","style","left","right","getElementsByTagName","innerHTML","innerText","substring","appendChild","width","Post","Component","constructor","props","findContent","heptabase_blog_data","new_card","console","log","i","cards","handleLinkClick","link_id","current_id","setState","activeNote","bingo","state","cardList","forEach","item","url_search","location","search","replace","url_search_list","split","new_url_search","current_page_index","history","pushState","origin","href","resetCardList","herfToData","main_id","main_card","card_list","push","card","handleHashChange","url","setTimeout","note_list","foucus_note","target_note_offsetLeft","getAttribute","scrollTo","behavior","clientWidth","indexOf","splice","setNoteStyle","componentDidMount","then","res","data","render","card_list_dom","k","note_style","flex","title","addEventListener"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Post.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\n\nimport Container from '../components/Container'\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer'\nimport Loading from '../components/Loading'\n\nimport '../index.css'\nimport 'github-markdown-css'\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction'\nimport { id } from 'date-fns/locale';\n\nimport useHash from \"../hooks/useHash\";\n\n\n\nlet windowWidth = window.innerWidth\nlet minWidth = 600\n\nfunction setCardMiniTitleAndStyle(notes) {\n    \n    for (let j = 0; j < notes.length; j++) {\n\n        // 小标题\n\n        let type = 0 // 记录标题在左侧还是右侧\n        let note // 记录需要添加标题的节点\n\n        // 判断卡片的位置，当遮挡前 1 个卡片时，前 1 个卡片显示垂直标题\n        let left_mark = notes[j].getBoundingClientRect().x <= j * 40 + 80\n        // 判断是否要显示右侧标题\n        let right_mark = notes[j].getBoundingClientRect().x >= window.innerWidth - (notes.length - j) * 40\n\n        // 左侧小标题\n        if (right_mark !== true) {\n\n            if (left_mark) {\n\n                if (j !== 0) {\n                    type = 1\n                    note = notes[j - 1]\n                }\n\n            } else {\n\n                // 移除小标题\n                if (j !== 0) {\n                    note = notes[j - 1]\n                }\n\n                if (note !== undefined) {\n                    let note_title = note.getElementsByClassName('note_title')[0]\n                    if (note_title !== undefined) {\n\n                        // 移除标题父级容器的类名标记\n                        note.classList.remove('mini')\n\n                        // 移除前一个元素的垂直标题\n                        note.removeChild(note_title)\n                    }\n                }\n\n            }\n\n        }\n\n\n        // 右侧小标题\n        if (left_mark !== true) {\n\n            if (right_mark) {\n\n                type = 2\n                note = notes[j]\n                // 添加悬浮样式\n                note.classList.add('overlay')\n\n            } else {\n                // 移除小标题\n                note = notes[j]\n\n                if (note !== undefined && j !== 0) {\n                    let note_title = note.getElementsByClassName('note_title')[0]\n                    if (note_title !== undefined) {\n\n                        // 移除标题父级容器的类名标记\n                        note.classList.remove('mini')\n\n                        // 移除前一个元素的垂直标题\n                        note.removeChild(note_title)\n                    }\n                }\n\n                // 移除悬浮样式\n                note.classList.remove('overlay')\n            }\n\n        }\n\n\n        // 需要显示小标题\n        if (type > 0) {\n\n            // 如果元素无标题\n            if (note.classList.contains('mini') == false) {\n                // 前一个元素显示垂直标题\n                let note_title = document.createElement('div')\n                note_title.classList.add('note_title')\n\n                if (type === 1) {\n                    note_title.style.left = (j - 1) * 40 + 'px'\n                } else {\n                    note_title.style.right = (notes.length - j) * 40 - 248 + 'px'\n                }\n\n\n                // 小标题文案\n                if (note.getElementsByTagName('H1').length === 0) {\n                    // 如果笔记中没有 H1 标题\n                    note_title.innerHTML = note.innerText.substring(0, 6) + '...'\n                } else {\n                    note_title.innerHTML = note.getElementsByTagName('H1')[0].innerHTML\n                }\n\n\n                note.appendChild(note_title)\n\n                note.classList.add('mini')\n            }\n\n        }\n\n        // 样式\n        if (j !== 0) {\n            if (notes[j].getBoundingClientRect().x < notes[j - 1].getBoundingClientRect().x + notes[j - 1].getBoundingClientRect().width) {\n                notes[j].classList.add('overlay')\n            } else {\n                notes[j].classList.remove('overlay')\n            }\n        }\n\n\n    }\n}\n\n// 文章页面\nclass Post extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            card: null //所有的 hepta 数据\n            , main_card: null //首页卡片\n            , cardList: [] // 当前页面的卡片列表\n            , location: '' // 记录 URL\n            , activeNote: 'null'\n        };\n    }\n\n    componentDidMount() {\n\n        // 请求 hepta 数据 getHeptabaseData\n        getHeptabaseData.then((res) => {\n\n            let heptabase_blog_data = res.data\n\n            // 将数据保存到 state 中\n            this.setState({\n                card: heptabase_blog_data,\n                main_card: res['pages']['about']\n            }, () => {\n\n                // 渲染 URL、数据\n                this.herfToData()\n            })\n\n        })\n\n    }\n\n    // 根据 card id 获取 card content\n    findContent = (id, heptabase_blog_data) => {\n        if (heptabase_blog_data === '') {\n            return\n        }\n\n        let new_card = null\n        console.log('Post findContent for:');\n        for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n\n            if (heptabase_blog_data.cards[i]['id'] == id) {\n\n                // 处理内容中的图片\n                heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i])\n                console.log('getClearImag done');\n                // 处理内容中的链接\n                new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards)\n                heptabase_blog_data.cards[i] = new_card['card']\n\n                return new_card\n\n            }\n        }\n\n        return new_card\n\n    }\n\n    // 文章内链接、反向链接点击\n    handleLinkClick = (link_id, current_id) => {\n\n        // 设置当前活跃的笔记（用户焦点）\n        this.setState({\n            activeNote: link_id\n        })\n\n        // 已经显示此卡片则不更新 URL 和数据\n        let bingo = false\n        this.state.cardList.forEach(item => {\n\n            if (link_id == item['card']['id']) {\n\n                bingo = true\n\n            }\n\n        });\n\n        if (bingo) {\n\n            return\n        }\n\n        // 删除 Link 所在 card 后的所有 URL 参数\n        let url_search = window.location.search\n        url_search = url_search.replace('?', '')\n        url_search = url_search.replace(/&/gi, '')\n        let url_search_list = url_search.split('note-id=')\n\n        let new_url_search = ''\n        let current_page_index = -1\n        for (let i = 0; i < url_search_list.length; i++) {\n\n            if (url_search_list[i] === '') {\n                continue\n            }\n\n            if (url_search_list[i] === current_id) {\n                // URL 参数 === current_id\n                current_page_index = i\n            } else {\n                // URL 参数 !== current_id\n            }\n\n            if (new_url_search == '') {\n                new_url_search += '?note-id=' + url_search_list[i]\n            } else {\n                new_url_search += '&note-id=' + url_search_list[i]\n            }\n\n            //如果当前 id === current_id，则忽略后面的所有 ID\n            if (current_page_index > -1) {\n                break;\n            }\n        }\n\n        if (new_url_search == '') {\n            new_url_search += '?note-id=' + link_id\n        } else {\n            new_url_search += '&note-id=' + link_id\n        }\n\n        // 设置 URL\n        window.history.pushState({}, '', window.location.origin + '/post' + new_url_search)\n        // 记录 URL\n        this.setState({\n            location: window.location.href\n        })\n\n\n        // 删除 URL 中不存在的 Card\n        this.resetCardList()\n        // 根据 URL 获取 card 数据\n        this.herfToData()\n\n    }\n\n    herfToData = () => {\n\n        // 首页的情况\n        if (window.location.search === '') {\n\n            // 找到首页卡片的 ID\n            let main_id = this.state.main_card['id']\n            // 设置 URL\n            window.location.replace(window.location.origin + '/post?note-id=' + main_id)\n\n        }\n\n        // 从 URL 中获取 note id，根据 id 获取卡片数据\n        let card_list = []\n        let url_search = window.location.search\n        url_search = url_search.replace('?', '')\n        url_search = url_search.replace(/&/gi, '')\n        let url_search_list = url_search.split('note-id=')\n\n        for (let i = 0; i < url_search_list.length; i++) {\n            if (url_search_list[i] == '') {\n                continue\n            }\n            // 将数据保存到 card list 中\n            card_list.push(this.findContent(url_search_list[i], this.state.card))\n\n        }\n\n        // 收集 card 数据后一次性 setState（在 for 内分多次 setState 的话容易丢失数据）\n        this.setState({\n            cardList: card_list,\n            activeNote: card_list[card_list.length - 1]['card']['id'] // 设置当前活跃的笔记（用户焦点）\n        })\n\n\n    }\n\n    // 当 URL 变化时（子组件 container 载入完毕后也会调用此方法）\n    handleHashChange = (url) => {\n\n\n        setTimeout(() => {\n            let note_list = document.getElementsByClassName('container')\n            let foucus_note = this.state.activeNote\n            console.log(note_list);\n\n            let target_note_offsetLeft = 0\n            for (let j = 0; j < note_list.length; j++) {\n                let note = note_list[j]\n\n                // 定位到当前用户关注的笔记\n                if (note.getAttribute('note_id') === foucus_note) {\n\n                    if (windowWidth > minWidth) {\n                        console.log(target_note_offsetLeft);\n                        document.getElementsByClassName('notes')[0].scrollTo({ left: j * 650, behavior: 'smooth' })\n                    } else {\n\n                    }\n\n                    break;\n\n                }\n\n\n\n\n                target_note_offsetLeft += note.clientWidth\n            }\n\n            // 设置样式、小标题\n            setCardMiniTitleAndStyle(note_list)\n\n        }, 100);\n\n        // 如果 url 发生变化，则更新数据\n        if (url !== this.state.location) {\n\n\n            // 将当前 URL 保存到 state 中\n            this.setState({\n                location: url\n            })\n\n            if (this.state.location !== '') {\n\n                // cardList 中不存在 URL 的某一个 card\n                // 加载此 card 的数据\n                this.herfToData()\n\n            }\n\n        }\n\n        // 删除 URL 中不存在的 Card\n        this.resetCardList()\n\n    }\n\n    // 删除 URL 中不存在的 Card\n    resetCardList = () => {\n        let url = window.location.href\n        //比对 url 和 cardList\n        for (let i = 0; i < this.state.cardList.length; i++) {\n            // url 中不存在此 card\n            if (url.indexOf(this.state.cardList[i]['card']['id']) < 0) {\n\n\n                // 删除 card\n                this.state.cardList.splice(i, 1)\n                this.setState({\n                    cardList: this.state.cardList\n                })\n\n            } else {\n                // url 中存在此 card\n                // continue\n            }\n\n        }\n\n    }\n\n    // 设置笔记样式\n    setNoteStyle = (notes) => {\n\n\n\n    }\n\n    render() {\n        if (this.state.card === null || this.state.cardList.length === 0) {\n            return (<div>\n                <Nav />\n                <Loading />\n                <Footer />\n            </div>)\n        } else {\n\n            console.log(this.state.activeNote);\n\n            let card_list_dom = []\n\n            //如果屏幕宽度较小，则只显示 1 条笔记\n            if (windowWidth < minWidth) {\n\n                // 获取用户关注的笔记进行展示\n\n                let card = this.state.cardList[this.state.cardList.length - 1]\n\n                for (let k = 0; k < this.state.cardList.length; k++) {\n                    if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n                        card = this.state.cardList[k]\n                        break;\n                    }\n                }\n\n                //设置笔记样式\n                // left = index*40px; right = index*-40-400\n                let note_style = {\n                    left: 0\n                }\n                card_list_dom.push(<Container style={note_style} key={card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={card} />)\n            } else {\n                for (let i = 0; i < this.state.cardList.length; i++) {\n                    let card = this.state.cardList[i]\n\n                    //设置笔记样式\n                    // left = index*40px; right = index*-40-400\n                    let note_style = {\n                        left: i * 40 + 'px',\n                        right: -540 - i * 40 + 'px',\n                        flex: '0 0 auto'\n                    }\n\n                    let note = <Container style={note_style} key={card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={card} />\n                    card_list_dom.push(note)\n                }\n            }\n\n            // 设置网页标题\n            for (let k = 0; k < this.state.cardList.length; k++) {\n                if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n\n                    if (this.state.cardList[k]['card']['title'] !== 'About') {\n                        document.title = this.state.cardList[k]['card']['title']\n                    } else {\n                        document.title = 'Jiang 的数字花园🌱'\n                    }\n\n                    break;\n                }\n            }\n\n            // 监听 notes 容器滚动\n            if (document.getElementsByClassName('notes')[0] !== undefined) {\n\n                let notes = document.getElementsByClassName('container')\n                document.getElementsByClassName('notes')[0].addEventListener('scroll', function () {\n\n                    setCardMiniTitleAndStyle(notes)\n\n                })\n            }\n\n            return (<div className='notes_box'>\n\n                <Nav />\n                {/* <Container card={card} /> */}\n                <div className='notes'>\n                    {card_list_dom}\n                </div>\n\n                {/* <Footer /> */}\n\n            </div>)\n        }\n    }\n\n\n\n}\n\nexport default Post;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}