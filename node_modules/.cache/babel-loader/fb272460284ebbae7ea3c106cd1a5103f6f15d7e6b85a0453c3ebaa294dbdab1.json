{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/page/Post.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport useHash from \"../hooks/useHash\";\nimport Container from '../components/Container';\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer';\nimport '../index.css';\nimport 'github-markdown-css';\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction';\nimport { set } from 'date-fns';\n\n// 文章页面\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Post(props) {\n  _s2();\n  var _s = $RefreshSig$();\n  let {\n    slug\n  } = useParams();\n  const useScrollToTop = () => {\n    _s();\n    //注意自定义Hooks要用useXXX定义\n    const {\n      pathname\n    } = useLocation();\n    useEffect(() => {\n      console.log('pathname change');\n      console.log('useScrollToTop');\n      console.log(window.history);\n      window.history.scrollRestoration = 'manual';\n\n      // 根据跳转类型来决定是否要定位到顶部，如果不是点击 span 或 backLink 则不回到顶部\n\n      let nav_type = sessionStorage.getItem('nav_type');\n      if (nav_type > -1) {\n        // 点击了 span 或 backLink\n\n        setTimeout(() => {\n          window.scrollTo({\n            top: 0,\n            left: 0,\n            behavior: 'auto'\n          });\n        }, 10);\n\n        // window.scrollTo(0, 0);\n\n        // 重置 nav_type\n        sessionStorage.setItem('nav_type', -1);\n      } else {\n        // 返回上一页\n        setTimeout(() => {\n          window.scrollTo({\n            top: sessionStorage.getItem('scrollY'),\n            left: 0,\n            behavior: 'auto'\n          });\n\n          // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n        }, 10);\n\n        // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n      }\n    }, [pathname]);\n  };\n\n  // useScrollToTop();\n\n  // 处理 hash\n  _s(useScrollToTop, \"+8VPq4+XDMjo/kjL3WLkbwU2Amg=\", false, function () {\n    return [useLocation];\n  });\n  const [hash, setHash] = useHash();\n  // 记录数据加载状态\n  let [isLoading, setLoadingState] = useState(true);\n  // 记录数据\n  const [cards, setCards] = useState([]);\n  let container_list = [];\n\n  // 页面载入\n  useEffect(() => {\n    // console.log('scrollTo(0, 0)');\n    // window.scrollTo(0, 0);\n    console.log('Post useEffect');\n    // 获取 url\n    console.log(slug);\n  });\n\n  // hash 变化时\n  useEffect(() => {\n    console.log('hash change useEffect');\n    // 更新数据\n    console.log(hash);\n\n    // 获取数据\n    // ID 列表\n    let id_list = hash.split('#');\n    for (let i = 0; i < id_list.length; i++) {\n      if (id_list[i] !== '') {\n        setContent(id_list[i]);\n      }\n    }\n    console.log(cards);\n  }, [hash]);\n\n  // 获取文章数据、处理文章数据\n  const setContent = (id, card_index) => {\n    console.log('setContent');\n    let mark = -1;\n    let isExists = false;\n    for (let j = 0; j < cards.length; j++) {\n      // 数据是否已在列表中\n      if (cards[j]['card']['id'] == id) {\n        isExists = true;\n      }\n    }\n    if (isExists) {\n      return;\n    }\n\n    // 存储数据的变量\n    let heptabase_blog_data;\n    getHeptabaseData.then(res => {\n      heptabase_blog_data = res.data;\n      let new_card = null;\n      console.log('Container setContent for:');\n      for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n        if (heptabase_blog_data.cards[i]['id'] == id) {\n          // 处理内容中的图片\n          heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i]);\n          console.log('getClearImag done');\n          // 处理内容中的链接\n          new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards);\n          heptabase_blog_data.cards[i] = new_card['card'];\n          cards.push(new_card);\n          setCards(cards);\n          console.log(cards);\n          setLoadingState(false);\n          break;\n        }\n      }\n\n      // 404\n      if (new_card == null) {\n        console.log('404');\n        // window.location = '/404'\n      }\n    });\n  };\n\n  // cards 变化时\n  useEffect(() => {\n    console.log('cards change useEffect');\n  }, [cards]);\n\n  // 设置 hash\n  const postSetHash = (targe_card_id, current_card_id) => {\n    //移除旧的\n    let newHash = '';\n    let id_list = hash.split('#');\n    for (let j = 0; j < id_list.length; j++) {\n      // ABC 中点击 A 卡片的链接时，删除 A 之后的所有数据\n      if (id_list[j] == current_card_id) {\n        if (j !== id_list.length - 1) {\n          // 在最后 1 个卡片中点击则不删除任何数据\n\n          // 删除 hash\n          id_list.splice(j + 1, id_list.length);\n          // cards.splice(j + 1, cards.length)\n\n          break;\n        }\n      }\n    }\n    newHash = id_list.join('#');\n    newHash = newHash + '#' + targe_card_id;\n    setHash(newHash);\n  };\n\n  // 点击链接\n  const handleLinkClick = (id, card_index) => {\n    console.log('Post handleLinkClick');\n    console.log(id);\n    console.log(card_index);\n    // if (hash == '') {\n    //     setHash(hash + id)\n    // } else {\n    //     setHash(hash + '#' + id)\n    // }\n\n    // setContent(id, card_index)\n    postSetHash(id, card_index);\n  };\n  document.title = props.title;\n  console.log(cards);\n  // let container_list = cards.map((card)=>{\n  //     <Container card={card} />  \n  // })\n\n  for (let i = 0; i < cards.length; i++) {\n    // console.log(cards[i]);\n    container_list.push( /*#__PURE__*/_jsxDEV(Container, {\n      index: cards[i]['card']['id'],\n      data: cards[i],\n      handleLinkClick: handleLinkClick\n    }, cards[i]['card']['id'], false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 29\n    }, this));\n  }\n  console.log(container_list);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container_list\",\n      children: container_list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 12\n  }, this);\n}\n_s2(Post, \"/Q1d7LNZeoaUyNTZB/XcUpOIWiw=\", false, function () {\n  return [useParams, useHash];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","Link","useParams","useLocation","useHash","Container","Nav","Footer","getHeptabaseData","getClearCard","getClearImag","set","Post","props","slug","useScrollToTop","pathname","console","log","window","history","scrollRestoration","nav_type","sessionStorage","getItem","setTimeout","scrollTo","top","left","behavior","setItem","hash","setHash","isLoading","setLoadingState","cards","setCards","container_list","id_list","split","i","length","setContent","id","card_index","mark","isExists","j","heptabase_blog_data","then","res","data","new_card","push","postSetHash","targe_card_id","current_card_id","newHash","splice","join","handleLinkClick","document","title"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Post.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\n\nimport useHash from \"../hooks/useHash\";\n\nimport Container from '../components/Container'\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer'\n\nimport '../index.css'\nimport 'github-markdown-css'\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction'\nimport { set } from 'date-fns';\n\n// 文章页面\nfunction Post(props) {\n    let { slug } = useParams();\n\n\n    const useScrollToTop = () => {   //注意自定义Hooks要用useXXX定义\n        const { pathname } = useLocation();\n        useEffect(() => {\n\n            console.log('pathname change');\n\n            console.log('useScrollToTop');\n\n            console.log(window.history);\n            window.history.scrollRestoration = 'manual';\n\n            // 根据跳转类型来决定是否要定位到顶部，如果不是点击 span 或 backLink 则不回到顶部\n\n            let nav_type = sessionStorage.getItem('nav_type')\n\n            if (nav_type > -1) {\n                // 点击了 span 或 backLink\n\n                setTimeout(() => {\n                    window.scrollTo({\n                        top: 0,\n                        left: 0,\n                        behavior: 'auto'\n                    });\n                }, 10);\n\n                // window.scrollTo(0, 0);\n\n                // 重置 nav_type\n                sessionStorage.setItem('nav_type', -1)\n            } else {\n\n                // 返回上一页\n                setTimeout(() => {\n\n                    window.scrollTo({\n                        top: sessionStorage.getItem('scrollY'),\n                        left: 0,\n                        behavior: 'auto'\n                    });\n\n                    // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n                }, 10);\n\n                // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n\n            }\n\n\n        }, [pathname]);\n    }\n\n    // useScrollToTop();\n\n    // 处理 hash\n    const [hash, setHash] = useHash();\n    // 记录数据加载状态\n    let [isLoading, setLoadingState] = useState(true)\n    // 记录数据\n    const [cards, setCards] = useState([])\n\n    let container_list = []\n\n    // 页面载入\n    useEffect(() => {\n        // console.log('scrollTo(0, 0)');\n        // window.scrollTo(0, 0);\n        console.log('Post useEffect');\n        // 获取 url\n        console.log(slug);\n\n\n\n\n\n    })\n\n\n    // hash 变化时\n    useEffect(() => {\n\n        console.log('hash change useEffect');\n        // 更新数据\n        console.log(hash);\n\n        // 获取数据\n        // ID 列表\n        let id_list = hash.split('#')\n        for (let i = 0; i < id_list.length; i++) {\n            if (id_list[i] !== '') {\n                setContent(id_list[i])\n            }\n        }\n        console.log(cards);\n\n\n\n    }, [hash])\n\n\n    // 获取文章数据、处理文章数据\n    const setContent = (id, card_index) => {\n        console.log('setContent');\n\n        let mark = -1\n        let isExists = false\n        for (let j = 0; j < cards.length; j++) {\n\n            // 数据是否已在列表中\n            if (cards[j]['card']['id'] == id) {\n                isExists = true\n            }\n\n        }\n\n        if (isExists) {\n            return\n        }\n\n\n\n\n        // 存储数据的变量\n        let heptabase_blog_data\n\n        getHeptabaseData.then((res) => {\n            heptabase_blog_data = res.data\n            let new_card = null\n            console.log('Container setContent for:');\n            for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n\n                if (heptabase_blog_data.cards[i]['id'] == id) {\n\n                    // 处理内容中的图片\n                    heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i])\n                    console.log('getClearImag done');\n                    // 处理内容中的链接\n                    new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards)\n                    heptabase_blog_data.cards[i] = new_card['card']\n\n\n\n                    cards.push(new_card)\n                    setCards(cards)\n                    console.log(cards);\n                    setLoadingState(false)\n                    break;\n                }\n            }\n\n            // 404\n            if (new_card == null) {\n                console.log('404');\n                // window.location = '/404'\n            }\n        })\n\n    }\n\n\n\n\n\n    // cards 变化时\n    useEffect(() => {\n\n        console.log('cards change useEffect');\n\n\n\n    }, [cards])\n\n    // 设置 hash\n    const postSetHash = (targe_card_id, current_card_id) => {\n        //移除旧的\n        let newHash = ''\n        let id_list = hash.split('#')\n\n        for (let j = 0; j < id_list.length; j++) {\n\n            // ABC 中点击 A 卡片的链接时，删除 A 之后的所有数据\n            if (id_list[j] == current_card_id) {\n\n                if (j !== id_list.length - 1) {\n                    // 在最后 1 个卡片中点击则不删除任何数据\n\n                    // 删除 hash\n                    id_list.splice(j + 1, id_list.length)\n                    // cards.splice(j + 1, cards.length)\n\n\n                    break;\n                }\n\n            }\n\n        }\n\n        newHash = id_list.join('#')\n        newHash = newHash + '#' + targe_card_id\n        setHash(newHash)\n\n\n    }\n\n    // 点击链接\n    const handleLinkClick = (id, card_index) => {\n        console.log('Post handleLinkClick');\n        console.log(id);\n        console.log(card_index);\n        // if (hash == '') {\n        //     setHash(hash + id)\n        // } else {\n        //     setHash(hash + '#' + id)\n        // }\n\n        // setContent(id, card_index)\n        postSetHash(id, card_index)\n    }\n\n    document.title = props.title\n    console.log(cards);\n    // let container_list = cards.map((card)=>{\n    //     <Container card={card} />  \n    // })\n\n    for (let i = 0; i < cards.length; i++) {\n        // console.log(cards[i]);\n        container_list.push(<Container key={cards[i]['card']['id']} index={cards[i]['card']['id']} data={cards[i]} handleLinkClick={handleLinkClick} />)\n    }\n\n\n    console.log(container_list);\n\n    return <div>\n\n\n        <Nav />\n        <div className='container_list'>\n            {container_list}\n        </div>\n        <Footer />\n\n    </div>;\n\n}\n\nexport default Post;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}