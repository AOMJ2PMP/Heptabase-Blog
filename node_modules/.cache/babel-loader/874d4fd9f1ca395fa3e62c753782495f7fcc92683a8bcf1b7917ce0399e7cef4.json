{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/heptabase_blog/src/page/Post.js\";\nimport React from 'react';\nimport Nav from '../components/Nav';\nimport '../index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getClearImag = content => {\n      // 修改图片后缀，避免图片无法显示\n      // 找到 ![]( 符号\n      // 找到上述符号之后的第 1 个 jpg#/png#/gif# 符号\n      // 找到上一个步骤后的第 1 个 ) 符号\n      // 删除前面 2 步 index 中间的符号\n\n      let img_type = ['.png', '.jpeg', '.jpg', '.gif'];\n      let img_keyword_index = content.indexOf('![');\n      while (img_keyword_index != -1) {\n        // 获取下一个 ) 索引\n        let img_end_inex = content.indexOf(')', img_keyword_index);\n        // 获取图片扩展名索引\n        let img_etc_index;\n\n        // find_start_index+=img_etc_index\n\n        for (let i = 0; i < img_type.length; i++) {\n          img_etc_index = content.indexOf(img_type[i], img_keyword_index + 1);\n          if (img_etc_index >= 0 && img_etc_index <= img_end_inex) {\n            img_etc_index += img_type[i].length;\n            break;\n          }\n        }\n        console.log('img_keyword_index');\n        console.log(img_keyword_index);\n        console.log('img_end_inex');\n        console.log(img_end_inex);\n        console.log('img_etc_index');\n        console.log(img_etc_index);\n        if (img_keyword_index == -1 || img_end_inex == -1 || img_etc_index == -1) {\n          break;\n        }\n        let old_img_str = content.substring(img_keyword_index, img_end_inex);\n        let new_img_str = content.substring(img_keyword_index, img_etc_index);\n        console.log(old_img_str);\n        console.log(new_img_str);\n        content = content.replace(old_img_str, new_img_str);\n\n        // 获取 ![ 索引\n        img_keyword_index = content.indexOf('![', img_keyword_index + 1);\n      }\n      return content;\n    };\n    this.getClearCard = (content, cards) => {\n      // 找到 (./ 符号以及之后的第 1 个 ，或找到 {{ 符号 }}) 符号，截取这 2 个 index 中间的字符串\n      // 将上述字符串放在 card 数据中匹配\n      // 如果找到匹配的卡片：修改上述字符串的地址为 /post/post.id\n\n      // 获取 {{ 符号\n      let card_keyword_index = content.indexOf('{{');\n      while (card_keyword_index != -1) {\n        //获取卡片末尾的索引\n        let card_end_inex = content.indexOf('}}', card_keyword_index);\n        if (card_keyword_index == -1 || card_end_inex == -1) {\n          break;\n        }\n        console.log('card_keyword_index:');\n        console.log(card_keyword_index);\n        console.log('card_end_inex:');\n        console.log(card_end_inex);\n        let old_card = content.substring(card_keyword_index, card_end_inex + 2);\n        // {{card xxxx-xxx-xxxx}}\n        let new_card = '{{未知卡片}}';\n\n        // 检验一下的确是 card\n        if (old_card.indexOf('card ') >= 0) {\n          console.log('old_card：');\n          console.log(old_card);\n\n          // 根据 ID 匹配数据中是否存在此卡片\n\n          for (let i = 0; i < cards.length; i++) {\n            if (old_card.indexOf(cards[i]['id']) >= 0) {\n              // 存在：设置卡片链接\n              new_card = '[' + cards[i]['title'] + ']' + '(' + '/post/' + cards[i]['id'] + ')';\n              break;\n            }\n          }\n\n          // if(new_card!=''){\n\n          //     content = content.replace(old_card,new_card)\n          // }else{\n          //     console.log('new_card!=');\n          //     content = content.replace(old_card,'{{未知卡片}}')\n          // }\n\n          console.log('new_card:');\n          console.log(new_card);\n          content = content.replace(old_card, new_card);\n          card_keyword_index = content.indexOf('{{', card_keyword_index + 1);\n        }\n      }\n\n      // 获取 (./ 符号\n      let custom_card_keyword_index = content.indexOf('(./');\n      while (custom_card_keyword_index != -1) {\n        //获取卡片末尾的索引\n        let custom_card_end_inex = content.indexOf(')', custom_card_keyword_index);\n        if (custom_card_keyword_index == -1 || custom_card_end_inex == -1) {\n          break;\n        }\n        let custom_old_card = content.substring(custom_card_end_inex, custom_card_keyword_index + 1);\n        // {{card xxxx-xxx-xxxx}}\n        let custom_new_card = '/404/';\n\n        // 根据 ID 匹配数据中是否存在此卡片\n\n        for (let i = 0; i < cards.length; i++) {\n          if (custom_old_card.indexOf(cards[i]['id']) >= 0) {\n            // 存在：设置卡片链接\n            custom_new_card = '/post/' + cards[i]['id'] + ')';\n            break;\n          }\n        }\n        console.log('custom_new_card:');\n        console.log(custom_new_card);\n        content = content.replace(custom_old_card, custom_new_card);\n        custom_card_keyword_index = content.indexOf('(./', card_keyword_index + 1);\n      }\n      return content;\n    };\n    this.state = {\n      content: ''\n    };\n  }\n  componentWillMount() {\n    //console.log(this.props.location)//传递过来的所有参数\n    // console.log(this.props.location.state.key)//val值\n\n    // 滚动到顶部\n\n    //获取 URL 中的文章 ID\n    console.log(window.location);\n    let post_id = window.location.pathname.replace('/post/', '');\n    console.log(post_id);\n\n    // 获取本地数据\n    let heptabase_blog_data = localStorage.getItem(\"heptabase_blog_data\");\n    console.log('local_heptabase_blog_data:');\n    console.log(heptabase_blog_data);\n    // 若本地存在数据则不重新获取\n    if (heptabase_blog_data != undefined) {\n      heptabase_blog_data = JSON.parse(heptabase_blog_data);\n    } else {\n      // 本地无数据\n      // 获取 Heptabase 数据\n      fetch(\n      //https://app.heptabase.com/w/d4cc3728297609add1a00aab108e90c4e57a1c378cfc2307c251745bf7d2a884\n      'https://app.heptabase.com/api/whiteboard/?secret=d4cc3728297609add1a00aab108e90c4e57a1c378cfc2307c251745bf7d2a884').then(res => res.json()).then(data => {\n        console.log(data);\n        // this.setState({ posts: data })\n\n        // 存储数据到本地缓存\n        localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(data));\n        // console.log(this.state.posts);\n      }).catch(e => console.log('错误:', e));\n    }\n    for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n      if (heptabase_blog_data.cards[i]['id'] == post_id) {\n        let card_text = this.getClearImag(heptabase_blog_data.cards[i]['content']);\n        card_text = this.getClearCard(card_text, heptabase_blog_data.cards);\n        this.setState({\n          content: card_text\n        });\n        break;\n      }\n    }\n\n    // 修改 a 标签的点击事件\n    document.getElementsByTagName('a').onClick = function () {\n      console.log('a');\n    };\n  }\n  render() {\n    let card_text = this.state.content;\n    var showdown = require('showdown'),\n      converter = new showdown.Converter(),\n      text = card_text,\n      html = converter.makeHtml(text);\n    // console.log(html);\n\n    // 处理 html 中的卡片链接，首先确认是卡片，然后再获取卡片的标题和链接，获取不到则提示无效的卡片\n\n    // 滚动到顶部\n    window.scrollTo(0, 0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"article\", {\n          dangerouslySetInnerHTML: {\n            __html: html\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Post;","map":{"version":3,"names":["React","Nav","Post","Component","constructor","props","getClearImag","content","img_type","img_keyword_index","indexOf","img_end_inex","img_etc_index","i","length","console","log","old_img_str","substring","new_img_str","replace","getClearCard","cards","card_keyword_index","card_end_inex","old_card","new_card","custom_card_keyword_index","custom_card_end_inex","custom_old_card","custom_new_card","state","componentWillMount","window","location","post_id","pathname","heptabase_blog_data","localStorage","getItem","undefined","JSON","parse","fetch","then","res","json","data","setItem","stringify","catch","e","card_text","setState","document","getElementsByTagName","onClick","render","showdown","require","converter","Converter","text","html","makeHtml","scrollTo","__html"],"sources":["/Users/jiangzilong/学习/minpg/heptabase_blog/src/page/Post.js"],"sourcesContent":["import React from 'react';\nimport Nav from '../components/Nav';\nimport '../index.css'\n\nclass Post extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { content: '' };\n    }\n\n    componentWillMount() {\n        //console.log(this.props.location)//传递过来的所有参数\n        // console.log(this.props.location.state.key)//val值\n\n        // 滚动到顶部\n\n\n        //获取 URL 中的文章 ID\n        console.log(window.location);\n        let post_id = window.location.pathname.replace('/post/', '')\n        console.log(post_id);\n\n        // 获取本地数据\n        let heptabase_blog_data = localStorage.getItem(\"heptabase_blog_data\")\n        console.log('local_heptabase_blog_data:');\n        console.log(heptabase_blog_data);\n        // 若本地存在数据则不重新获取\n        if (heptabase_blog_data != undefined) {\n            heptabase_blog_data = JSON.parse(heptabase_blog_data)\n        } else {\n            // 本地无数据\n            // 获取 Heptabase 数据\n            fetch(\n                //https://app.heptabase.com/w/d4cc3728297609add1a00aab108e90c4e57a1c378cfc2307c251745bf7d2a884\n                'https://app.heptabase.com/api/whiteboard/?secret=d4cc3728297609add1a00aab108e90c4e57a1c378cfc2307c251745bf7d2a884'\n            )\n                .then(res => res.json())\n                .then(data => {\n                    console.log(data)\n                    // this.setState({ posts: data })\n\n                    // 存储数据到本地缓存\n                    localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(data))\n                    // console.log(this.state.posts);\n                })\n                .catch(e => console.log('错误:', e))\n        }\n\n\n        for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n            if (heptabase_blog_data.cards[i]['id'] == post_id) {\n\n                let card_text = this.getClearImag(heptabase_blog_data.cards[i]['content'])\n                card_text = this.getClearCard(card_text, heptabase_blog_data.cards)\n\n                this.setState({ content: card_text })\n                break;\n            }\n        }\n\n\n\n        // 修改 a 标签的点击事件\n        document.getElementsByTagName('a').onClick = function () { console.log('a') }\n\n    }\n\n    getClearImag = (content) => {\n\n        // 修改图片后缀，避免图片无法显示\n        // 找到 ![]( 符号\n        // 找到上述符号之后的第 1 个 jpg#/png#/gif# 符号\n        // 找到上一个步骤后的第 1 个 ) 符号\n        // 删除前面 2 步 index 中间的符号\n\n        let img_type = ['.png', '.jpeg', '.jpg', '.gif']\n\n        let img_keyword_index = content.indexOf('![')\n\n        while (img_keyword_index != -1) {\n\n\n            // 获取下一个 ) 索引\n            let img_end_inex = content.indexOf(')', img_keyword_index)\n            // 获取图片扩展名索引\n            let img_etc_index\n\n            // find_start_index+=img_etc_index\n\n            for (let i = 0; i < img_type.length; i++) {\n                img_etc_index = content.indexOf(img_type[i], img_keyword_index + 1)\n                if (img_etc_index >= 0 && img_etc_index <= img_end_inex) {\n                    img_etc_index += img_type[i].length\n                    break;\n                }\n            }\n\n            console.log('img_keyword_index');\n            console.log(img_keyword_index);\n            console.log('img_end_inex');\n            console.log(img_end_inex);\n            console.log('img_etc_index');\n            console.log(img_etc_index);\n\n            if (img_keyword_index == -1 || img_end_inex == -1 || img_etc_index == -1) {\n                break\n            }\n\n            let old_img_str = content.substring(img_keyword_index, img_end_inex)\n            let new_img_str = content.substring(img_keyword_index, img_etc_index)\n\n            console.log(old_img_str);\n            console.log(new_img_str);\n\n            content = content.replace(old_img_str, new_img_str)\n\n            // 获取 ![ 索引\n            img_keyword_index = content.indexOf('![', img_keyword_index + 1)\n\n\n        }\n\n        return content\n\n    }\n\n    getClearCard = (content, cards) => {\n\n        // 找到 (./ 符号以及之后的第 1 个 ，或找到 {{ 符号 }}) 符号，截取这 2 个 index 中间的字符串\n        // 将上述字符串放在 card 数据中匹配\n        // 如果找到匹配的卡片：修改上述字符串的地址为 /post/post.id\n\n        // 获取 {{ 符号\n        let card_keyword_index = content.indexOf('{{')\n\n        while (card_keyword_index != -1) {\n\n            //获取卡片末尾的索引\n            let card_end_inex = content.indexOf('}}', card_keyword_index)\n\n            if (card_keyword_index == -1 || card_end_inex == -1) {\n                break\n            }\n\n            console.log('card_keyword_index:');\n            console.log(card_keyword_index);\n            console.log('card_end_inex:');\n            console.log(card_end_inex);\n\n            let old_card = content.substring(card_keyword_index, card_end_inex + 2)\n            // {{card xxxx-xxx-xxxx}}\n            let new_card = '{{未知卡片}}'\n\n            // 检验一下的确是 card\n            if (old_card.indexOf('card ') >= 0) {\n                console.log('old_card：');\n                console.log(old_card);\n\n                // 根据 ID 匹配数据中是否存在此卡片\n\n                for (let i = 0; i < cards.length; i++) {\n\n                    if (old_card.indexOf(cards[i]['id']) >= 0) {\n                        // 存在：设置卡片链接\n                        new_card = '[' + cards[i]['title'] + ']' + '(' + '/post/' + cards[i]['id'] + ')'\n                        break\n                    }\n\n                }\n\n                // if(new_card!=''){\n\n                //     content = content.replace(old_card,new_card)\n                // }else{\n                //     console.log('new_card!=');\n                //     content = content.replace(old_card,'{{未知卡片}}')\n                // }\n\n                console.log('new_card:');\n                console.log(new_card);\n\n                content = content.replace(old_card, new_card)\n\n\n                card_keyword_index = content.indexOf('{{', card_keyword_index + 1)\n\n            }\n\n        }\n\n\n        // 获取 (./ 符号\n        let custom_card_keyword_index = content.indexOf('(./')\n        while (custom_card_keyword_index != -1) {\n\n            //获取卡片末尾的索引\n            let custom_card_end_inex = content.indexOf(')', custom_card_keyword_index)\n\n            if (custom_card_keyword_index == -1 || custom_card_end_inex == -1) {\n                break\n            }\n\n            let custom_old_card = content.substring(custom_card_end_inex, custom_card_keyword_index + 1)\n            // {{card xxxx-xxx-xxxx}}\n            let custom_new_card = '/404/'\n\n            // 根据 ID 匹配数据中是否存在此卡片\n\n            for (let i = 0; i < cards.length; i++) {\n\n                if (custom_old_card.indexOf(cards[i]['id']) >= 0) {\n                    // 存在：设置卡片链接\n                    custom_new_card = '/post/' + cards[i]['id'] + ')'\n                    break\n                }\n\n            }\n\n            console.log('custom_new_card:');\n            console.log(custom_new_card);\n\n            content = content.replace(custom_old_card, custom_new_card)\n\n\n            custom_card_keyword_index = content.indexOf('(./', card_keyword_index + 1)\n\n\n\n        }\n\n        return content\n\n    }\n\n    render() {\n\n\n\n        let card_text = this.state.content\n\n\n\n\n        var showdown = require('showdown'),\n            converter = new showdown.Converter(),\n            text = card_text,\n            html = converter.makeHtml(text);\n        // console.log(html);\n\n        // 处理 html 中的卡片链接，首先确认是卡片，然后再获取卡片的标题和链接，获取不到则提示无效的卡片\n\n        // 滚动到顶部\n        window.scrollTo(0, 0);\n\n        return (\n            <div>\n                <Nav />\n                <div className='container'>\n\n                    <article dangerouslySetInnerHTML={{ __html: html }}></article>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Post;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}