{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/components/Container.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useUrlState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport { format } from 'date-fns';\nimport '../index.css';\nimport 'github-markdown-css';\nimport Loading from '../components/Loading';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeRaw from 'rehype-raw';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n// import docco from 'react-syntax-highlighter/dist/esm/styles/hljs/docco';\n\n// 文章正文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Container(props) {\n  _s();\n  console.log(props);\n\n  // 记录文章的 DOM 信息，用来处理 DOM 元素，例如修改图片样式\n  let post = useRef(null);\n\n  // 当前路径信息\n  let path = window.location.pathname;\n\n  // 路径中包含的 post id，用以获取文章 md 信息\n  let path_id;\n  if (path.indexOf('/post/') < 0) {\n    // 若路径中不含 post id，则取父组件的 props\n    path_id = props.post_id;\n  } else {\n    path_id = path.replace('/post/', '');\n  }\n\n  // console.log(isLoading);\n  // 记录当前文章的 ID\n  let [thisPageId, setPageID] = useState('');\n\n  // 记录自定义的 Link 数据，用来实现 DOM 链接的间接跳转\n  let [my_link, setLink] = useState('');\n\n  // 记录当前文章对应的卡片信息\n  let [card, setCard] = useState('card');\n\n  // 如果当前页面 ID 为空则获取数据\n  if (thisPageId == '') {\n    setPageID(props.post_id);\n  }\n\n  // 如果是移动端则增加图片的尺寸\n  let isMobile = navigator.userAgent.match(/Mobile/i);\n  let mobileSkale = 1;\n  if (isMobile) {\n    mobileSkale = 2;\n  }\n  const handleBackLinkClick = () => {\n    console.log('handleBackLinkClick');\n\n    // 记录跳转类型\n    sessionStorage.setItem('nav_type', 0);\n    // 记录当前滚动的位置\n    sessionStorage.setItem('scrollY', window.scrollY);\n  };\n  const {\n    pathname\n  } = useLocation();\n  // 组件生命周期，组件载入、更新时将触发此函数\n  useEffect(() => {\n    console.log('useEffect');\n\n    //设置页面内容\n    if (card === 'card') {\n      // 如果 card 无内容，则获取数据\n\n      // setContent(path_id)\n\n      // window.scrollTo(0, 0);\n    } else {\n      if (card['card']['id'] !== path_id) {\n        // 如果 card 的 ID 与当前 URL 中的 ID 不一致\n        console.log('useEffect setContent');\n        // 获取新 URL 中的文章 ID 对应的 md 数据\n        // setContent(path_id)\n        // 清空旧页面的自定义链接\n        setLink('');\n      }\n    }\n\n    // dom 加载完毕后\n    // if (post.current != null && card['card']['id'] == path_id) {\n\n    //     // 设置 img 的尺寸\n    //     let article_img = document.getElementsByTagName('img');\n    //     console.log(article_img);\n\n    //     for (let i = 0; i < article_img.length; i++) {\n    //         let width_key_index = article_img[i]['alt'].indexOf('{{width ')\n    //         if (width_key_index > -1) {\n    //             let img_width = article_img[i]['alt'].substring(width_key_index, article_img[i]['alt'].length)\n    //             img_width = img_width.replace('{{width ', '')\n    //             img_width = img_width.replace('}}', '')\n\n    //             article_img[i].setAttribute('style', 'width:' + (Number(img_width.replace('%', '')) * mobileSkale).toString() + '%')\n    //             article_img[i].style.display = 'block'\n    //             article_img[i].style.margin = '0 auto'\n    //         }\n    //     }\n\n    //     // 设置 a 链接的点击事件，将 a 按照 Link 的方式进行跳转，避免页面不必要的刷新\n    //     let article_link = document.getElementsByTagName('span');\n    //     console.log(article_link);\n    //     let links = []\n\n    //     for (let i = 0; i < article_link.length; i++) {\n\n    //         if (article_link[i].getAttribute('path') == undefined || article_link[i].getAttribute('path') == null) {\n    //             // 如果 DOM 中的元素**不**包含 path 属性，则跳过（有 path 属性的元素才需要处理）\n    //             continue\n    //         }\n\n    //         // 创建 Link 元素，当点击上述 span 原生时，将触发 Link 元素的点击事件\n    //         let link_temp = <Link className='link_temp' to={article_link[i].getAttribute('path')}>Link</Link>\n    //         links.push(link_temp)\n\n    //         // DOM 中的特定元素点击时\n    //         article_link[i].onclick = () => {\n    //             console.log('a click');\n\n    //             // 获取元素的 path 参数，提取 post id\n    //             let post_id = article_link[i].getAttribute('path').replace('/post/', '')\n    //             console.log(post_id);\n\n    //             // 获取自定义的 Link 元素\n    //             let my_links = document.getElementsByClassName('link_temp')\n\n    //             for (let j = 0; j < my_links.length; j++) {\n    //                 console.log(my_links[j]);\n    //                 console.log(my_links[j].href);\n\n    //                 // 如果自定义的 Link 的 href 属性中包含 元素 path 属性的值，则可匹配\n    //                 if (my_links[j].href.indexOf(article_link[i].getAttribute('path')) >= 0) {\n\n    //                     // 记录跳转类型\n    //                     sessionStorage.setItem('nav_type', 1)\n    //                     // 记录当前滚动的位置\n    //                     sessionStorage.setItem('scrollY', window.scrollY)\n\n    //                     // 点击\n    //                     my_links[j].click()\n    //                     // 页面滚动到顶部\n    //                     // console.log('scrollTo(0, 0)');\n    //                     // window.scrollTo(0, 0);\n\n    //                     break\n    //                 }\n    //             }\n\n    //         }\n    //     }\n\n    //     // 设置自定义 Link 并渲染到 DOM 中\n    //     if (my_link == '' && links.length > 0) {\n    //         setLink(links)\n    //     }\n\n    // }\n  }, [pathname, {\n    card\n  }]);\n\n  // 加载中\n  if (false) {\n    console.log('isLoading');\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 16\n    }, this);\n  } else {\n    let links = [];\n\n    // 反向链接\n    let backLinksBox = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"markdown-body backLinks\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: \"\\uD83D\\uDD17LINKS TO THIS PAGE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: \"\\uD83D\\uDC7B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 28\n    }, this);\n\n    // if (card['backLinks'].length > 0) {\n    //     let backLinks = card['backLinks'].map((backLink) =>\n    //         <li key={backLink.id} >\n\n    //             <Link key={backLink.id} to={{ pathname: '/post/' + backLink.id }} >\n    //                 <span key={backLink.id} onClick={handleBackLinkClick}>\n    //                     {backLink.title}\n    //                 </span>\n    //             </Link>\n\n    //         </li>\n    //     )\n\n    //     backLinksBox = <div className='markdown-body backLinks'>\n    //         <header>🔗LINKS TO THIS PAGE</header>\n    //         <ul>\n    //             {backLinks}\n    //         </ul>\n    //     </div>\n    // }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: post,\n          className: \"markdown-body container\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 16\n    }, this);\n  }\n}\n_s(Container, \"DsV3Q6gkjFeppL+aQNsE9JPgIbU=\", false, function () {\n  return [useLocation];\n});\n_c = Container;\nexport default Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useUrlState","BrowserRouter","Router","Routes","Route","Link","useParams","useLocation","format","Loading","ReactMarkdown","remarkGfm","rehypeRaw","Prism","SyntaxHighlighter","atomDark","Container","props","console","log","post","path","window","location","pathname","path_id","indexOf","post_id","replace","thisPageId","setPageID","my_link","setLink","card","setCard","isMobile","navigator","userAgent","match","mobileSkale","handleBackLinkClick","sessionStorage","setItem","scrollY","links","backLinksBox"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/components/Container.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useUrlState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\n\nimport { format } from 'date-fns'\n\nimport '../index.css'\nimport 'github-markdown-css'\nimport Loading from '../components/Loading'\n\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\nimport rehypeRaw from 'rehype-raw'\n\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport {atomDark} from 'react-syntax-highlighter/dist/esm/styles/prism'\n// import docco from 'react-syntax-highlighter/dist/esm/styles/hljs/docco';\n\n\n\n\n\n\n\n// 文章正文\nfunction Container(props) {\n\n    console.log(props);\n\n    // 记录文章的 DOM 信息，用来处理 DOM 元素，例如修改图片样式\n    let post = useRef(null);\n\n    // 当前路径信息\n    let path = window.location.pathname\n\n    // 路径中包含的 post id，用以获取文章 md 信息\n    let path_id\n    if (path.indexOf('/post/') < 0) {\n\n        // 若路径中不含 post id，则取父组件的 props\n        path_id = props.post_id\n\n    } else {\n        path_id = path.replace('/post/', '')\n    }\n\n\n    \n    // console.log(isLoading);\n    // 记录当前文章的 ID\n    let [thisPageId, setPageID] = useState('')\n\n    // 记录自定义的 Link 数据，用来实现 DOM 链接的间接跳转\n    let [my_link, setLink] = useState('');\n\n    // 记录当前文章对应的卡片信息\n    let [card, setCard] = useState('card');\n\n    // 如果当前页面 ID 为空则获取数据\n    if (thisPageId == '') {\n        setPageID(props.post_id)\n    }\n\n    // 如果是移动端则增加图片的尺寸\n    let isMobile = navigator.userAgent.match(/Mobile/i)\n    let mobileSkale = 1\n    if (isMobile) {\n        mobileSkale = 2\n    }\n\n    const handleBackLinkClick = () => {\n        console.log('handleBackLinkClick');\n\n        // 记录跳转类型\n        sessionStorage.setItem('nav_type', 0)\n        // 记录当前滚动的位置\n        sessionStorage.setItem('scrollY', window.scrollY)\n\n    }\n\n    const { pathname } = useLocation();\n    // 组件生命周期，组件载入、更新时将触发此函数\n    useEffect(() => {\n\n        console.log('useEffect');\n\n        //设置页面内容\n        if (card === 'card') {\n            // 如果 card 无内容，则获取数据\n\n            // setContent(path_id)\n\n            // window.scrollTo(0, 0);\n        } else {\n\n\n            if (card['card']['id'] !== path_id) {\n\n                // 如果 card 的 ID 与当前 URL 中的 ID 不一致\n                console.log('useEffect setContent');\n                // 获取新 URL 中的文章 ID 对应的 md 数据\n                // setContent(path_id)\n                // 清空旧页面的自定义链接\n                setLink('')\n\n            }\n        }\n\n\n        // dom 加载完毕后\n        // if (post.current != null && card['card']['id'] == path_id) {\n\n        //     // 设置 img 的尺寸\n        //     let article_img = document.getElementsByTagName('img');\n        //     console.log(article_img);\n\n        //     for (let i = 0; i < article_img.length; i++) {\n        //         let width_key_index = article_img[i]['alt'].indexOf('{{width ')\n        //         if (width_key_index > -1) {\n        //             let img_width = article_img[i]['alt'].substring(width_key_index, article_img[i]['alt'].length)\n        //             img_width = img_width.replace('{{width ', '')\n        //             img_width = img_width.replace('}}', '')\n\n        //             article_img[i].setAttribute('style', 'width:' + (Number(img_width.replace('%', '')) * mobileSkale).toString() + '%')\n        //             article_img[i].style.display = 'block'\n        //             article_img[i].style.margin = '0 auto'\n        //         }\n        //     }\n\n        //     // 设置 a 链接的点击事件，将 a 按照 Link 的方式进行跳转，避免页面不必要的刷新\n        //     let article_link = document.getElementsByTagName('span');\n        //     console.log(article_link);\n        //     let links = []\n\n        //     for (let i = 0; i < article_link.length; i++) {\n\n\n        //         if (article_link[i].getAttribute('path') == undefined || article_link[i].getAttribute('path') == null) {\n        //             // 如果 DOM 中的元素**不**包含 path 属性，则跳过（有 path 属性的元素才需要处理）\n        //             continue\n        //         }\n\n        //         // 创建 Link 元素，当点击上述 span 原生时，将触发 Link 元素的点击事件\n        //         let link_temp = <Link className='link_temp' to={article_link[i].getAttribute('path')}>Link</Link>\n        //         links.push(link_temp)\n\n\n        //         // DOM 中的特定元素点击时\n        //         article_link[i].onclick = () => {\n        //             console.log('a click');\n\n        //             // 获取元素的 path 参数，提取 post id\n        //             let post_id = article_link[i].getAttribute('path').replace('/post/', '')\n        //             console.log(post_id);\n\n        //             // 获取自定义的 Link 元素\n        //             let my_links = document.getElementsByClassName('link_temp')\n\n        //             for (let j = 0; j < my_links.length; j++) {\n        //                 console.log(my_links[j]);\n        //                 console.log(my_links[j].href);\n\n        //                 // 如果自定义的 Link 的 href 属性中包含 元素 path 属性的值，则可匹配\n        //                 if (my_links[j].href.indexOf(article_link[i].getAttribute('path')) >= 0) {\n\n        //                     // 记录跳转类型\n        //                     sessionStorage.setItem('nav_type', 1)\n        //                     // 记录当前滚动的位置\n        //                     sessionStorage.setItem('scrollY', window.scrollY)\n\n        //                     // 点击\n        //                     my_links[j].click()\n        //                     // 页面滚动到顶部\n        //                     // console.log('scrollTo(0, 0)');\n        //                     // window.scrollTo(0, 0);\n\n        //                     break\n        //                 }\n        //             }\n\n        //         }\n        //     }\n\n        //     // 设置自定义 Link 并渲染到 DOM 中\n        //     if (my_link == '' && links.length > 0) {\n        //         setLink(links)\n        //     }\n\n        // }\n\n\n    }, [pathname, { card }]);\n\n    // 加载中\n    if (false) {\n        console.log('isLoading');\n\n        return <Loading />\n\n\n    } else {\n\n        let links = []\n\n        // 反向链接\n        let backLinksBox = <div className='markdown-body backLinks'>\n            <header>🔗LINKS TO THIS PAGE</header>\n            <ul>\n                👻\n            </ul>\n        </div>\n\n        // if (card['backLinks'].length > 0) {\n        //     let backLinks = card['backLinks'].map((backLink) =>\n        //         <li key={backLink.id} >\n\n        //             <Link key={backLink.id} to={{ pathname: '/post/' + backLink.id }} >\n        //                 <span key={backLink.id} onClick={handleBackLinkClick}>\n        //                     {backLink.title}\n        //                 </span>\n        //             </Link>\n\n        //         </li>\n        //     )\n\n        //     backLinksBox = <div className='markdown-body backLinks'>\n        //         <header>🔗LINKS TO THIS PAGE</header>\n        //         <ul>\n        //             {backLinks}\n        //         </ul>\n        //     </div>\n        // }\n\n\n\n        return <div>\n\n            <div>\n\n\n                <div ref={post} className='markdown-body container'>\n\n                    {/* <article>\n                        <ReactMarkdown children={card['card']['content']}\n                            components={{\n                                code({ node, inline, className, children, ...props }) {\n                                    const match = /language-(\\w+)/.exec(className || '')\n                                    return !inline && match ? (\n                                        <SyntaxHighlighter\n                                            children={String(children).replace(/\\n$/, '')}\n                                            style={atomDark}\n                                            language={match[1]}\n                                            PreTag=\"div\"\n                                            {...props}\n                                        />\n                                    ) : (\n                                        <code className={className} {...props}>\n                                            {children}\n                                        </code>\n                                    )\n                                }\n                            }}\n                            rehypePlugins={[rehypeRaw]}\n                            remarkPlugins={[remarkGfm, { singleTilde: false }]} /></article>\n\n                    <div className='postTime'>\n                        <time>Created {format(new Date(card['card']['createdTime']), 'yyyy-MM-dd')}</time>\n                        <time>{card['card']['lastEditedTimeDiff']}</time>\n                    </div>\n\n                    {backLinksBox}\n                    <ul style={{ display: 'none' }}>{my_link}</ul> */}\n\n\n                </div>\n            </div>\n        </div>;\n    }\n\n}\n\nexport default Container;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}