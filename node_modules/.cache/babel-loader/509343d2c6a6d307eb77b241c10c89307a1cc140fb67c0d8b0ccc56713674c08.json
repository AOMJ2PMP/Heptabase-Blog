{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/page/Post.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport Container from '../components/Container';\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer';\nimport '../index.css';\nimport 'github-markdown-css';\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction';\nimport { id } from 'date-fns/locale';\nimport useHash from \"../hooks/useHash\";\n\n// 文章页面\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setContent = id => {\n      console.log('setContent');\n\n      // 如果已经获取过数据，则直接从获取的数据中提取\n      if (this.state.card === null) {\n        // 存储数据的变量\n        let heptabase_blog_data;\n        getHeptabaseData.then(res => {\n          heptabase_blog_data = res.data;\n          let new_card = this.findContent(id, heptabase_blog_data);\n\n          // 404\n          if (new_card == null) {\n            console.log('404');\n            // window.location = '/404'\n          } else {}\n\n          // setCard(heptabase_blog_data)\n          this.setState({\n            card: heptabase_blog_data\n          });\n        });\n      } else {\n        // 已经有数据了\n        console.log(this.state.card);\n        let new_card = this.findContent(id, this.state.card);\n\n        // 404\n        if (new_card == null) {\n          console.log('404');\n          // window.location = '/404'\n        } else {}\n      }\n    };\n    this.findContent = (id, heptabase_blog_data) => {\n      if (heptabase_blog_data === '') {\n        return;\n      }\n      let new_card = null;\n      console.log('Post findContent for:');\n      for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n        if (heptabase_blog_data.cards[i]['id'] == id) {\n          // 处理内容中的图片\n          heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i]);\n          console.log('getClearImag done');\n          // 处理内容中的链接\n          new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards);\n          heptabase_blog_data.cards[i] = new_card['card'];\n\n          // 设置网页标题\n          if (new_card['card']['title'] !== 'About') {\n            document.title = new_card['card']['title'];\n          } else {\n            document.title = 'Jiang 的数字花园🌱';\n          }\n          let cardList = [];\n          // let container = <Container key = {new_card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={new_card} />\n\n          // setCardList(cardList)\n\n          this.setState({\n            cardList: this.state.cardList.concat(new_card)\n          });\n          break;\n        }\n      }\n      return new_card;\n    };\n    this.handleLinkClick = id => {\n      // window.location.search = window.location.search+'&note-id='+id\n      // setHash(hash + 'note-id='+id)\n      console.log(this.state.card);\n      window.history.pushState({}, '', window.location.href + '&note-id=' + id);\n      // 记录 URL\n      this.setState({\n        location: window.location.href\n      });\n      this.ttest();\n    };\n    this.ttest = () => {\n      let url_search = window.location.search;\n      url_search = url_search.replace('?', '');\n      url_search = url_search.replace(/&/gi, '');\n      let url_search_list = url_search.split('note-id=');\n      for (let i = 0; i < url_search_list.length; i++) {\n        if (url_search_list[i] == '') {\n          continue;\n        }\n        let new_card = this.setContent(url_search_list[i]);\n        if (new_card) {}\n      }\n    };\n    this.handleHashChange = url => {\n      console.log(url);\n      // 如果 url 发生变化，则更新数据\n      if (url !== this.state.location) {\n        this.setState({\n          location: url\n        });\n        if (this.state.location !== '') {\n          //比对 url 和 cardList\n          for (let i = 0; i < this.state.cardList.length; i++) {\n            // url 中不存在此 card\n            if (url.indexOf(this.state.cardList[i]['key']) < 0) {\n              // let new_card_list = this.state.cardList\n              // new_card_list = new_card_list.splice(i,1)\n\n              // 删除 card\n              this.state.cardList.splice(i, 1);\n              this.setState({\n                cardList: this.state.cardList\n              });\n            } else {\n              // url 中存在此 card\n              // continue\n            }\n\n            // cardList 中不存在 URL 的某一个 card\n            // 加载此 card 的数据\n          }\n\n          //处理数据\n          // this.ttest()\n        }\n      }\n    };\n    this.state = {\n      card: null //所有的 hepta 数据\n      ,\n      cardList: [] // 当前页面的卡片列表\n      ,\n      location: '' // 记录 URL\n    };\n  }\n\n  componentDidMount() {\n    this.ttest();\n  }\n\n  // let { slug } = useParams();\n  // // 记录 heptabase 数据\n  // let [card, setCard] = useState();\n  // // \n  // let [cardList, setCardList] = useState([]);\n  // // 记录数据加载状态\n  // let [isLoading, setLoadingState] = useState(true)\n  // // hash\n  // let [hash, setHash] = useHash()\n\n  // const { pathname } = useLocation();\n\n  // console.log(slug);\n  // console.log(hash);\n  // console.log(window.location);\n  // // setHash('note-id=123')\n\n  // // window.location = window.location+'&note-id=b81a2f54-ec5b-4de0-9e97-ab841c0e18f9'\n  // console.log(window.location);\n\n  // // 获取 URL 参数\n  // let url_search = window.location.search\n  // url_search = url_search.replace('?', '')\n  // url_search = url_search.replace('&', '')\n  // let url_search_list = url_search.split('note-id=')\n\n  // const useScrollToTop = () => {   //注意自定义Hooks要用useXXX定义\n\n  //     useEffect(() => {\n\n  //         console.log('useScrollToTop');\n\n  //         console.log(window.history);\n  //         window.history.scrollRestoration = 'manual';\n\n  //         // 根据跳转类型来决定是否要定位到顶部，如果不是点击 span 或 backLink 则不回到顶部\n\n  //         let nav_type = sessionStorage.getItem('nav_type')\n\n  //         if (nav_type > -1) {\n  //             // 点击了 span 或 backLink\n\n  //             setTimeout(() => {\n  //                 window.scrollTo({\n  //                     top: 0,\n  //                     left: 0,\n  //                     behavior: 'auto'\n  //                 });\n  //             }, 10);\n\n  //             // window.scrollTo(0, 0);\n\n  //             // 重置 nav_type\n  //             sessionStorage.setItem('nav_type', -1)\n  //         } else {\n\n  //             // 返回上一页\n  //             setTimeout(() => {\n\n  //                 window.scrollTo({\n  //                     top: sessionStorage.getItem('scrollY'),\n  //                     left: 0,\n  //                     behavior: 'auto'\n  //                 });\n\n  //                 // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n  //             }, 10);\n\n  //             // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n  //         }\n\n  //     }, [pathname]);\n  // }\n\n  // useScrollToTop();\n  // useReStoreScrollTop();\n\n  // useEffect(() => {\n  //     // console.log('scrollTo(0, 0)');\n  //     // window.scrollTo(0, 0);\n  //     console.log('Post useEffect');\n  //     // 根据 URL 参数加载数据\n  //     let note_list_dom = []\n\n  //     // for (let i = 0; i < url_search_list.length; i++) {\n  //     //     if (url_search_list[i] == '') {\n  //     //         continue\n  //     //     }\n  //     //     let new_card = setContent(url_search_list[i])\n  //     //     if (new_card) {\n\n  //     //     }\n\n  //     // }\n\n  //     ttest()\n\n  //     // \n\n  // }, [window.location.href])\n\n  // 获取文章数据、处理文章数据\n\n  render() {\n    if (this.state.card === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 21\n      }, this);\n    } else {\n      let card_list_dom = this.state.cardList.map(card => {\n        /*#__PURE__*/_jsxDEV(Container, {\n          handleHashChange: this.handleHashChange,\n          handleLinkClick: this.handleLinkClick,\n          card: card\n        }, card['card']['id'], false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 17\n        }, this);\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: card_list_dom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this);\n    }\n  }\n}\nexport default Post;","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","Link","useParams","useNavigate","useLocation","Container","Nav","Footer","getHeptabaseData","getClearCard","getClearImag","id","useHash","Post","Component","constructor","props","setContent","console","log","state","card","heptabase_blog_data","then","res","data","new_card","findContent","setState","i","cards","length","document","title","cardList","concat","handleLinkClick","window","history","pushState","location","href","ttest","url_search","search","replace","url_search_list","split","handleHashChange","url","indexOf","splice","componentDidMount","render","card_list_dom","map"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Post.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\n\nimport Container from '../components/Container'\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer'\n\nimport '../index.css'\nimport 'github-markdown-css'\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction'\nimport { id } from 'date-fns/locale';\n\nimport useHash from \"../hooks/useHash\";\n\n// 文章页面\nclass Post extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            card: null //所有的 hepta 数据\n            , cardList: [] // 当前页面的卡片列表\n            , location: '' // 记录 URL\n        };\n    }\n\n    componentDidMount() {\n\n        this.ttest()\n\n    }\n\n    // let { slug } = useParams();\n    // // 记录 heptabase 数据\n    // let [card, setCard] = useState();\n    // // \n    // let [cardList, setCardList] = useState([]);\n    // // 记录数据加载状态\n    // let [isLoading, setLoadingState] = useState(true)\n    // // hash\n    // let [hash, setHash] = useHash()\n\n    // const { pathname } = useLocation();\n\n    // console.log(slug);\n    // console.log(hash);\n    // console.log(window.location);\n    // // setHash('note-id=123')\n\n    // // window.location = window.location+'&note-id=b81a2f54-ec5b-4de0-9e97-ab841c0e18f9'\n    // console.log(window.location);\n\n    // // 获取 URL 参数\n    // let url_search = window.location.search\n    // url_search = url_search.replace('?', '')\n    // url_search = url_search.replace('&', '')\n    // let url_search_list = url_search.split('note-id=')\n\n    // const useScrollToTop = () => {   //注意自定义Hooks要用useXXX定义\n\n    //     useEffect(() => {\n\n    //         console.log('useScrollToTop');\n\n    //         console.log(window.history);\n    //         window.history.scrollRestoration = 'manual';\n\n    //         // 根据跳转类型来决定是否要定位到顶部，如果不是点击 span 或 backLink 则不回到顶部\n\n    //         let nav_type = sessionStorage.getItem('nav_type')\n\n    //         if (nav_type > -1) {\n    //             // 点击了 span 或 backLink\n\n    //             setTimeout(() => {\n    //                 window.scrollTo({\n    //                     top: 0,\n    //                     left: 0,\n    //                     behavior: 'auto'\n    //                 });\n    //             }, 10);\n\n    //             // window.scrollTo(0, 0);\n\n    //             // 重置 nav_type\n    //             sessionStorage.setItem('nav_type', -1)\n    //         } else {\n\n    //             // 返回上一页\n    //             setTimeout(() => {\n\n    //                 window.scrollTo({\n    //                     top: sessionStorage.getItem('scrollY'),\n    //                     left: 0,\n    //                     behavior: 'auto'\n    //                 });\n\n    //                 // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n    //             }, 10);\n\n    //             // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n\n    //         }\n\n\n    //     }, [pathname]);\n    // }\n\n    // useScrollToTop();\n    // useReStoreScrollTop();\n\n    // useEffect(() => {\n    //     // console.log('scrollTo(0, 0)');\n    //     // window.scrollTo(0, 0);\n    //     console.log('Post useEffect');\n    //     // 根据 URL 参数加载数据\n    //     let note_list_dom = []\n\n    //     // for (let i = 0; i < url_search_list.length; i++) {\n    //     //     if (url_search_list[i] == '') {\n    //     //         continue\n    //     //     }\n    //     //     let new_card = setContent(url_search_list[i])\n    //     //     if (new_card) {\n\n    //     //     }\n\n    //     // }\n\n    //     ttest()\n\n\n    //     // \n\n    // }, [window.location.href])\n\n    // 获取文章数据、处理文章数据\n    setContent = (id) => {\n        console.log('setContent');\n\n        // 如果已经获取过数据，则直接从获取的数据中提取\n        if (this.state.card === null) {\n            // 存储数据的变量\n            let heptabase_blog_data\n\n            getHeptabaseData.then((res) => {\n                heptabase_blog_data = res.data\n\n\n\n                let new_card = this.findContent(id, heptabase_blog_data)\n\n\n                // 404\n                if (new_card == null) {\n                    console.log('404');\n                    // window.location = '/404'\n                } else {\n\n\n                }\n\n                // setCard(heptabase_blog_data)\n                this.setState({\n                    card: heptabase_blog_data\n                })\n\n            })\n        } else {\n            // 已经有数据了\n            console.log(this.state.card);\n            let new_card = this.findContent(id, this.state.card)\n\n            // 404\n            if (new_card == null) {\n                console.log('404');\n                // window.location = '/404'\n            } else {\n\n\n            }\n        }\n\n\n\n    }\n\n\n    findContent = (id, heptabase_blog_data) => {\n        if (heptabase_blog_data === '') {\n            return\n        }\n\n        let new_card = null\n        console.log('Post findContent for:');\n        for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n\n            if (heptabase_blog_data.cards[i]['id'] == id) {\n\n                // 处理内容中的图片\n                heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i])\n                console.log('getClearImag done');\n                // 处理内容中的链接\n                new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards)\n                heptabase_blog_data.cards[i] = new_card['card']\n\n                // 设置网页标题\n                if (new_card['card']['title'] !== 'About') {\n                    document.title = new_card['card']['title']\n                } else {\n                    document.title = 'Jiang 的数字花园🌱'\n                }\n\n                let cardList = []\n                // let container = <Container key = {new_card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={new_card} />\n\n                // setCardList(cardList)\n\n                this.setState({\n                    cardList: this.state.cardList.concat(new_card)\n                })\n\n                break\n\n\n            }\n        }\n\n        return new_card\n\n    }\n\n    handleLinkClick = (id) => {\n        // window.location.search = window.location.search+'&note-id='+id\n        // setHash(hash + 'note-id='+id)\n        console.log(this.state.card);\n        window.history.pushState({}, '', window.location.href + '&note-id=' + id)\n        // 记录 URL\n        this.setState({\n            location: window.location.href\n        })\n        this.ttest()\n    }\n\n    ttest = () => {\n\n        let url_search = window.location.search\n        url_search = url_search.replace('?', '')\n        url_search = url_search.replace(/&/gi, '')\n        let url_search_list = url_search.split('note-id=')\n\n        for (let i = 0; i < url_search_list.length; i++) {\n            if (url_search_list[i] == '') {\n                continue\n            }\n            let new_card = this.setContent(url_search_list[i])\n            if (new_card) {\n\n            }\n\n        }\n\n    }\n\n    handleHashChange = (url) => {\n        console.log(url);\n        // 如果 url 发生变化，则更新数据\n        if (url !== this.state.location) {\n\n            this.setState({\n                location: url\n            })\n\n            if (this.state.location !== '') {\n\n                //比对 url 和 cardList\n                for (let i = 0; i < this.state.cardList.length; i++) {\n                    // url 中不存在此 card\n                    if (url.indexOf(this.state.cardList[i]['key']) < 0) {\n\n                        // let new_card_list = this.state.cardList\n                        // new_card_list = new_card_list.splice(i,1)\n\n\n                        // 删除 card\n                        this.state.cardList.splice(i, 1)\n                        this.setState({\n                            cardList: this.state.cardList\n                        })\n\n                    } else {\n                        // url 中存在此 card\n                        // continue\n                    }\n\n\n\n\n                    // cardList 中不存在 URL 的某一个 card\n                    // 加载此 card 的数据\n                }\n\n                //处理数据\n                // this.ttest()\n            }\n\n        }\n\n\n    }\n\n    render() {\n        if (this.state.card === null) {\n            return (<div>loading</div>)\n        } else {\n\n            let card_list_dom = this.state.cardList.map((card) => {\n                <Container key={card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={card} />\n            })\n\n            return (<div>\n\n                <div>\n                    <Nav />\n                    {/* <Container card={card} /> */}\n                    <div>\n                        {card_list_dom}\n                    </div>\n\n                    <Footer />\n                </div>\n\n            </div>)\n        }\n    }\n\n\n\n}\n\nexport default Post;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}