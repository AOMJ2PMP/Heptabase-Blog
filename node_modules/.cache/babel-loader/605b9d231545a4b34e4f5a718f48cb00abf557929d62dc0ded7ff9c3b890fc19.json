{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/components/Container.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useUrlState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport { format } from 'date-fns';\nimport '../index.css';\nimport 'github-markdown-css';\nimport Loading from '../components/Loading';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeRaw from 'rehype-raw';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n// import docco from 'react-syntax-highlighter/dist/esm/styles/hljs/docco';\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction';\nimport e from 'cors';\n\n// 文章正文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Container(props) {\n  _s();\n  // 记录文章的 DOM 信息，用来处理 DOM 元素，例如修改图片样式\n  let post = useRef(null);\n\n  // 当前路径信息\n  let path = window.location.pathname;\n\n  // 路径中包含的 post id，用以获取文章 md 信息\n  let path_id;\n  if (path.indexOf('/post/') < 0) {\n    // 若路径中不含 post id，则取父组件的 props\n    path_id = props.post_id;\n  } else {\n    path_id = path.replace('/post/', '');\n  }\n\n  // 记录当前文章的 ID\n  let [thisPageId, setPageID] = useState('');\n\n  // 记录自定义的 Link 数据，用来实现 DOM 链接的间接跳转\n  // let [my_link, setLink] = useState('');\n\n  // 如果当前页面 ID 为空则获取数据\n  if (thisPageId == '') {\n    setPageID(props.post_id);\n  }\n\n  // 如果是移动端则增加图片的尺寸\n  let isMobile = navigator.userAgent.match(/Mobile/i);\n  let mobileSkale = 1;\n  if (isMobile) {\n    mobileSkale = 2;\n  }\n\n  // 点击反向链接\n  const handleBackLinkClick = (link_id, current_id) => {\n    console.log('handleBackLinkClick');\n    console.log(link_id);\n    // 记录跳转类型\n    sessionStorage.setItem('nav_type', 0);\n    // 记录当前滚动的位置\n    sessionStorage.setItem('scrollY', window.scrollY);\n    props.handleLinkClick(link_id, current_id);\n  };\n\n  // 点击文内链接\n  const handleAarticleLinkClick = node => {\n    console.log('handleAarticleLinkClick');\n    node.onClick = function () {\n      console.log('handleAarticleLinkClick');\n    };\n  };\n  const {\n    pathname\n  } = useLocation();\n  // 组件生命周期，组件载入、更新时将触发此函数\n  useEffect(() => {\n    console.log('useEffect');\n    props.handleHashChange(window.location.href);\n\n    // dom 加载完毕后\n    if (post.current != null) {\n      // 设置网易云音乐播放器的尺寸\n\n      // 设置 img 的尺寸\n      let article_img = document.getElementsByTagName('img');\n      for (let i = 0; i < article_img.length; i++) {\n        let width_key_index = article_img[i]['alt'].indexOf('{{width ');\n        if (width_key_index > -1) {\n          let img_width = article_img[i]['alt'].substring(width_key_index, article_img[i]['alt'].length);\n          img_width = img_width.replace('{{width ', '');\n          img_width = img_width.replace('}}', '');\n          article_img[i].setAttribute('style', 'width:' + (Number(img_width.replace('%', '')) * mobileSkale).toString() + '%');\n          article_img[i].style.display = 'block';\n          article_img[i].style.margin = '0 auto';\n        }\n      }\n\n      // 设置 a 链接的点击事件，将 a 按照 Link 的方式进行跳转，避免页面不必要的刷新\n      let article_link = document.getElementsByTagName('span');\n\n      // document.getElementsByClassName('my_link')[0].addEventListener('click', function (event) {\n\n      //         console.log('a click');\n\n      //         if (event.classList.contains('my_link') !== true || event.getAttribute('path') === undefined || event.getAttribute('path') === null) {\n      //             // 如果 DOM 中的元素**不**包含 path 属性，则跳过（有 path 属性的元素才需要处理）\n      //         } else {\n      //             // 获取元素的 path 参数，提取 post id\n      //             let post_id = event.getAttribute('path').replace('/post/', '')\n      //             let parent_note_id = event.getAttribute('parent_note_id')\n      //             console.log(post_id);\n\n      //             props.handleLinkClick(post_id, parent_note_id)\n      //         }\n\n      // })\n\n      // console.log(article_link);\n      let links = [];\n      for (let i = 0; i < article_link.length; i++) {\n        if (article_link[i].classList.contains('my_link') !== true || article_link[i].getAttribute('path') === undefined || article_link[i].getAttribute('path') === null) {\n          // 如果 DOM 中的元素**不**包含 path 属性，则跳过（有 path 属性的元素才需要处理）\n          continue;\n        }\n        handleAarticleLinkClick(article_link[i]);\n\n        // 创建 Link 元素，当点击上述 span 原生时，将触发 Link 元素的点击事件\n        // let link_temp = <Link className='link_temp' to={article_link[i].getAttribute('path')}>Link</Link>\n        // links.push(link_temp)\n\n        // DOM 中的特定元素点击时\n        // article_link[i].addEventListener('click', function (i) {\n        //     console.log('a click');\n\n        //     if (article_link[i].classList.contains('my_link') !== true || article_link[i].getAttribute('path') === undefined || article_link[i].getAttribute('path') === null) {\n        //         // 如果 DOM 中的元素**不**包含 path 属性，则跳过（有 path 属性的元素才需要处理）\n        //     } else {\n        //         // 获取元素的 path 参数，提取 post id\n        //         let post_id = article_link[i].getAttribute('path').replace('/post/', '')\n        //         let parent_note_id = article_link[i].getAttribute('parent_note_id')\n        //         console.log(post_id);\n\n        //         props.handleLinkClick(post_id, parent_note_id)\n        //     }\n        // })\n      }\n\n      // 设置自定义 Link 并渲染到 DOM 中\n      // if (my_link == '' && links.length > 0) {\n      //     setLink(links)\n      // }\n\n      // 滚动到对应卡片的位置\n      setTimeout(() => {\n        let last_note = document.getElementsByClassName('container');\n        // console.log(last_note[last_note.length - 1]);\n        // document.getElementsByClassName('notes')[0].scrollTo({ left: last_note[last_note.length - 1].offsetLeft, behavior: 'smooth' })\n      }, 100);\n    }\n  });\n\n  // 加载中\n  if (false) {\n    console.log('isLoading');\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 16\n    }, this);\n  } else {\n    let links = [];\n\n    // 反向链接\n    let backLinksBox = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"markdown-body backLinks\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: \"\\uD83D\\uDD17LINKS TO THIS PAGE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: \"\\uD83D\\uDC7B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 28\n    }, this);\n    if (props['card']['backLinks'].length > 0) {\n      let backLinks = props['card']['backLinks'].map(backLink => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"my_link\",\n          onClick: handleBackLinkClick.bind(this, backLink.id, props['card']['card']['id']),\n          children: backLink.title\n        }, backLink.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this)\n      }, backLink.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this));\n      backLinksBox = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"markdown-body backLinks\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          children: \"\\uD83D\\uDD17LINKS TO THIS PAGE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: backLinks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 28\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: props['style'],\n      ref: post,\n      className: \"markdown-body container\",\n      note_id: props['card']['card']['id'],\n      children: [/*#__PURE__*/_jsxDEV(\"article\", {\n        children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: props['card']['card']['content'],\n          components: {\n            code(_ref) {\n              let {\n                node,\n                inline,\n                className,\n                children,\n                ...props\n              } = _ref;\n              const match = /language-(\\w+)/.exec(className || '');\n              return !inline && match ? /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n                children: String(children).replace(/\\n$/, ''),\n                style: atomDark,\n                language: match[1],\n                PreTag: \"div\",\n                ...props\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n                className: className,\n                ...props,\n                children: children\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 33\n              }, this);\n            }\n          },\n          rehypePlugins: [rehypeRaw],\n          remarkPlugins: [remarkGfm, {\n            singleTilde: false\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postTime\",\n        children: [/*#__PURE__*/_jsxDEV(\"time\", {\n          children: [\"Created \", format(new Date(props['card']['card']['createdTime']), 'yyyy-MM-dd')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"time\", {\n          children: props['card']['card']['lastEditedTimeDiff']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }, this), backLinksBox]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 16\n    }, this);\n  }\n}\n_s(Container, \"hvvBCBe/zoEqvs346M5LGgV+hZQ=\", false, function () {\n  return [useLocation];\n});\n_c = Container;\nexport default Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useUrlState","BrowserRouter","Router","Routes","Route","Link","useParams","useLocation","format","Loading","ReactMarkdown","remarkGfm","rehypeRaw","Prism","SyntaxHighlighter","atomDark","getHeptabaseData","getClearCard","getClearImag","e","Container","props","post","path","window","location","pathname","path_id","indexOf","post_id","replace","thisPageId","setPageID","isMobile","navigator","userAgent","match","mobileSkale","handleBackLinkClick","link_id","current_id","console","log","sessionStorage","setItem","scrollY","handleLinkClick","handleAarticleLinkClick","node","onClick","handleHashChange","href","current","article_img","document","getElementsByTagName","i","length","width_key_index","img_width","substring","setAttribute","Number","toString","style","display","margin","article_link","links","classList","contains","getAttribute","undefined","setTimeout","last_note","getElementsByClassName","backLinksBox","backLinks","map","backLink","bind","id","title","code","inline","className","children","exec","String","singleTilde","Date"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/components/Container.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useUrlState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\n\nimport { format } from 'date-fns'\n\nimport '../index.css'\nimport 'github-markdown-css'\nimport Loading from '../components/Loading'\n\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\nimport rehypeRaw from 'rehype-raw'\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism'\n// import docco from 'react-syntax-highlighter/dist/esm/styles/hljs/docco';\n\n\n\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction'\nimport e from 'cors';\n\n\n// 文章正文\nfunction Container(props) {\n\n    // 记录文章的 DOM 信息，用来处理 DOM 元素，例如修改图片样式\n    let post = useRef(null);\n\n    // 当前路径信息\n    let path = window.location.pathname\n\n    // 路径中包含的 post id，用以获取文章 md 信息\n    let path_id\n    if (path.indexOf('/post/') < 0) {\n\n        // 若路径中不含 post id，则取父组件的 props\n        path_id = props.post_id\n\n    } else {\n        path_id = path.replace('/post/', '')\n    }\n\n    // 记录当前文章的 ID\n    let [thisPageId, setPageID] = useState('')\n\n    // 记录自定义的 Link 数据，用来实现 DOM 链接的间接跳转\n    // let [my_link, setLink] = useState('');\n\n    // 如果当前页面 ID 为空则获取数据\n    if (thisPageId == '') {\n        setPageID(props.post_id)\n    }\n\n    // 如果是移动端则增加图片的尺寸\n    let isMobile = navigator.userAgent.match(/Mobile/i)\n    let mobileSkale = 1\n    if (isMobile) {\n        mobileSkale = 2\n    }\n\n    // 点击反向链接\n    const handleBackLinkClick = (link_id, current_id) => {\n        console.log('handleBackLinkClick');\n        console.log(link_id);\n        // 记录跳转类型\n        sessionStorage.setItem('nav_type', 0)\n        // 记录当前滚动的位置\n        sessionStorage.setItem('scrollY', window.scrollY)\n\n        props.handleLinkClick(link_id, current_id)\n\n    }\n\n    // 点击文内链接\n    const handleAarticleLinkClick = (node)=>{\n        console.log('handleAarticleLinkClick');\n        \n        node.onClick = function(){\n            console.log('handleAarticleLinkClick');\n        }\n    }\n\n    const { pathname } = useLocation();\n    // 组件生命周期，组件载入、更新时将触发此函数\n    useEffect(() => {\n\n        console.log('useEffect');\n        props.handleHashChange(window.location.href)\n\n        // dom 加载完毕后\n        if (post.current != null) {\n\n            // 设置网易云音乐播放器的尺寸\n\n            // 设置 img 的尺寸\n            let article_img = document.getElementsByTagName('img');\n\n            for (let i = 0; i < article_img.length; i++) {\n                let width_key_index = article_img[i]['alt'].indexOf('{{width ')\n                if (width_key_index > -1) {\n                    let img_width = article_img[i]['alt'].substring(width_key_index, article_img[i]['alt'].length)\n                    img_width = img_width.replace('{{width ', '')\n                    img_width = img_width.replace('}}', '')\n\n                    article_img[i].setAttribute('style', 'width:' + (Number(img_width.replace('%', '')) * mobileSkale).toString() + '%')\n                    article_img[i].style.display = 'block'\n                    article_img[i].style.margin = '0 auto'\n                }\n            }\n\n            // 设置 a 链接的点击事件，将 a 按照 Link 的方式进行跳转，避免页面不必要的刷新\n            let article_link = document.getElementsByTagName('span');\n\n            // document.getElementsByClassName('my_link')[0].addEventListener('click', function (event) {\n\n            //         console.log('a click');\n\n            //         if (event.classList.contains('my_link') !== true || event.getAttribute('path') === undefined || event.getAttribute('path') === null) {\n            //             // 如果 DOM 中的元素**不**包含 path 属性，则跳过（有 path 属性的元素才需要处理）\n            //         } else {\n            //             // 获取元素的 path 参数，提取 post id\n            //             let post_id = event.getAttribute('path').replace('/post/', '')\n            //             let parent_note_id = event.getAttribute('parent_note_id')\n            //             console.log(post_id);\n\n            //             props.handleLinkClick(post_id, parent_note_id)\n            //         }\n\n            // })\n\n            // console.log(article_link);\n            let links = []\n\n            for (let i = 0; i < article_link.length; i++) {\n\n\n                if (article_link[i].classList.contains('my_link') !== true || article_link[i].getAttribute('path') === undefined || article_link[i].getAttribute('path') === null) {\n                    // 如果 DOM 中的元素**不**包含 path 属性，则跳过（有 path 属性的元素才需要处理）\n                    continue\n                }\n\n                handleAarticleLinkClick(article_link[i])\n\n                // 创建 Link 元素，当点击上述 span 原生时，将触发 Link 元素的点击事件\n                // let link_temp = <Link className='link_temp' to={article_link[i].getAttribute('path')}>Link</Link>\n                // links.push(link_temp)\n\n\n                // DOM 中的特定元素点击时\n                // article_link[i].addEventListener('click', function (i) {\n                //     console.log('a click');\n\n                //     if (article_link[i].classList.contains('my_link') !== true || article_link[i].getAttribute('path') === undefined || article_link[i].getAttribute('path') === null) {\n                //         // 如果 DOM 中的元素**不**包含 path 属性，则跳过（有 path 属性的元素才需要处理）\n                //     } else {\n                //         // 获取元素的 path 参数，提取 post id\n                //         let post_id = article_link[i].getAttribute('path').replace('/post/', '')\n                //         let parent_note_id = article_link[i].getAttribute('parent_note_id')\n                //         console.log(post_id);\n\n                //         props.handleLinkClick(post_id, parent_note_id)\n                //     }\n                // })\n\n\n\n\n            }\n\n            // 设置自定义 Link 并渲染到 DOM 中\n            // if (my_link == '' && links.length > 0) {\n            //     setLink(links)\n            // }\n\n            // 滚动到对应卡片的位置\n            setTimeout(() => {\n                let last_note = document.getElementsByClassName('container')\n                // console.log(last_note[last_note.length - 1]);\n                // document.getElementsByClassName('notes')[0].scrollTo({ left: last_note[last_note.length - 1].offsetLeft, behavior: 'smooth' })\n            }, 100);\n\n\n        }\n\n\n    });\n\n    // 加载中\n    if (false) {\n        console.log('isLoading');\n\n        return <Loading />\n\n\n    } else {\n\n        let links = []\n\n        // 反向链接\n        let backLinksBox = <div className='markdown-body backLinks'>\n            <header>🔗LINKS TO THIS PAGE</header>\n            <ul>\n                👻\n            </ul>\n        </div>\n\n        if (props['card']['backLinks'].length > 0) {\n            let backLinks = props['card']['backLinks'].map((backLink) =>\n                <li key={backLink.id} >\n\n                    {/* <Link key={backLink.id} to={{ pathname: '/post/' + backLink.id }} > */}\n                    <span className='my_link' key={backLink.id} onClick={handleBackLinkClick.bind(this, backLink.id, props['card']['card']['id'])}>\n                        {backLink.title}\n                    </span>\n                    {/* </Link> */}\n\n                </li>\n            )\n\n            backLinksBox = <div className='markdown-body backLinks'>\n                <header>🔗LINKS TO THIS PAGE</header>\n                <ul>\n                    {backLinks}\n                </ul>\n            </div>\n        }\n\n\n\n        return <div style={props['style']} ref={post} className='markdown-body container' note_id={props['card']['card']['id']}>\n\n            <article>\n\n                <ReactMarkdown children={props['card']['card']['content']}\n                    components={{\n                        code({ node, inline, className, children, ...props }) {\n                            const match = /language-(\\w+)/.exec(className || '')\n                            return !inline && match ? (\n                                <SyntaxHighlighter\n                                    children={String(children).replace(/\\n$/, '')}\n                                    style={atomDark}\n                                    language={match[1]}\n                                    PreTag=\"div\"\n                                    {...props}\n                                />\n                            ) : (\n                                <code className={className} {...props}>\n                                    {children}\n                                </code>\n                            )\n                        }\n                    }}\n                    rehypePlugins={[rehypeRaw]}\n                    remarkPlugins={[remarkGfm, { singleTilde: false }]} /></article>\n            <div className='postTime'>\n                <time>Created {format(new Date(props['card']['card']['createdTime']), 'yyyy-MM-dd')}</time>\n                <time>{props['card']['card']['lastEditedTimeDiff']}</time>\n            </div>\n            {/* /反向链接 */}\n            {backLinksBox}\n\n\n        </div>\n    }\n\n}\n\nexport default Container;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}