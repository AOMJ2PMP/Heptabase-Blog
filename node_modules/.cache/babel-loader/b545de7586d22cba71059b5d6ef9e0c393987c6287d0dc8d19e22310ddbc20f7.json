{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/page/Post.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport useHash from \"../hooks/useHash\";\nimport Container from '../components/Container';\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer';\nimport '../index.css';\nimport 'github-markdown-css';\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction';\nimport { set } from 'date-fns';\n\n// 文章页面\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Post(props) {\n  _s2();\n  var _s = $RefreshSig$();\n  let {\n    slug\n  } = useParams();\n\n  // useScrollToTop();\n\n  // 处理 hash\n  const [hash, setHash] = useHash();\n  // 记录数据加载状态\n  let [isLoading, setLoadingState] = useState(true);\n  // 记录数据\n  let [cards, setCards] = useState([]);\n  let [card_list, setCardList] = useState([]);\n  let container_list;\n\n  // hash 变化时\n  useEffect(() => {\n    console.log('hash change useEffect');\n    // 更新数据\n    console.log(hash);\n\n    // setCards([])\n\n    // 获取数据\n    // ID 列表\n    let id_list = hash.split('#');\n    for (let i = 0; i < id_list.length; i++) {\n      if (id_list[i] !== '') {\n        setContent(id_list[i]);\n      }\n    }\n    console.log(cards);\n  }, [hash]);\n\n  // 页面载入\n  useEffect(() => {\n    // console.log('scrollTo(0, 0)');\n    // window.scrollTo(0, 0);\n    console.log('Post useEffect');\n    // 获取 url\n    console.log(slug);\n  });\n\n  // cards 变化时\n  useEffect(() => {\n    console.log('cards change useEffect');\n  }, [cards]);\n\n  // 获取文章数据、处理文章数据\n  const setContent = id => {\n    console.log('setContent');\n    let mark = -1;\n    let isExists = false;\n    for (let j = 0; j < cards.length; j++) {\n      // 数据是否已在列表中\n      if (cards[j]['card']['id'] == id) {\n        isExists = true;\n      }\n    }\n    if (isExists) {\n      return;\n    }\n    setCards([]);\n\n    // 存储数据的变量\n    let heptabase_blog_data;\n    getHeptabaseData.then(res => {\n      heptabase_blog_data = res.data;\n      let new_card = null;\n      console.log('Container setContent for:');\n      for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n        if (heptabase_blog_data.cards[i]['id'] == id) {\n          // 处理内容中的图片\n          heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i]);\n          console.log('getClearImag done');\n          // 处理内容中的链接\n          new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards);\n          heptabase_blog_data.cards[i] = new_card['card'];\n          cards.push(new_card);\n          let new_card_compent = /*#__PURE__*/_jsxDEV(Container, {\n            index: new_card['id'],\n            data: new_card,\n            handleLinkClick: handleLinkClick\n          }, new_card['id'], false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 44\n          }, this);\n          // card_list = \n          // setCardList(card_list.push(new_card))\n          // console.log(cards);\n          setLoadingState(false);\n          break;\n        }\n      }\n      setCards(cards);\n\n      // 404\n      if (new_card == null) {\n        console.log('404');\n        // window.location = '/404'\n      }\n    });\n  };\n\n  const useScrollToTop = () => {\n    _s();\n    //注意自定义Hooks要用useXXX定义\n    const {\n      pathname\n    } = useLocation();\n    useEffect(() => {\n      console.log('pathname change');\n      console.log('useScrollToTop');\n      console.log(window.history);\n      window.history.scrollRestoration = 'manual';\n\n      // 根据跳转类型来决定是否要定位到顶部，如果不是点击 span 或 backLink 则不回到顶部\n\n      let nav_type = sessionStorage.getItem('nav_type');\n      if (nav_type > -1) {\n        // 点击了 span 或 backLink\n\n        setTimeout(() => {\n          window.scrollTo({\n            top: 0,\n            left: 0,\n            behavior: 'auto'\n          });\n        }, 10);\n\n        // window.scrollTo(0, 0);\n\n        // 重置 nav_type\n        sessionStorage.setItem('nav_type', -1);\n      } else {\n        // 返回上一页\n        setTimeout(() => {\n          window.scrollTo({\n            top: sessionStorage.getItem('scrollY'),\n            left: 0,\n            behavior: 'auto'\n          });\n\n          // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n        }, 10);\n\n        // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n      }\n    }, [pathname]);\n  };\n\n  // 设置 hash\n  _s(useScrollToTop, \"+8VPq4+XDMjo/kjL3WLkbwU2Amg=\", false, function () {\n    return [useLocation];\n  });\n  const postSetHash = (targe_card_id, current_card_id) => {\n    //移除旧的\n    let newHash = '';\n    let id_list = hash.split('#');\n    for (let j = 0; j < id_list.length; j++) {\n      // ABC 中点击 A 卡片的链接时，删除 A 之后的所有数据\n      if (id_list[j] == current_card_id) {\n        if (j !== id_list.length - 1) {\n          // 在最后 1 个卡片中点击则不删除任何数据\n\n          // 删除 hash\n          id_list.splice(j + 1, id_list.length);\n          // cards.splice(j + 1, cards.length)\n\n          break;\n        }\n      }\n    }\n    newHash = id_list.join('#');\n    newHash = newHash + '#' + targe_card_id;\n    setHash(newHash);\n  };\n\n  // 点击链接\n  const handleLinkClick = (id, card_index) => {\n    console.log('Post handleLinkClick');\n    console.log(id);\n    console.log(card_index);\n    // if (hash == '') {\n    //     setHash(hash + id)\n    // } else {\n    //     setHash(hash + '#' + id)\n    // }\n\n    setContent(id);\n    postSetHash(id, card_index);\n  };\n  const setCardContainer = cards => {\n    const list = cards.map(card => /*#__PURE__*/_jsxDEV(Container, {\n      index: card['card']['id'],\n      data: card,\n      handleLinkClick: handleLinkClick\n    }, card['card']['id'], false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this));\n    return list;\n  };\n  document.title = props.title;\n  console.log(cards);\n  // let container_list = cards.map((card)=>{\n  //     <Container card={card} />  \n  // })\n  console.log(card_list);\n  console.log(container_list);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container_list\",\n      children: setCardContainer(cards)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 12\n  }, this);\n}\n_s2(Post, \"hfslvMYPsLHb8k/TfNHoXN/jV6w=\", false, function () {\n  return [useParams, useHash];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","Link","useParams","useLocation","useHash","Container","Nav","Footer","getHeptabaseData","getClearCard","getClearImag","set","Post","props","slug","hash","setHash","isLoading","setLoadingState","cards","setCards","card_list","setCardList","container_list","console","log","id_list","split","i","length","setContent","id","mark","isExists","j","heptabase_blog_data","then","res","data","new_card","push","new_card_compent","handleLinkClick","useScrollToTop","pathname","window","history","scrollRestoration","nav_type","sessionStorage","getItem","setTimeout","scrollTo","top","left","behavior","setItem","postSetHash","targe_card_id","current_card_id","newHash","splice","join","card_index","setCardContainer","list","map","card","document","title"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Post.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\n\nimport useHash from \"../hooks/useHash\";\n\nimport Container from '../components/Container'\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer'\n\nimport '../index.css'\nimport 'github-markdown-css'\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction'\nimport { set } from 'date-fns';\n\n// 文章页面\nfunction Post(props) {\n    let { slug } = useParams();\n\n\n\n    // useScrollToTop();\n\n    // 处理 hash\n    const [hash, setHash] = useHash();\n    // 记录数据加载状态\n    let [isLoading, setLoadingState] = useState(true)\n    // 记录数据\n    let [cards, setCards] = useState([])\n\n    let [card_list, setCardList] = useState([])\n\n    let container_list\n\n\n\n    // hash 变化时\n    useEffect(() => {\n\n        console.log('hash change useEffect');\n        // 更新数据\n        console.log(hash);\n\n        // setCards([])\n\n        // 获取数据\n        // ID 列表\n        let id_list = hash.split('#')\n\n        for (let i = 0; i < id_list.length; i++) {\n            if (id_list[i] !== '') {\n                setContent(id_list[i])\n            }\n        }\n        console.log(cards);\n\n\n    }, [hash])\n\n    // 页面载入\n    useEffect(() => {\n        // console.log('scrollTo(0, 0)');\n        // window.scrollTo(0, 0);\n        console.log('Post useEffect');\n        // 获取 url\n        console.log(slug);\n\n\n\n\n\n    })\n\n\n\n    // cards 变化时\n    useEffect(() => {\n\n        console.log('cards change useEffect');\n\n\n    }, [cards])\n\n\n    // 获取文章数据、处理文章数据\n    const setContent = (id) => {\n        console.log('setContent');\n\n        let mark = -1\n        let isExists = false\n        for (let j = 0; j < cards.length; j++) {\n\n            // 数据是否已在列表中\n            if (cards[j]['card']['id'] == id) {\n                isExists = true\n            }\n\n        }\n\n        if (isExists) {\n            return\n        }\n\n\n        setCards([])\n\n        // 存储数据的变量\n        let heptabase_blog_data\n\n        getHeptabaseData.then((res) => {\n            heptabase_blog_data = res.data\n            let new_card = null\n            console.log('Container setContent for:');\n            for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n\n                if (heptabase_blog_data.cards[i]['id'] == id) {\n\n                    // 处理内容中的图片\n                    heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i])\n                    console.log('getClearImag done');\n                    // 处理内容中的链接\n                    new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards)\n                    heptabase_blog_data.cards[i] = new_card['card']\n\n\n\n                    cards.push(new_card)\n\n                    let new_card_compent = <Container key={new_card['id']} index={new_card['id']} data={new_card} handleLinkClick={handleLinkClick} />\n                    // card_list = \n                    // setCardList(card_list.push(new_card))\n                    // console.log(cards);\n                    setLoadingState(false)\n\n                    break;\n                }\n            }\n\n            setCards(cards)\n\n            // 404\n            if (new_card == null) {\n                console.log('404');\n                // window.location = '/404'\n            }\n        })\n    }\n\n    const useScrollToTop = () => {   //注意自定义Hooks要用useXXX定义\n        const { pathname } = useLocation();\n        useEffect(() => {\n\n            console.log('pathname change');\n\n            console.log('useScrollToTop');\n\n            console.log(window.history);\n            window.history.scrollRestoration = 'manual';\n\n            // 根据跳转类型来决定是否要定位到顶部，如果不是点击 span 或 backLink 则不回到顶部\n\n            let nav_type = sessionStorage.getItem('nav_type')\n\n            if (nav_type > -1) {\n                // 点击了 span 或 backLink\n\n                setTimeout(() => {\n                    window.scrollTo({\n                        top: 0,\n                        left: 0,\n                        behavior: 'auto'\n                    });\n                }, 10);\n\n                // window.scrollTo(0, 0);\n\n                // 重置 nav_type\n                sessionStorage.setItem('nav_type', -1)\n            } else {\n\n                // 返回上一页\n                setTimeout(() => {\n\n                    window.scrollTo({\n                        top: sessionStorage.getItem('scrollY'),\n                        left: 0,\n                        behavior: 'auto'\n                    });\n\n                    // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n                }, 10);\n\n                // window.scrollTo(0, sessionStorage.getItem('scrollY'));\n\n\n            }\n\n\n        }, [pathname]);\n    }\n\n    // 设置 hash\n    const postSetHash = (targe_card_id, current_card_id) => {\n        //移除旧的\n        let newHash = ''\n        let id_list = hash.split('#')\n\n        for (let j = 0; j < id_list.length; j++) {\n\n            // ABC 中点击 A 卡片的链接时，删除 A 之后的所有数据\n            if (id_list[j] == current_card_id) {\n\n                if (j !== id_list.length - 1) {\n                    // 在最后 1 个卡片中点击则不删除任何数据\n\n                    // 删除 hash\n                    id_list.splice(j + 1, id_list.length)\n                    // cards.splice(j + 1, cards.length)\n\n\n                    break;\n                }\n\n            }\n\n        }\n\n        newHash = id_list.join('#')\n        newHash = newHash + '#' + targe_card_id\n        setHash(newHash)\n\n\n    }\n\n    // 点击链接\n    const handleLinkClick = (id, card_index) => {\n        console.log('Post handleLinkClick');\n        console.log(id);\n        console.log(card_index);\n        // if (hash == '') {\n        //     setHash(hash + id)\n        // } else {\n        //     setHash(hash + '#' + id)\n        // }\n\n        setContent(id)\n        postSetHash(id, card_index)\n    }\n\n\n    const setCardContainer = (cards) => {\n        const list = cards.map((card) =>\n            <Container key={card['card']['id']} index={card['card']['id']} data={card} handleLinkClick={handleLinkClick} />\n        )\n\n        return list\n    }\n\n    document.title = props.title\n    console.log(cards);\n    // let container_list = cards.map((card)=>{\n    //     <Container card={card} />  \n    // })\n    console.log(card_list);\n\n\n\n\n\n\n    console.log(container_list);\n\n\n    return <div>\n\n        <Nav />\n        <div className='container_list'>\n            {setCardContainer(cards)}\n        </div>\n        <Footer />\n\n    </div>;\n\n}\n\nexport default Post;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}