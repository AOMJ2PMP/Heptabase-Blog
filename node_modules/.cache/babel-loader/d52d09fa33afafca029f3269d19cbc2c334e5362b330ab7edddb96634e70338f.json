{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/components/Container.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport Nav from '../components/Nav';\nimport '../index.css';\nimport 'github-markdown-css';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Container() {\n  _s();\n  let [isLoading, setLoadingState] = useState(true);\n  let [card, setCard] = useState('card');\n  let [heptabase_data, setHeptabaseData] = useState('heptabase_data');\n  let {\n    slug\n  } = useParams();\n  const post = useRef(null);\n\n  // 设置 img 的尺寸\n  if (post.current != null) {\n    console.log(post.current.innerHTML);\n    let article_img = document.getElementsByTagName('img');\n    for (let i = 0; i < article_img.length; i++) {\n      let width_key_index = article_img[i]['alt'].indexOf('{{width ');\n      if (width_key_index > -1) {\n        let img_width = article_img[i]['alt'].substring(width_key_index, article_img[i]['alt'].length);\n        img_width = img_width.replace('{{width ', '');\n        img_width = img_width.replace('}}', '');\n        article_img[i].setAttribute('style', 'width:' + img_width);\n        article_img[i].style.display = 'block';\n        article_img[i].style.margin = '0 auto';\n      }\n    }\n  }\n  const setContent = id => {\n    console.log('setContent');\n    let heptabase_blog_data;\n    getHeptabaseData.then(res => {\n      heptabase_blog_data = res.data;\n      console.log(res);\n      //获取 URL 中的文章 ID\n\n      console.log('Container setContent for:');\n      for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n        if (heptabase_blog_data.cards[i]['id'] == id) {\n          // 处理内容中的图片\n          heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i]);\n          console.log('getClearImag done');\n          // 处理内容中的链接\n          let new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards);\n          heptabase_blog_data.cards[i] = new_card['card'];\n          console.log('backLinks:');\n          console.log(new_card['backLinks']);\n          console.log(new_card);\n\n          // this.setState({ content: heptabase_blog_data.cards[i]['content'], backLinks: new_card['backLinks'], isLoading: false, old_post_id: heptabase_blog_data.cards[i]['id'] })\n          setHeptabaseData(heptabase_blog_data);\n          setCard(new_card);\n          setLoadingState(false);\n          break;\n        }\n      }\n\n      // 404\n    });\n  };\n\n  const handleBackLinkClick = id => {\n    console.log('handleBackLinkClick');\n    console.log(id);\n    if (id != this.state.old_post_id) {\n      this.setState({\n        new_post_id: id\n      });\n    }\n\n    // console.log(event);\n  };\n\n  // setContent(slug)\n\n  useEffect(() => {\n    console.log('useEffect');\n\n    //设置页面内容\n    console.log(card);\n    if (card != 'card') {\n      if (card['card']['id'] != slug) {\n        setContent(slug);\n      }\n    }\n  });\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: setContent(slug),\n      children: \" Loaindg.. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 16\n    }, this);\n  } else {\n    // md 转 HTML\n    // var showdown = require('showdown'),\n    //     converter = new showdown.Converter(),\n    //     html = converter.makeHtml(card['card']['content']);\n    // console.log(html);\n    // setCard(slug)\n\n    // 反向链接\n    let backLinksBox = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"markdown-body backLinks\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: \" Links to this page \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: \"null \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 52\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 28\n    }, this);\n    console.log(card['backLinks']);\n    if (card['backLinks'].length > 0) {\n      let backLinks = card['backLinks'].map(backLink => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: '/post/' + backLink.id\n          },\n          children: [\" \", \" \", backLink.title, \" \", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this), \" \"]\n      }, backLink.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this));\n      backLinksBox = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"markdown-body backLinks\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          children: \" Links to this page \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [\" \", backLinks, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 56\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 28\n      }, this);\n    }\n    window.scrollTo(0, 0);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: post,\n          className: \"markdown-body container\",\n          children: [/*#__PURE__*/_jsxDEV(\"article\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              children: card['card']['content'],\n              remarkPlugins: [remarkGfm, {\n                singleTilde: false\n              }]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 9\n          }, this), \" \", backLinksBox]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 16\n    }, this);\n  }\n}\n_s(Container, \"9v4ml0kjubMkd4nkOv5NVAVUdaM=\", false, function () {\n  return [useParams];\n});\n_c = Container;\nexport default Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","Link","useParams","Nav","ReactMarkdown","remarkGfm","getHeptabaseData","getClearCard","getClearImag","Container","isLoading","setLoadingState","card","setCard","heptabase_data","setHeptabaseData","slug","post","current","console","log","innerHTML","article_img","document","getElementsByTagName","i","length","width_key_index","indexOf","img_width","substring","replace","setAttribute","style","display","margin","setContent","id","heptabase_blog_data","then","res","data","cards","new_card","handleBackLinkClick","state","old_post_id","setState","new_post_id","backLinksBox","backLinks","map","backLink","pathname","title","window","scrollTo","singleTilde"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/components/Container.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\n\nimport Nav from '../components/Nav';\nimport '../index.css'\n\nimport 'github-markdown-css'\n\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\n\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction'\n\n\nfunction Container() {\n    let [isLoading, setLoadingState] = useState(true)\n    let [card, setCard] = useState('card');\n    let [heptabase_data, setHeptabaseData] = useState('heptabase_data');\n    let { slug } = useParams();\n\n    const post = useRef(null);\n\n    // 设置 img 的尺寸\n    if (post.current != null) {\n        console.log(post.current.innerHTML);\n        let article_img = document.getElementsByTagName('img');\n\n        for (let i = 0; i < article_img.length; i++) {\n            let width_key_index = article_img[i]['alt'].indexOf('{{width ')\n            if (width_key_index > -1) {\n                let img_width = article_img[i]['alt'].substring(width_key_index, article_img[i]['alt'].length)\n                img_width = img_width.replace('{{width ', '')\n                img_width = img_width.replace('}}', '')\n\n                article_img[i].setAttribute('style', 'width:' + img_width)\n                article_img[i].style.display = 'block'\n                article_img[i].style.margin = '0 auto'\n            }\n        }\n\n    }\n\n    const setContent = (id) => {\n        console.log('setContent');\n        let heptabase_blog_data\n        getHeptabaseData.then((res) => {\n            heptabase_blog_data = res.data\n            console.log(res);\n            //获取 URL 中的文章 ID\n\n            console.log('Container setContent for:');\n            for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n\n                if (heptabase_blog_data.cards[i]['id'] == id) {\n\n                    // 处理内容中的图片\n                    heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i])\n                    console.log('getClearImag done');\n                    // 处理内容中的链接\n                    let new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards)\n                    heptabase_blog_data.cards[i] = new_card['card']\n\n                    console.log('backLinks:');\n                    console.log(new_card['backLinks']);\n                    console.log(new_card);\n\n                    // this.setState({ content: heptabase_blog_data.cards[i]['content'], backLinks: new_card['backLinks'], isLoading: false, old_post_id: heptabase_blog_data.cards[i]['id'] })\n                    setHeptabaseData(heptabase_blog_data)\n                    setCard(new_card)\n                    setLoadingState(false)\n                    break;\n                }\n            }\n\n            // 404\n        })\n\n    }\n\n    const handleBackLinkClick = (id) => {\n        console.log('handleBackLinkClick');\n        console.log(id);\n\n        if (id != this.state.old_post_id) {\n            this.setState({\n                new_post_id: id\n            })\n        }\n\n        // console.log(event);\n    }\n\n    // setContent(slug)\n\n    useEffect(() => {\n\n        console.log('useEffect');\n\n        //设置页面内容\n        console.log(card);\n        if (card != 'card') {\n            if (card['card']['id'] != slug) {\n                setContent(slug)\n            }\n        }\n\n    });\n\n\n    if (isLoading) {\n        return <div onClick = { setContent(slug) } > Loaindg.. < /div>\n    } else {\n\n        // md 转 HTML\n        // var showdown = require('showdown'),\n        //     converter = new showdown.Converter(),\n        //     html = converter.makeHtml(card['card']['content']);\n        // console.log(html);\n        // setCard(slug)\n\n        // 反向链接\n        let backLinksBox = < div className = 'markdown-body backLinks' >\n            <\n            header > Links to this page < /header> <\n            ul >\n            null <\n            /ul> <\n            /div>\n\n        console.log(card['backLinks']);\n        if (card['backLinks'].length > 0) {\n            let backLinks = card['backLinks'].map((backLink) =>\n                <\n                li key = { backLink.id } >\n                <\n                Link to = {\n                    { pathname: '/post/' + backLink.id } } > { /* <span onClick={this.handleBackLinkClick.bind(Event, backLink.id)}> */ } { backLink.title } { /* </span> */ } <\n                /Link> <\n                /li>\n            )\n\n            backLinksBox = < div className = 'markdown-body backLinks' >\n                <\n                header > Links to this page < /header> <\n                ul > { backLinks } <\n                /ul> <\n                /div>\n        }\n\n\n        window.scrollTo(0, 0);\n\n        return <div >\n\n            <\n            div >\n            <\n            Nav / >\n            <\n            div ref = { post }\n        className = 'markdown-body container' >\n\n            {\n                /* <article dangerouslySetInnerHTML={{ __html: html }}></article>\n                                    {backLinksBox} */\n            }\n\n        <\n        article > < ReactMarkdown children = { card['card']['content'] }\n        remarkPlugins = {\n            [remarkGfm, { singleTilde: false }] }\n        /></article > { backLinksBox }\n\n        <\n        /div>\n\n        <\n        /div> <\n        /div>;\n    }\n\n}\n\nexport default Container;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}