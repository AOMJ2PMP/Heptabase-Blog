{"ast":null,"code":"var _jsxFileName = \"/Users/jiangzilong/\\u5B66\\u4E60/minpg/Heptabase-Blog/src/page/Post.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\nimport Container from '../components/Container';\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer';\nimport '../index.css';\nimport 'github-markdown-css';\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction';\nimport { id } from 'date-fns/locale';\nimport useHash from \"../hooks/useHash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet windowWidth = window.innerWidth;\nlet minWidth = 600;\n\n// 文章页面\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.findContent = (id, heptabase_blog_data) => {\n      if (heptabase_blog_data === '') {\n        return;\n      }\n      let new_card = null;\n      console.log('Post findContent for:');\n      for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n        if (heptabase_blog_data.cards[i]['id'] == id) {\n          // 处理内容中的图片\n          heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i]);\n          console.log('getClearImag done');\n          // 处理内容中的链接\n          new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards);\n          heptabase_blog_data.cards[i] = new_card['card'];\n\n          // 设置网页标题\n          if (new_card['card']['title'] !== 'About') {\n            document.title = new_card['card']['title'];\n          } else {\n            document.title = 'Jiang 的数字花园🌱';\n          }\n          let cardList = [];\n          return new_card;\n        }\n      }\n      return new_card;\n    };\n    this.handleLinkClick = (link_id, current_id) => {\n      // window.location.search = window.location.search+'&note-id='+id\n      // setHash(hash + 'note-id='+id)\n\n      // 设置当前活跃的笔记（用户焦点）\n      this.setState({\n        activeNote: link_id\n      });\n\n      // 已经显示此卡片则不更新 URL 和数据\n      let bingo = false;\n      this.state.cardList.forEach(item => {\n        if (link_id == item['card']['id']) {\n          bingo = true;\n        }\n      });\n      if (bingo) {\n        return;\n      }\n\n      // 删除 Link 所在 card 后的所有 URL 参数\n      let url_search = window.location.search;\n      url_search = url_search.replace('?', '');\n      url_search = url_search.replace(/&/gi, '');\n      let url_search_list = url_search.split('note-id=');\n      let new_url_search = '';\n      let current_page_index = -1;\n      for (let i = 0; i < url_search_list.length; i++) {\n        if (url_search_list[i] === '') {\n          continue;\n        }\n        if (url_search_list[i] === current_id) {\n          // URL 参数 === current_id\n          current_page_index = i;\n        } else {\n          // URL 参数 !== current_id\n        }\n        if (new_url_search == '') {\n          new_url_search += '?note-id=' + url_search_list[i];\n        } else {\n          new_url_search += '&note-id=' + url_search_list[i];\n        }\n\n        //如果当前 id === current_id，则忽略后面的所有 ID\n        if (current_page_index > -1) {\n          break;\n        }\n      }\n      if (new_url_search == '') {\n        new_url_search += '?note-id=' + link_id;\n      } else {\n        new_url_search += '&note-id=' + link_id;\n      }\n\n      // 设置 URL\n      window.history.pushState({}, '', window.location.origin + '/post' + new_url_search);\n      // 记录 URL\n      this.setState({\n        location: window.location.href\n      });\n\n      // 删除 URL 中不存在的 Card\n      this.resetCardList();\n      // 根据 URL 获取 card 数据\n      this.herfToData();\n    };\n    this.herfToData = () => {\n      // 从 URL 中获取 note id，根据 id 获取卡片数据\n      let card_list = [];\n      let url_search = window.location.search;\n      url_search = url_search.replace('?', '');\n      url_search = url_search.replace(/&/gi, '');\n      let url_search_list = url_search.split('note-id=');\n\n      // if(url_search_list.length===1){\n      //     if(url_search_list[0]===''){\n      //         //访问的是首页\n      //         url_search_list.push(this.state.main_card['id'])\n      //     }\n\n      // }\n\n      for (let i = 0; i < url_search_list.length; i++) {\n        if (url_search_list[i] == '') {\n          continue;\n        }\n        // 将数据保存到 card list 中\n        card_list.push(this.findContent(url_search_list[i], this.state.card));\n      }\n\n      // 收集 card 数据后一次性 setState（在 for 内分多次 setState 的话容易丢失数据）\n      this.setState({\n        cardList: card_list,\n        activeNote: card_list[card_list.length - 1]['card']['id'] // 设置当前活跃的笔记（用户焦点）\n      });\n    };\n    this.handleHashChange = url => {\n      // 定位到当前用户关注的笔记\n      setTimeout(() => {\n        let note_list = document.getElementsByClassName('container');\n        let foucus_note = this.state.activeNote;\n        let target_note_offsetLeft = 0;\n        for (let j = 0; j < note_list.length; j++) {\n          let note = note_list[j];\n          if (note.getAttribute('note_id') === foucus_note) {\n            if (windowWidth > minWidth) {\n              document.getElementsByClassName('notes')[0].scrollTo({\n                left: target_note_offsetLeft,\n                behavior: 'smooth'\n              });\n            } else {}\n            break;\n          }\n          target_note_offsetLeft += note.clientWidth;\n        }\n      }, 100);\n      console.log(url);\n      // 如果 url 发生变化，则更新数据\n      if (url !== this.state.location) {\n        // 将当前 URL 保存到 state 中\n        this.setState({\n          location: url\n        });\n        if (this.state.location !== '') {\n          // cardList 中不存在 URL 的某一个 card\n          // 加载此 card 的数据\n          this.herfToData();\n        }\n      }\n\n      // 删除 URL 中不存在的 Card\n      this.resetCardList();\n    };\n    this.resetCardList = () => {\n      let url = window.location.href;\n      //比对 url 和 cardList\n      for (let i = 0; i < this.state.cardList.length; i++) {\n        // url 中不存在此 card\n        if (url.indexOf(this.state.cardList[i]['card']['id']) < 0) {\n          // 删除 card\n          this.state.cardList.splice(i, 1);\n          this.setState({\n            cardList: this.state.cardList\n          });\n        } else {\n          // url 中存在此 card\n          // continue\n        }\n      }\n    };\n    this.state = {\n      card: null //所有的 hepta 数据\n      ,\n      main_card: null //首页卡片\n      ,\n      cardList: [] // 当前页面的卡片列表\n      ,\n      location: '' // 记录 URL\n      ,\n      activeNote: 'null'\n    };\n  }\n  componentDidMount() {\n    console.log(windowWidth);\n\n    // 请求 hepta 数据 getHeptabaseData\n    getHeptabaseData.then(res => {\n      let heptabase_blog_data = res.data;\n\n      // 将数据保存到 state 中\n      this.setState({\n        card: heptabase_blog_data,\n        main_card: res['pages']['about']\n      }, () => {\n        // 首页的情况\n        if (window.location.search === '') {\n          // 找到首页卡片的 ID\n          let main_id = res['pages']['about']['id'];\n          // 设置 URL\n          window.history.pushState({}, '', window.location.origin + '/post?note-id=' + main_id);\n        }\n\n        // 渲染 URL、数据\n        this.herfToData();\n      });\n    });\n  }\n\n  // 根据 card id 获取 card content\n\n  render() {\n    if (this.state.card === null || this.state.cardList.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 21\n      }, this);\n    } else {\n      console.log(this.state.activeNote);\n      let card_list_dom = [];\n\n      //如果屏幕宽度较小，则只显示 1 条笔记\n      if (windowWidth < minWidth) {\n        // 获取用户关注的笔记进行展示\n\n        let card = this.state.cardList[this.state.cardList.length - 1];\n        for (let k = 0; k < this.state.cardList.length; k++) {\n          if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n            card = this.state.cardList[k];\n            break;\n          }\n        }\n\n        //设置笔记样式\n        // left = index*40px; right = index*-40-400\n        let note_style = {\n          left: 0\n        };\n        card_list_dom.push( /*#__PURE__*/_jsxDEV(Container, {\n          style: note_style,\n          handleHashChange: this.handleHashChange,\n          handleLinkClick: this.handleLinkClick,\n          card: card\n        }, card['card']['id'], false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 36\n        }, this));\n      } else {\n        for (let i = 0; i < this.state.cardList.length; i++) {\n          let card = this.state.cardList[i];\n\n          //设置笔记样式\n          // left = index*40px; right = index*-40-400\n          let note_style = {\n            left: i * 40 + 'px',\n            flex: '0 0 auto'\n          };\n          let note = /*#__PURE__*/_jsxDEV(Container, {\n            style: note_style,\n            handleHashChange: this.handleHashChange,\n            handleLinkClick: this.handleLinkClick,\n            card: card\n          }, card['card']['id'], false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 32\n          }, this);\n          card_list_dom.push(note);\n        }\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"notes\",\n            children: card_list_dom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 21\n      }, this);\n    }\n  }\n}\nexport default Post;","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Routes","Route","Link","useParams","useNavigate","useLocation","Container","Nav","Footer","getHeptabaseData","getClearCard","getClearImag","id","useHash","windowWidth","window","innerWidth","minWidth","Post","Component","constructor","props","findContent","heptabase_blog_data","new_card","console","log","i","cards","length","document","title","cardList","handleLinkClick","link_id","current_id","setState","activeNote","bingo","state","forEach","item","url_search","location","search","replace","url_search_list","split","new_url_search","current_page_index","history","pushState","origin","href","resetCardList","herfToData","card_list","push","card","handleHashChange","url","setTimeout","note_list","getElementsByClassName","foucus_note","target_note_offsetLeft","j","note","getAttribute","scrollTo","left","behavior","clientWidth","indexOf","splice","main_card","componentDidMount","then","res","data","main_id","render","card_list_dom","k","note_style","flex"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Post.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useLocation } from \"react-router\";\n\nimport Container from '../components/Container'\nimport Nav from '../components/Nav';\nimport Footer from '../components/Footer'\n\nimport '../index.css'\nimport 'github-markdown-css'\n\nimport { getHeptabaseData, getClearCard, getClearImag } from '../constantFunction'\nimport { id } from 'date-fns/locale';\n\nimport useHash from \"../hooks/useHash\";\n\n\n\nlet windowWidth = window.innerWidth\nlet minWidth = 600\n\n// 文章页面\nclass Post extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            card: null //所有的 hepta 数据\n            ,main_card:null //首页卡片\n            , cardList: [] // 当前页面的卡片列表\n            , location: '' // 记录 URL\n            , activeNote: 'null'\n        };\n    }\n\n\n    componentDidMount() {\n\n        console.log(windowWidth);\n\n        // 请求 hepta 数据 getHeptabaseData\n        getHeptabaseData.then((res) => {\n\n            let heptabase_blog_data = res.data\n\n            // 将数据保存到 state 中\n            this.setState({\n                card: heptabase_blog_data,\n                main_card:res['pages']['about']\n            }, () => {\n\n                // 首页的情况\n                if (window.location.search === '') {\n\n                    // 找到首页卡片的 ID\n                    let main_id = res['pages']['about']['id']\n                    // 设置 URL\n                    window.history.pushState({}, '', window.location.origin + '/post?note-id=' + main_id)\n                }\n\n                // 渲染 URL、数据\n                this.herfToData()\n            })\n\n        })\n\n    }\n\n    // 根据 card id 获取 card content\n    findContent = (id, heptabase_blog_data) => {\n        if (heptabase_blog_data === '') {\n            return\n        }\n\n\n        let new_card = null\n        console.log('Post findContent for:');\n        for (let i = 0; i < heptabase_blog_data.cards.length; i++) {\n\n            if (heptabase_blog_data.cards[i]['id'] == id) {\n\n                // 处理内容中的图片\n                heptabase_blog_data.cards[i] = getClearImag(heptabase_blog_data.cards[i])\n                console.log('getClearImag done');\n                // 处理内容中的链接\n                new_card = getClearCard(heptabase_blog_data.cards[i], heptabase_blog_data.cards)\n                heptabase_blog_data.cards[i] = new_card['card']\n\n                // 设置网页标题\n                if (new_card['card']['title'] !== 'About') {\n                    document.title = new_card['card']['title']\n                } else {\n                    document.title = 'Jiang 的数字花园🌱'\n                }\n\n                let cardList = []\n\n                return new_card\n\n\n            }\n        }\n\n        return new_card\n\n    }\n\n    // 文章内链接、反向链接点击\n    handleLinkClick = (link_id, current_id) => {\n        // window.location.search = window.location.search+'&note-id='+id\n        // setHash(hash + 'note-id='+id)\n\n        // 设置当前活跃的笔记（用户焦点）\n        this.setState({\n            activeNote: link_id\n        })\n\n        // 已经显示此卡片则不更新 URL 和数据\n        let bingo = false\n        this.state.cardList.forEach(item => {\n\n            if (link_id == item['card']['id']) {\n\n\n                bingo = true\n\n            }\n\n        });\n\n\n\n        if (bingo) {\n\n            return\n        }\n\n\n        // 删除 Link 所在 card 后的所有 URL 参数\n        let url_search = window.location.search\n        url_search = url_search.replace('?', '')\n        url_search = url_search.replace(/&/gi, '')\n        let url_search_list = url_search.split('note-id=')\n\n        let new_url_search = ''\n        let current_page_index = -1\n        for (let i = 0; i < url_search_list.length; i++) {\n\n            if (url_search_list[i] === '') {\n                continue\n            }\n\n            if (url_search_list[i] === current_id) {\n                // URL 参数 === current_id\n                current_page_index = i\n            } else {\n                // URL 参数 !== current_id\n            }\n\n            if (new_url_search == '') {\n                new_url_search += '?note-id=' + url_search_list[i]\n            } else {\n                new_url_search += '&note-id=' + url_search_list[i]\n            }\n\n            //如果当前 id === current_id，则忽略后面的所有 ID\n            if (current_page_index > -1) {\n                break;\n            }\n        }\n\n        if (new_url_search == '') {\n            new_url_search += '?note-id=' + link_id\n        } else {\n            new_url_search += '&note-id=' + link_id\n        }\n\n        // 设置 URL\n        window.history.pushState({}, '', window.location.origin + '/post' + new_url_search)\n        // 记录 URL\n        this.setState({\n            location: window.location.href\n        })\n\n\n        // 删除 URL 中不存在的 Card\n        this.resetCardList()\n        // 根据 URL 获取 card 数据\n        this.herfToData()\n\n\n    }\n\n    herfToData = () => {\n\n        // 从 URL 中获取 note id，根据 id 获取卡片数据\n        let card_list = []\n        let url_search = window.location.search\n        url_search = url_search.replace('?', '')\n        url_search = url_search.replace(/&/gi, '')\n        let url_search_list = url_search.split('note-id=')\n\n        // if(url_search_list.length===1){\n        //     if(url_search_list[0]===''){\n        //         //访问的是首页\n        //         url_search_list.push(this.state.main_card['id'])\n        //     }\n            \n        // }\n\n        for (let i = 0; i < url_search_list.length; i++) {\n            if (url_search_list[i] == '') {\n                continue\n            }\n            // 将数据保存到 card list 中\n            card_list.push(this.findContent(url_search_list[i], this.state.card))\n\n        }\n\n        // 收集 card 数据后一次性 setState（在 for 内分多次 setState 的话容易丢失数据）\n        this.setState({\n            cardList: card_list,\n            activeNote: card_list[card_list.length - 1]['card']['id'] // 设置当前活跃的笔记（用户焦点）\n        })\n\n\n    }\n\n    // 当 URL 变化时（子组件 container 载入完毕后也会调用此方法）\n    handleHashChange = (url) => {\n\n        // 定位到当前用户关注的笔记\n        setTimeout(() => {\n            let note_list = document.getElementsByClassName('container')\n            let foucus_note = this.state.activeNote\n\n            let target_note_offsetLeft = 0\n            for (let j = 0; j < note_list.length; j++) {\n                let note = note_list[j]\n                if (note.getAttribute('note_id') === foucus_note) {\n\n\n                    if (windowWidth > minWidth) {\n                        document.getElementsByClassName('notes')[0].scrollTo({ left: target_note_offsetLeft, behavior: 'smooth' })\n                    } else {\n\n                    }\n\n                    break;\n\n                }\n\n                target_note_offsetLeft += note.clientWidth\n            }\n        }, 100);\n\n\n\n        console.log(url);\n        // 如果 url 发生变化，则更新数据\n        if (url !== this.state.location) {\n\n\n            // 将当前 URL 保存到 state 中\n            this.setState({\n                location: url\n            })\n\n            if (this.state.location !== '') {\n\n                // cardList 中不存在 URL 的某一个 card\n                // 加载此 card 的数据\n                this.herfToData()\n\n            }\n\n        }\n\n        // 删除 URL 中不存在的 Card\n        this.resetCardList()\n\n    }\n\n    // 删除 URL 中不存在的 Card\n    resetCardList = () => {\n        let url = window.location.href\n        //比对 url 和 cardList\n        for (let i = 0; i < this.state.cardList.length; i++) {\n            // url 中不存在此 card\n            if (url.indexOf(this.state.cardList[i]['card']['id']) < 0) {\n\n\n                // 删除 card\n                this.state.cardList.splice(i, 1)\n                this.setState({\n                    cardList: this.state.cardList\n                })\n\n            } else {\n                // url 中存在此 card\n                // continue\n            }\n\n        }\n\n    }\n\n    render() {\n        if (this.state.card === null || this.state.cardList.length === 0) {\n            return (<div>loading</div>)\n        } else {\n\n            console.log(this.state.activeNote);\n\n            let card_list_dom = []\n\n            //如果屏幕宽度较小，则只显示 1 条笔记\n            if (windowWidth < minWidth) {\n\n                // 获取用户关注的笔记进行展示\n\n                let card = this.state.cardList[this.state.cardList.length - 1]\n\n                for (let k = 0; k < this.state.cardList.length; k++) {\n                    if (this.state.cardList[k]['card']['id'] === this.state.activeNote) {\n                        card = this.state.cardList[k]\n                        break;\n                    }\n                }\n\n                //设置笔记样式\n                // left = index*40px; right = index*-40-400\n                let note_style = {\n                    left: 0\n                }\n                card_list_dom.push(<Container style={note_style} key={card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={card} />)\n            } else {\n                for (let i = 0; i < this.state.cardList.length; i++) {\n                    let card = this.state.cardList[i]\n\n                    //设置笔记样式\n                    // left = index*40px; right = index*-40-400\n                    let note_style = {\n                        left: i * 40 + 'px',\n                        flex: '0 0 auto'\n                    }\n\n                    let note = <Container style={note_style} key={card['card']['id']} handleHashChange={this.handleHashChange} handleLinkClick={this.handleLinkClick} card={card} />\n                    card_list_dom.push(note)\n                }\n            }\n\n            return (<div>\n\n                <div>\n                    <Nav />\n                    {/* <Container card={card} /> */}\n                    <div className='notes'>\n                        {card_list_dom}\n                    </div>\n\n                    <Footer />\n                </div>\n\n            </div>)\n        }\n    }\n\n\n\n}\n\nexport default Post;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACvG,SAASC,WAAW,QAAQ,cAAc;AAE1C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,MAAM,MAAM,sBAAsB;AAEzC,OAAO,cAAc;AACrB,OAAO,qBAAqB;AAE5B,SAASC,gBAAgB,EAAEC,YAAY,EAAEC,YAAY,QAAQ,qBAAqB;AAClF,SAASC,EAAE,QAAQ,iBAAiB;AAEpC,OAAOC,OAAO,MAAM,kBAAkB;AAAC;AAIvC,IAAIC,WAAW,GAAGC,MAAM,CAACC,UAAU;AACnC,IAAIC,QAAQ,GAAG,GAAG;;AAElB;AACA,MAAMC,IAAI,SAASxB,KAAK,CAACyB,SAAS,CAAC;EAE/BC,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAAC,KA4CjBC,WAAW,GAAG,CAACV,EAAE,EAAEW,mBAAmB,KAAK;MACvC,IAAIA,mBAAmB,KAAK,EAAE,EAAE;QAC5B;MACJ;MAGA,IAAIC,QAAQ,GAAG,IAAI;MACnBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,mBAAmB,CAACK,KAAK,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QAEvD,IAAIJ,mBAAmB,CAACK,KAAK,CAACD,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIf,EAAE,EAAE;UAE1C;UACAW,mBAAmB,CAACK,KAAK,CAACD,CAAC,CAAC,GAAGhB,YAAY,CAACY,mBAAmB,CAACK,KAAK,CAACD,CAAC,CAAC,CAAC;UACzEF,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;UAChC;UACAF,QAAQ,GAAGd,YAAY,CAACa,mBAAmB,CAACK,KAAK,CAACD,CAAC,CAAC,EAAEJ,mBAAmB,CAACK,KAAK,CAAC;UAChFL,mBAAmB,CAACK,KAAK,CAACD,CAAC,CAAC,GAAGH,QAAQ,CAAC,MAAM,CAAC;;UAE/C;UACA,IAAIA,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,OAAO,EAAE;YACvCM,QAAQ,CAACC,KAAK,GAAGP,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;UAC9C,CAAC,MAAM;YACHM,QAAQ,CAACC,KAAK,GAAG,eAAe;UACpC;UAEA,IAAIC,QAAQ,GAAG,EAAE;UAEjB,OAAOR,QAAQ;QAGnB;MACJ;MAEA,OAAOA,QAAQ;IAEnB,CAAC;IAAA,KAGDS,eAAe,GAAG,CAACC,OAAO,EAAEC,UAAU,KAAK;MACvC;MACA;;MAEA;MACA,IAAI,CAACC,QAAQ,CAAC;QACVC,UAAU,EAAEH;MAChB,CAAC,CAAC;;MAEF;MACA,IAAII,KAAK,GAAG,KAAK;MACjB,IAAI,CAACC,KAAK,CAACP,QAAQ,CAACQ,OAAO,CAACC,IAAI,IAAI;QAEhC,IAAIP,OAAO,IAAIO,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE;UAG/BH,KAAK,GAAG,IAAI;QAEhB;MAEJ,CAAC,CAAC;MAIF,IAAIA,KAAK,EAAE;QAEP;MACJ;;MAGA;MACA,IAAII,UAAU,GAAG3B,MAAM,CAAC4B,QAAQ,CAACC,MAAM;MACvCF,UAAU,GAAGA,UAAU,CAACG,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MACxCH,UAAU,GAAGA,UAAU,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MAC1C,IAAIC,eAAe,GAAGJ,UAAU,CAACK,KAAK,CAAC,UAAU,CAAC;MAElD,IAAIC,cAAc,GAAG,EAAE;MACvB,IAAIC,kBAAkB,GAAG,CAAC,CAAC;MAC3B,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,eAAe,CAACjB,MAAM,EAAEF,CAAC,EAAE,EAAE;QAE7C,IAAImB,eAAe,CAACnB,CAAC,CAAC,KAAK,EAAE,EAAE;UAC3B;QACJ;QAEA,IAAImB,eAAe,CAACnB,CAAC,CAAC,KAAKQ,UAAU,EAAE;UACnC;UACAc,kBAAkB,GAAGtB,CAAC;QAC1B,CAAC,MAAM;UACH;QAAA;QAGJ,IAAIqB,cAAc,IAAI,EAAE,EAAE;UACtBA,cAAc,IAAI,WAAW,GAAGF,eAAe,CAACnB,CAAC,CAAC;QACtD,CAAC,MAAM;UACHqB,cAAc,IAAI,WAAW,GAAGF,eAAe,CAACnB,CAAC,CAAC;QACtD;;QAEA;QACA,IAAIsB,kBAAkB,GAAG,CAAC,CAAC,EAAE;UACzB;QACJ;MACJ;MAEA,IAAID,cAAc,IAAI,EAAE,EAAE;QACtBA,cAAc,IAAI,WAAW,GAAGd,OAAO;MAC3C,CAAC,MAAM;QACHc,cAAc,IAAI,WAAW,GAAGd,OAAO;MAC3C;;MAEA;MACAnB,MAAM,CAACmC,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAEpC,MAAM,CAAC4B,QAAQ,CAACS,MAAM,GAAG,OAAO,GAAGJ,cAAc,CAAC;MACnF;MACA,IAAI,CAACZ,QAAQ,CAAC;QACVO,QAAQ,EAAE5B,MAAM,CAAC4B,QAAQ,CAACU;MAC9B,CAAC,CAAC;;MAGF;MACA,IAAI,CAACC,aAAa,EAAE;MACpB;MACA,IAAI,CAACC,UAAU,EAAE;IAGrB,CAAC;IAAA,KAEDA,UAAU,GAAG,MAAM;MAEf;MACA,IAAIC,SAAS,GAAG,EAAE;MAClB,IAAId,UAAU,GAAG3B,MAAM,CAAC4B,QAAQ,CAACC,MAAM;MACvCF,UAAU,GAAGA,UAAU,CAACG,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MACxCH,UAAU,GAAGA,UAAU,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MAC1C,IAAIC,eAAe,GAAGJ,UAAU,CAACK,KAAK,CAAC,UAAU,CAAC;;MAElD;MACA;MACA;MACA;MACA;;MAEA;;MAEA,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,eAAe,CAACjB,MAAM,EAAEF,CAAC,EAAE,EAAE;QAC7C,IAAImB,eAAe,CAACnB,CAAC,CAAC,IAAI,EAAE,EAAE;UAC1B;QACJ;QACA;QACA6B,SAAS,CAACC,IAAI,CAAC,IAAI,CAACnC,WAAW,CAACwB,eAAe,CAACnB,CAAC,CAAC,EAAE,IAAI,CAACY,KAAK,CAACmB,IAAI,CAAC,CAAC;MAEzE;;MAEA;MACA,IAAI,CAACtB,QAAQ,CAAC;QACVJ,QAAQ,EAAEwB,SAAS;QACnBnB,UAAU,EAAEmB,SAAS,CAACA,SAAS,CAAC3B,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;MAC9D,CAAC,CAAC;IAGN,CAAC;IAAA,KAGD8B,gBAAgB,GAAIC,GAAG,IAAK;MAExB;MACAC,UAAU,CAAC,MAAM;QACb,IAAIC,SAAS,GAAGhC,QAAQ,CAACiC,sBAAsB,CAAC,WAAW,CAAC;QAC5D,IAAIC,WAAW,GAAG,IAAI,CAACzB,KAAK,CAACF,UAAU;QAEvC,IAAI4B,sBAAsB,GAAG,CAAC;QAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,CAACjC,MAAM,EAAEqC,CAAC,EAAE,EAAE;UACvC,IAAIC,IAAI,GAAGL,SAAS,CAACI,CAAC,CAAC;UACvB,IAAIC,IAAI,CAACC,YAAY,CAAC,SAAS,CAAC,KAAKJ,WAAW,EAAE;YAG9C,IAAIlD,WAAW,GAAGG,QAAQ,EAAE;cACxBa,QAAQ,CAACiC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAACM,QAAQ,CAAC;gBAAEC,IAAI,EAAEL,sBAAsB;gBAAEM,QAAQ,EAAE;cAAS,CAAC,CAAC;YAC9G,CAAC,MAAM,CAEP;YAEA;UAEJ;UAEAN,sBAAsB,IAAIE,IAAI,CAACK,WAAW;QAC9C;MACJ,CAAC,EAAE,GAAG,CAAC;MAIP/C,OAAO,CAACC,GAAG,CAACkC,GAAG,CAAC;MAChB;MACA,IAAIA,GAAG,KAAK,IAAI,CAACrB,KAAK,CAACI,QAAQ,EAAE;QAG7B;QACA,IAAI,CAACP,QAAQ,CAAC;UACVO,QAAQ,EAAEiB;QACd,CAAC,CAAC;QAEF,IAAI,IAAI,CAACrB,KAAK,CAACI,QAAQ,KAAK,EAAE,EAAE;UAE5B;UACA;UACA,IAAI,CAACY,UAAU,EAAE;QAErB;MAEJ;;MAEA;MACA,IAAI,CAACD,aAAa,EAAE;IAExB,CAAC;IAAA,KAGDA,aAAa,GAAG,MAAM;MAClB,IAAIM,GAAG,GAAG7C,MAAM,CAAC4B,QAAQ,CAACU,IAAI;MAC9B;MACA,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACY,KAAK,CAACP,QAAQ,CAACH,MAAM,EAAEF,CAAC,EAAE,EAAE;QACjD;QACA,IAAIiC,GAAG,CAACa,OAAO,CAAC,IAAI,CAAClC,KAAK,CAACP,QAAQ,CAACL,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;UAGvD;UACA,IAAI,CAACY,KAAK,CAACP,QAAQ,CAAC0C,MAAM,CAAC/C,CAAC,EAAE,CAAC,CAAC;UAChC,IAAI,CAACS,QAAQ,CAAC;YACVJ,QAAQ,EAAE,IAAI,CAACO,KAAK,CAACP;UACzB,CAAC,CAAC;QAEN,CAAC,MAAM;UACH;UACA;QAAA;MAGR;IAEJ,CAAC;IAvRG,IAAI,CAACO,KAAK,GAAG;MACTmB,IAAI,EAAE,IAAI,CAAC;MAAA;MACViB,SAAS,EAAC,IAAI,CAAC;MAAA;MACd3C,QAAQ,EAAE,EAAE,CAAC;MAAA;MACbW,QAAQ,EAAE,EAAE,CAAC;MAAA;MACbN,UAAU,EAAE;IAClB,CAAC;EACL;EAGAuC,iBAAiB,GAAG;IAEhBnD,OAAO,CAACC,GAAG,CAACZ,WAAW,CAAC;;IAExB;IACAL,gBAAgB,CAACoE,IAAI,CAAEC,GAAG,IAAK;MAE3B,IAAIvD,mBAAmB,GAAGuD,GAAG,CAACC,IAAI;;MAElC;MACA,IAAI,CAAC3C,QAAQ,CAAC;QACVsB,IAAI,EAAEnC,mBAAmB;QACzBoD,SAAS,EAACG,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO;MAClC,CAAC,EAAE,MAAM;QAEL;QACA,IAAI/D,MAAM,CAAC4B,QAAQ,CAACC,MAAM,KAAK,EAAE,EAAE;UAE/B;UACA,IAAIoC,OAAO,GAAGF,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;UACzC;UACA/D,MAAM,CAACmC,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAEpC,MAAM,CAAC4B,QAAQ,CAACS,MAAM,GAAG,gBAAgB,GAAG4B,OAAO,CAAC;QACzF;;QAEA;QACA,IAAI,CAACzB,UAAU,EAAE;MACrB,CAAC,CAAC;IAEN,CAAC,CAAC;EAEN;;EAEA;;EA+OA0B,MAAM,GAAG;IACL,IAAI,IAAI,CAAC1C,KAAK,CAACmB,IAAI,KAAK,IAAI,IAAI,IAAI,CAACnB,KAAK,CAACP,QAAQ,CAACH,MAAM,KAAK,CAAC,EAAE;MAC9D,oBAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB;IAC9B,CAAC,MAAM;MAEHJ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACa,KAAK,CAACF,UAAU,CAAC;MAElC,IAAI6C,aAAa,GAAG,EAAE;;MAEtB;MACA,IAAIpE,WAAW,GAAGG,QAAQ,EAAE;QAExB;;QAEA,IAAIyC,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACP,QAAQ,CAAC,IAAI,CAACO,KAAK,CAACP,QAAQ,CAACH,MAAM,GAAG,CAAC,CAAC;QAE9D,KAAK,IAAIsD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5C,KAAK,CAACP,QAAQ,CAACH,MAAM,EAAEsD,CAAC,EAAE,EAAE;UACjD,IAAI,IAAI,CAAC5C,KAAK,CAACP,QAAQ,CAACmD,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC5C,KAAK,CAACF,UAAU,EAAE;YAChEqB,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACP,QAAQ,CAACmD,CAAC,CAAC;YAC7B;UACJ;QACJ;;QAEA;QACA;QACA,IAAIC,UAAU,GAAG;UACbd,IAAI,EAAE;QACV,CAAC;QACDY,aAAa,CAACzB,IAAI,eAAC,QAAC,SAAS;UAAC,KAAK,EAAE2B,UAAW;UAA0B,gBAAgB,EAAE,IAAI,CAACzB,gBAAiB;UAAC,eAAe,EAAE,IAAI,CAAC1B,eAAgB;UAAC,IAAI,EAAEyB;QAAK,GAA/GA,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;UAAA;UAAA;UAAA;QAAA,QAAgG,CAAC;MAC7K,CAAC,MAAM;QACH,KAAK,IAAI/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACY,KAAK,CAACP,QAAQ,CAACH,MAAM,EAAEF,CAAC,EAAE,EAAE;UACjD,IAAI+B,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACP,QAAQ,CAACL,CAAC,CAAC;;UAEjC;UACA;UACA,IAAIyD,UAAU,GAAG;YACbd,IAAI,EAAE3C,CAAC,GAAG,EAAE,GAAG,IAAI;YACnB0D,IAAI,EAAE;UACV,CAAC;UAED,IAAIlB,IAAI,gBAAG,QAAC,SAAS;YAAC,KAAK,EAAEiB,UAAW;YAA0B,gBAAgB,EAAE,IAAI,CAACzB,gBAAiB;YAAC,eAAe,EAAE,IAAI,CAAC1B,eAAgB;YAAC,IAAI,EAAEyB;UAAK,GAA/GA,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;YAAA;YAAA;YAAA;UAAA,QAAgG;UAChKwB,aAAa,CAACzB,IAAI,CAACU,IAAI,CAAC;QAC5B;MACJ;MAEA,oBAAQ;QAAA,uBAEJ;UAAA,wBACI,QAAC,GAAG;YAAA;YAAA;YAAA;UAAA,QAAG,eAEP;YAAK,SAAS,EAAC,OAAO;YAAA,UACjBe;UAAa;YAAA;YAAA;YAAA;UAAA,QACZ,eAEN,QAAC,MAAM;YAAA;YAAA;YAAA;UAAA,QAAG;QAAA;UAAA;UAAA;UAAA;QAAA;MACR;QAAA;QAAA;QAAA;MAAA,QAEJ;IACV;EACJ;AAIJ;AAEA,eAAehE,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}