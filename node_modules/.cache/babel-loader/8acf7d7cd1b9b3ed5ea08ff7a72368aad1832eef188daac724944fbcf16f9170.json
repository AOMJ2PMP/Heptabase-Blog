{"ast":null,"code":"import fi from \"date-fns/esm/locale/fi/index.js\";\nimport CONFIG from \"./config\";\n\n// 计算时间差\nconst getLastEditedTime = dateBegin => {\n  dateBegin = new Date(dateBegin);\n  let dateEnd = new Date();\n\n  // 时间差的毫秒数\n  let dateDiff = dateEnd.getTime() - dateBegin.getTime();\n  // 时间差的天数\n  let dayDiff = Math.floor(dateDiff / (24 * 3600 * 1000));\n\n  // 计算除天数外剩余的毫秒数\n  let leave1 = dateDiff % (24 * 3600 * 1000);\n  // 小时数\n  let hours = Math.floor(leave1 / (3600 * 1000));\n\n  // 计算除小时剩余的分钟数\n  let leave2 = leave1 % (3600 * 1000);\n  // 分钟数\n  let minutes = Math.floor(leave2 / (60 * 1000));\n\n  //计算相差的秒数\n  let leave3 = leave2 % (60 * 1000);\n  let seconds = Math.round(leave3 / 1000);\n  return {\n    'day': dayDiff,\n    'hours': hours,\n    'minutes': minutes,\n    'seconds': seconds\n  };\n};\n\n// 处理网易云音乐\nconst setNeteaseMusic = custom_old_card => {\n  // 判断类型是歌曲还是歌单\n  let type = 2; //歌曲\n  let height_1 = 52;\n  let height_2 = 32;\n  if (custom_old_card.indexOf('playlist') > -1 || custom_old_card.indexOf('album') > -1) {\n    type = 0;\n    height_1 = 450;\n    height_2 = 430;\n  }\n\n  // 获取歌曲 ID\n  let music_id_reg = /[0-9]{4,14}/g;\n  let music_id_list = custom_old_card.match(music_id_reg);\n  if (music_id_list !== []) {\n    // 匹配到 ID\n    let music_id = music_id_list[0];\n    let netease_music_iframe = '<div class=\"music netease_music\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" height=' + height_1 + ' style=\"width: 100%; \" src=\"//music.163.com/outchain/player?type=' + type + '&id=' + music_id + '&auto=0&height=' + height_2 + '\"></iframe></div>';\n    return netease_music_iframe;\n  } else {\n    return undefined;\n  }\n};\n\n// 修复单个 md 文件中的 img\nconst getClearImag = card => {\n  // 修改图片后缀，避免图片无法显示\n  // 找到 ![]( 符号\n  // 找到上述符号之后的第 1 个 jpg#/png#/gif# 符号\n  // 找到上一个步骤后的第 1 个 ) 符号\n  // 删除前面 2 步 index 中间的符号\n\n  console.log('getClearImag');\n  let content = card['content'];\n\n  // 支持的图片类型\n  let img_type = ['.png', '.jpeg', '.jpg', '.gif'];\n  // 包含以下关键字则认为是图片\n  let img_keyword_index = content.indexOf('![');\n  while (img_keyword_index != -1) {\n    // 获取下一个 ) 索引\n    let img_end_inex = content.indexOf(')', img_keyword_index);\n\n    // 获取下一个 ] 索引\n    let img_alt_end_inex = content.indexOf(']', img_keyword_index);\n\n    // 获取图片扩展名索引\n    let img_etc_index;\n    for (let i = 0; i < img_type.length; i++) {\n      img_etc_index = content.indexOf(img_type[i], img_keyword_index + 1);\n      if (img_etc_index >= 0 && img_etc_index <= img_end_inex) {\n        // 如果格式字符是这种格式 ![....jpg] 内，则跳过\n        if (content.substring(img_etc_index + img_type[i].length, img_etc_index + img_type[i].length + 2) == '](') {\n          img_etc_index = content.indexOf(img_type[i], img_etc_index + 1);\n        }\n        img_etc_index += img_type[i].length;\n        break;\n      }\n    }\n    if (img_keyword_index == -1 || img_end_inex == -1 || img_etc_index == -1) {\n      break;\n    }\n    let img_alt = content.substring(img_keyword_index + 2, img_alt_end_inex);\n    let img_src = content.substring(img_alt_end_inex + 2, img_etc_index);\n    console.log('image keyword');\n    console.log(img_alt);\n    console.log(img_src);\n    let old_img_str = content.substring(img_keyword_index, img_end_inex + 1);\n\n    // 获取 = 索引\n    let img_width_inex = old_img_str.indexOf('=');\n    if (img_width_inex > -1 && old_img_str.indexOf('{{width') < 0) {\n      //将图片宽度保存到 alt 中\n      img_alt = img_alt + '{{width ' + old_img_str.substring(img_width_inex + 1, old_img_str.length - 2) + '}}';\n    }\n    let new_img_str = '![' + img_alt + '](' + img_src + ')';\n    content = content.replace(old_img_str, new_img_str);\n\n    // 获取 ![ 索引\n    img_keyword_index = content.indexOf('![', img_keyword_index + 1);\n  }\n  card['content'] = content;\n  return card;\n};\n\n// 处理单个 md 文件中的超链接\nconst getClearCard = (card, cards) => {\n  console.log('getClearCard');\n  // 找到 (./ 符号以及之后的第 1 个 ，或找到 {{ 符号 }}) 符号，截取这 2 个 index 中间的字符串\n  // 将上述字符串放在 card 数据中匹配\n  // 如果找到匹配的卡片：修改上述字符串的地址为 /post/post.id\n  let content = card['content'];\n  let this_card_id = card['id'];\n\n  // 获取 {{ 符号\n  let card_keyword_index = content.indexOf('{{');\n  while (card_keyword_index != -1) {\n    //获取卡片末尾的索引\n    let card_end_inex = content.indexOf('}}', card_keyword_index);\n    if (card_keyword_index == -1 || card_end_inex == -1) {\n      break;\n    }\n    let old_card = content.substring(card_keyword_index, card_end_inex + 2);\n    // {{card xxxx-xxx-xxxx}}\n    let new_card = '<span class=\"unknown_card\">' + '{{未知卡片}}' + '</span>';\n\n    // 检验一下的确是 card\n    if (old_card.indexOf('card ') >= 0) {\n      // 根据 ID 匹配数据中是否存在此卡片\n\n      for (let i = 0; i < cards.length; i++) {\n        // 处理当前卡片信息\n        if (old_card.indexOf(cards[i]['id']) >= 0) {\n          // 存在：设置卡片链接\n          // new_card = '[' + cards[i]['title'] + ']' + '(' + '/post/' + cards[i]['id'] + ')'\n\n          // path 参数用于点击时加载对应笔记的数据，只有 my_link 类可点击\n          new_card = '<span class=\"my_link\" path=' + '/post/' + cards[i]['id'] + '>' + cards[i]['title'] + '</span>';\n          break;\n        }\n      }\n      content = content.replace(old_card, new_card);\n    } else {}\n    card_keyword_index = content.indexOf('{{', card_keyword_index + 1);\n  }\n\n  // 获取拥有别名的卡片\n  let custom_card_keyword_index = content.indexOf('[');\n  console.log(custom_card_keyword_index);\n  while (custom_card_keyword_index != -1) {\n    if (content[custom_card_keyword_index - 1] == '!') {\n      // 如果是图片则忽略\n    } else {\n      // ] 符号\n      let custom_card_name_end_inex = content.indexOf(']', custom_card_keyword_index);\n\n      //获取卡片末尾的索引\n      let custom_card_end_inex = content.indexOf(')', custom_card_keyword_index);\n      let custom_old_card = content.substring(custom_card_keyword_index, custom_card_end_inex + 1);\n      if (custom_old_card.indexOf(']') < 0 || content[custom_card_name_end_inex + 1] != '(') {} else {\n        let custom_card_name = content.substring(custom_card_keyword_index + 1, custom_card_name_end_inex);\n        let custom_card_url = content.substring(custom_card_name_end_inex, custom_card_end_inex);\n        // [name](./url)\n\n        if (custom_card_url.indexOf('./') < 0 || custom_card_url.indexOf('.md') < 0) {\n          // 如果不是 Heptabase 内部链接，则判断是否为音乐链接\n          if (custom_old_card.indexOf('https://music.163.com/') > -1) {\n            // 网易云音乐\n            let netease_music_iframe = setNeteaseMusic(custom_old_card);\n            if (netease_music_iframe !== undefined) {\n              content = content.replace(custom_old_card, netease_music_iframe);\n            }\n          }\n        } else {\n          // 卡片默认跳转到 404 页面\n          let custom_new_card = '<a class=\"unknown_card\" href=' + '/404/' + '>' + custom_card_name + '</a>';\n\n          // 根据 ID 匹配数据中是否存在此卡片\n\n          for (let i = 0; i < cards.length; i++) {\n            if (custom_old_card.indexOf(cards[i]['id']) >= 0) {\n              // 存在：设置卡片链接\n              custom_new_card = '<span class=\"my_link\" path=' + '/post/' + cards[i]['id'] + '>' + custom_card_name + '</span>';\n              break;\n            }\n          }\n          console.log('custom_new_card:');\n          console.log(custom_new_card);\n          content = content.replace(custom_old_card, custom_new_card);\n        }\n      }\n    }\n    custom_card_keyword_index = content.indexOf('[', custom_card_keyword_index + 1);\n  }\n\n  // 处理网易云音乐\n  let netease_music_keyword_index = content.indexOf('<https://music.163.com/');\n  while (netease_music_keyword_index > -1) {\n    // 获取链接的结尾\n    let netease_music_end_inex = content.indexOf('>', netease_music_keyword_index);\n    // 原始文本\n    let netease_music_old_url = content.substring(netease_music_keyword_index, netease_music_end_inex + 1);\n\n    // // 获取歌曲 ID\n    // let music_id_reg = /[0-9]{4,14}/g\n    // let music_id_list = netease_music_old_url.match(music_id_reg)\n\n    // if (music_id_list !== []) {\n    //     // 匹配到 ID\n    //     let music_id = music_id_list[0]\n    //     let netease_music_iframe = '<div class=\"music netease_music\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" height=52 style=\"width: 100%; \" src=\"//music.163.com/outchain/player?type=2&id=' + music_id + '&auto=0&height=32\"></iframe></div>'\n    //     content = content.replace(netease_music_old_url, netease_music_iframe)\n    //     // \n    // }\n\n    // 网易云音乐\n    let netease_music_iframe = setNeteaseMusic(netease_music_old_url);\n    if (netease_music_iframe !== undefined) {\n      content = content.replace(netease_music_old_url, netease_music_iframe);\n    }\n    netease_music_keyword_index = content.indexOf('<https://music.163.com/song?', netease_music_keyword_index + 1);\n  }\n\n  // 处理反向连接\n  // 如果 A 卡片中存在当前笔记的 ID，则 A 卡片为当前笔记的反向链接之一\n  let backLinks = [];\n  for (let i = 0; i < cards.length; i++) {\n    if (cards[i]['content'].indexOf(this_card_id) >= 0 && cards[i]['id'] != this_card_id) {\n      backLinks.push(cards[i]);\n    }\n  }\n  card['content'] = content;\n  return {\n    'card': card,\n    'backLinks': backLinks\n  };\n};\n\n// 获取 Heptabase 的笔记数据\nconst getHeptabaseData = new Promise((resolve, reject) => {\n  console.log('getHeptabaseData');\n\n  // 获取本地数据\n  let heptabase_blog_data = localStorage.getItem(\"heptabase_blog_data\");\n\n  // 若本地存在数据则不重新获取\n  if (heptabase_blog_data != undefined) {\n    let createdTime = JSON.parse(heptabase_blog_data)['createdTime'];\n    console.log(Date.parse(new Date()) / 1000);\n    console.log(createdTime);\n    console.log(Date.parse(new Date()) / 1000 - createdTime);\n    if (Date.parse(new Date()) / 1000 - createdTime >= 600 && createdTime != undefined) {\n      // 数据比较旧时再重新获取\n      console.log('数据比较旧');\n    } else {\n      console.log('从缓存获取数据');\n      // return heptabase_blog_data\n      resolve(JSON.parse(heptabase_blog_data));\n      return;\n    }\n  }\n  console.log('heptabase_blog_data == undefined');\n  const header = new Headers({\n    \"Access-Control-Allow-Origin\": \"*\"\n  });\n\n  // 获取 Heptabase 数据\n  fetch(CONFIG.api_url, {\n    method: \"get\",\n    header: header\n    // mode: 'no-cors'\n  }).then(res => res.json()).then(data => {\n    console.log(data);\n\n    // 按照时间排序卡片\n    data.cards = data.cards.sort((a, b) => {\n      // 最近编辑时间\n      return b.lastEditedTime < a.lastEditedTime ? -1 : 1;\n    });\n    let pages = {};\n    // 获取 About、Projects 页面的数据\n    pages.about = undefined;\n    pages.projects = undefined;\n    for (let i = 0; i < data.cards.length; i++) {\n      console.log(data.cards[i]['title']);\n\n      // About\n      if (data.cards[i]['title'] == 'About') {\n        pages.about = data.cards[i];\n      }\n\n      // Projects\n      if (data.cards[i]['title'] == 'Projects') {\n        pages.projects = data.cards[i];\n      }\n\n      // 最近编辑的时间差\n      // getLastEditedTime(format(new Date(data.cards[i]['lastEditedTime']), 'yyyy-MM-dd'))\n      let timeDiff = getLastEditedTime(data.cards[i]['lastEditedTime']);\n      data.cards[i].lastEditedTimeDiff = '';\n      if (timeDiff['day'] > 0) {\n        data.cards[i].lastEditedTimeDiff = 'Edited ' + timeDiff['day'] + ' days ago';\n      } else if (timeDiff['hours'] > 0) {\n        data.cards[i].lastEditedTimeDiff = 'Edited ' + timeDiff['hours'] + ' hours ago';\n      } else if (timeDiff['minutes'] > 0) {\n        data.cards[i].lastEditedTimeDiff = 'Edited ' + timeDiff['minutes'] + ' minutes ago';\n      } else {\n        data.cards[i].lastEditedTimeDiff = 'Edited just';\n      }\n    }\n\n    // createdTime 记录数据获取的时间\n    const local_data = {\n      'createdTime': Date.parse(new Date()) / 1000,\n      'data': data,\n      'pages': pages\n    };\n    // 存储数据到本地缓存\n    localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(local_data));\n    // console.log(this.state.posts);\n\n    console.log('getHeptabaseData return');\n    // return heptabase_blog_data\n    resolve(local_data);\n  }).catch(e => console.log('错误:', e));\n});\nexport { getHeptabaseData, getClearImag, getClearCard };","map":{"version":3,"names":["fi","CONFIG","getLastEditedTime","dateBegin","Date","dateEnd","dateDiff","getTime","dayDiff","Math","floor","leave1","hours","leave2","minutes","leave3","seconds","round","setNeteaseMusic","custom_old_card","type","height_1","height_2","indexOf","music_id_reg","music_id_list","match","music_id","netease_music_iframe","undefined","getClearImag","card","console","log","content","img_type","img_keyword_index","img_end_inex","img_alt_end_inex","img_etc_index","i","length","substring","img_alt","img_src","old_img_str","img_width_inex","new_img_str","replace","getClearCard","cards","this_card_id","card_keyword_index","card_end_inex","old_card","new_card","custom_card_keyword_index","custom_card_name_end_inex","custom_card_end_inex","custom_card_name","custom_card_url","custom_new_card","netease_music_keyword_index","netease_music_end_inex","netease_music_old_url","backLinks","push","getHeptabaseData","Promise","resolve","reject","heptabase_blog_data","localStorage","getItem","createdTime","JSON","parse","header","Headers","fetch","api_url","method","then","res","json","data","sort","a","b","lastEditedTime","pages","about","projects","timeDiff","lastEditedTimeDiff","local_data","setItem","stringify","catch","e"],"sources":["/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/constantFunction.js"],"sourcesContent":["import fi from \"date-fns/esm/locale/fi/index.js\";\nimport CONFIG from \"./config\";\n\n// 计算时间差\nconst getLastEditedTime = (dateBegin) => {\n\n    dateBegin = new Date(dateBegin)\n\n    let dateEnd = new Date();\n\n    // 时间差的毫秒数\n    let dateDiff = dateEnd.getTime() - dateBegin.getTime()\n    // 时间差的天数\n    let dayDiff = Math.floor(dateDiff / (24 * 3600 * 1000))\n\n    // 计算除天数外剩余的毫秒数\n    let leave1 = dateDiff % (24 * 3600 * 1000)\n    // 小时数\n    let hours = Math.floor(leave1 / (3600 * 1000))\n\n    // 计算除小时剩余的分钟数\n    let leave2 = leave1 % (3600 * 1000)\n    // 分钟数\n    let minutes = Math.floor(leave2 / (60 * 1000))\n\n    //计算相差的秒数\n    let leave3 = leave2 % (60 * 1000)\n    let seconds = Math.round(leave3 / 1000)\n\n    return { 'day': dayDiff, 'hours': hours, 'minutes': minutes, 'seconds': seconds }\n\n}\n\n// 处理网易云音乐\nconst setNeteaseMusic = (custom_old_card) => {\n    // 判断类型是歌曲还是歌单\n    let type = 2 //歌曲\n    let height_1 = 52\n    let height_2 = 32\n    if (custom_old_card.indexOf('playlist') > -1 || custom_old_card.indexOf('album') > -1) {\n        type = 0\n        height_1 = 450\n        height_2 = 430\n    }\n\n    // 获取歌曲 ID\n    let music_id_reg = /[0-9]{4,14}/g\n    let music_id_list = custom_old_card.match(music_id_reg)\n\n    if (music_id_list !== []) {\n        // 匹配到 ID\n        let music_id = music_id_list[0]\n        let netease_music_iframe = '<div class=\"music netease_music\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" height=' + height_1 + ' style=\"width: 100%; \" src=\"//music.163.com/outchain/player?type=' + type + '&id=' + music_id + '&auto=0&height='+height_2+'\"></iframe></div>'\n\n        return netease_music_iframe\n\n    } else {\n        return undefined\n    }\n\n}\n\n// 修复单个 md 文件中的 img\nconst getClearImag = (card) => {\n\n    // 修改图片后缀，避免图片无法显示\n    // 找到 ![]( 符号\n    // 找到上述符号之后的第 1 个 jpg#/png#/gif# 符号\n    // 找到上一个步骤后的第 1 个 ) 符号\n    // 删除前面 2 步 index 中间的符号\n\n    console.log('getClearImag');\n\n    let content = card['content']\n\n    // 支持的图片类型\n    let img_type = ['.png', '.jpeg', '.jpg', '.gif']\n    // 包含以下关键字则认为是图片\n    let img_keyword_index = content.indexOf('![')\n\n    while (img_keyword_index != -1) {\n\n\n        // 获取下一个 ) 索引\n        let img_end_inex = content.indexOf(')', img_keyword_index)\n\n        // 获取下一个 ] 索引\n        let img_alt_end_inex = content.indexOf(']', img_keyword_index)\n\n        // 获取图片扩展名索引\n        let img_etc_index\n        for (let i = 0; i < img_type.length; i++) {\n            img_etc_index = content.indexOf(img_type[i], img_keyword_index + 1)\n            if (img_etc_index >= 0 && img_etc_index <= img_end_inex) {\n\n                // 如果格式字符是这种格式 ![....jpg] 内，则跳过\n                if (content.substring(img_etc_index + img_type[i].length, img_etc_index + img_type[i].length + 2) == '](') {\n                    img_etc_index = content.indexOf(img_type[i], img_etc_index + 1)\n\n                }\n\n                img_etc_index += img_type[i].length\n                break;\n\n\n            }\n        }\n\n        if (img_keyword_index == -1 || img_end_inex == -1 || img_etc_index == -1) {\n            break\n        }\n\n        let img_alt = content.substring(img_keyword_index + 2, img_alt_end_inex)\n        let img_src = content.substring(img_alt_end_inex + 2, img_etc_index)\n\n        console.log('image keyword');\n        console.log(img_alt);\n        console.log(img_src);\n\n        let old_img_str = content.substring(img_keyword_index, img_end_inex + 1)\n\n\n        // 获取 = 索引\n        let img_width_inex = old_img_str.indexOf('=')\n\n        if (img_width_inex > -1 && old_img_str.indexOf('{{width') < 0) {\n            //将图片宽度保存到 alt 中\n            img_alt = img_alt + '{{width ' + old_img_str.substring(img_width_inex + 1, old_img_str.length - 2) + '}}'\n        }\n\n        let new_img_str = '![' + img_alt + '](' + img_src + ')'\n\n        content = content.replace(old_img_str, new_img_str)\n\n        // 获取 ![ 索引\n        img_keyword_index = content.indexOf('![', img_keyword_index + 1)\n\n\n    }\n    card['content'] = content\n    return card\n\n}\n\n// 处理单个 md 文件中的超链接\nconst getClearCard = (card, cards) => {\n    console.log('getClearCard');\n    // 找到 (./ 符号以及之后的第 1 个 ，或找到 {{ 符号 }}) 符号，截取这 2 个 index 中间的字符串\n    // 将上述字符串放在 card 数据中匹配\n    // 如果找到匹配的卡片：修改上述字符串的地址为 /post/post.id\n    let content = card['content']\n    let this_card_id = card['id']\n\n\n    // 获取 {{ 符号\n    let card_keyword_index = content.indexOf('{{')\n\n    while (card_keyword_index != -1) {\n\n        //获取卡片末尾的索引\n        let card_end_inex = content.indexOf('}}', card_keyword_index)\n\n        if (card_keyword_index == -1 || card_end_inex == -1) {\n            break\n        }\n\n        let old_card = content.substring(card_keyword_index, card_end_inex + 2)\n        // {{card xxxx-xxx-xxxx}}\n        let new_card = '<span class=\"unknown_card\">' + '{{未知卡片}}' + '</span>'\n\n        // 检验一下的确是 card\n        if (old_card.indexOf('card ') >= 0) {\n\n            // 根据 ID 匹配数据中是否存在此卡片\n\n            for (let i = 0; i < cards.length; i++) {\n\n                // 处理当前卡片信息\n                if (old_card.indexOf(cards[i]['id']) >= 0) {\n                    // 存在：设置卡片链接\n                    // new_card = '[' + cards[i]['title'] + ']' + '(' + '/post/' + cards[i]['id'] + ')'\n\n                    // path 参数用于点击时加载对应笔记的数据，只有 my_link 类可点击\n                    new_card = '<span class=\"my_link\" path=' + '/post/' + cards[i]['id'] + '>' + cards[i]['title'] + '</span>'\n                    break\n                }\n\n\n            }\n\n            content = content.replace(old_card, new_card)\n\n\n        } else {\n\n        }\n\n        card_keyword_index = content.indexOf('{{', card_keyword_index + 1)\n\n    }\n\n\n    // 获取拥有别名的卡片\n    let custom_card_keyword_index = content.indexOf('[')\n    console.log(custom_card_keyword_index);\n    while (custom_card_keyword_index != -1) {\n\n\n        if (content[custom_card_keyword_index - 1] == '!') {\n            // 如果是图片则忽略\n\n        } else {\n\n            // ] 符号\n            let custom_card_name_end_inex = content.indexOf(']', custom_card_keyword_index)\n\n            //获取卡片末尾的索引\n            let custom_card_end_inex = content.indexOf(')', custom_card_keyword_index)\n\n            let custom_old_card = content.substring(custom_card_keyword_index, custom_card_end_inex + 1)\n\n            if (custom_old_card.indexOf(']') < 0 || content[custom_card_name_end_inex + 1] != '(') {\n\n\n\n            } else {\n\n                let custom_card_name = content.substring(custom_card_keyword_index + 1, custom_card_name_end_inex)\n                let custom_card_url = content.substring(custom_card_name_end_inex, custom_card_end_inex)\n                // [name](./url)\n\n                if (custom_card_url.indexOf('./') < 0 || custom_card_url.indexOf('.md') < 0) {\n                    // 如果不是 Heptabase 内部链接，则判断是否为音乐链接\n                    if (custom_old_card.indexOf('https://music.163.com/') > -1) {\n                        // 网易云音乐\n                        let netease_music_iframe = setNeteaseMusic(custom_old_card)\n                        if (netease_music_iframe !== undefined) {\n                            content = content.replace(custom_old_card, netease_music_iframe)\n                        }\n\n                    }\n\n\n                } else {\n                    // 卡片默认跳转到 404 页面\n                    let custom_new_card = '<a class=\"unknown_card\" href=' + '/404/' + '>' + custom_card_name + '</a>'\n\n                    // 根据 ID 匹配数据中是否存在此卡片\n\n                    for (let i = 0; i < cards.length; i++) {\n\n                        if (custom_old_card.indexOf(cards[i]['id']) >= 0) {\n                            // 存在：设置卡片链接\n                            custom_new_card = '<span class=\"my_link\" path=' + '/post/' + cards[i]['id'] + '>' + custom_card_name + '</span>'\n\n                            break\n                        }\n\n                    }\n\n                    console.log('custom_new_card:');\n                    console.log(custom_new_card);\n\n                    content = content.replace(custom_old_card, custom_new_card)\n                }\n\n            }\n\n\n\n        }\n\n        custom_card_keyword_index = content.indexOf('[', custom_card_keyword_index + 1)\n\n    }\n\n    // 处理网易云音乐\n    let netease_music_keyword_index = content.indexOf('<https://music.163.com/')\n    while (netease_music_keyword_index > -1) {\n        // 获取链接的结尾\n        let netease_music_end_inex = content.indexOf('>', netease_music_keyword_index)\n        // 原始文本\n        let netease_music_old_url = content.substring(netease_music_keyword_index, netease_music_end_inex + 1)\n\n        // // 获取歌曲 ID\n        // let music_id_reg = /[0-9]{4,14}/g\n        // let music_id_list = netease_music_old_url.match(music_id_reg)\n\n        // if (music_id_list !== []) {\n        //     // 匹配到 ID\n        //     let music_id = music_id_list[0]\n        //     let netease_music_iframe = '<div class=\"music netease_music\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" height=52 style=\"width: 100%; \" src=\"//music.163.com/outchain/player?type=2&id=' + music_id + '&auto=0&height=32\"></iframe></div>'\n        //     content = content.replace(netease_music_old_url, netease_music_iframe)\n        //     // \n        // }\n\n        // 网易云音乐\n        let netease_music_iframe = setNeteaseMusic(netease_music_old_url)\n        if (netease_music_iframe !== undefined) {\n            content = content.replace(netease_music_old_url, netease_music_iframe)\n        }\n\n\n        netease_music_keyword_index = content.indexOf('<https://music.163.com/song?', netease_music_keyword_index + 1)\n\n\n    }\n\n    // 处理反向连接\n    // 如果 A 卡片中存在当前笔记的 ID，则 A 卡片为当前笔记的反向链接之一\n    let backLinks = []\n    for (let i = 0; i < cards.length; i++) {\n\n        if (cards[i]['content'].indexOf(this_card_id) >= 0 && cards[i]['id'] != this_card_id) {\n\n            backLinks.push(cards[i])\n\n        }\n\n    }\n\n    card['content'] = content\n    return { 'card': card, 'backLinks': backLinks }\n\n}\n\n// 获取 Heptabase 的笔记数据\nconst getHeptabaseData = new Promise((resolve, reject) => {\n\n    console.log('getHeptabaseData');\n\n    // 获取本地数据\n    let heptabase_blog_data = localStorage.getItem(\"heptabase_blog_data\")\n\n    // 若本地存在数据则不重新获取\n    if (heptabase_blog_data != undefined) {\n\n        let createdTime = JSON.parse(heptabase_blog_data)['createdTime']\n        console.log(Date.parse(new Date()) / 1000);\n        console.log(createdTime);\n        console.log(Date.parse(new Date()) / 1000 - createdTime);\n        if (Date.parse(new Date()) / 1000 - createdTime >= 600 && createdTime != undefined) {\n            // 数据比较旧时再重新获取\n            console.log('数据比较旧');\n\n        } else {\n            console.log('从缓存获取数据');\n            // return heptabase_blog_data\n            resolve(JSON.parse(heptabase_blog_data))\n            return\n        }\n\n\n    }\n\n    console.log('heptabase_blog_data == undefined');\n\n    const header = new Headers({ \"Access-Control-Allow-Origin\": \"*\" });\n\n    // 获取 Heptabase 数据\n    fetch(CONFIG.api_url, {\n        method: \"get\",\n        header: header\n        // mode: 'no-cors'\n    })\n        .then(res => res.json())\n        .then(data => {\n            console.log(data)\n\n            // 按照时间排序卡片\n            data.cards = data.cards.sort((a, b) => {\n\n                // 最近编辑时间\n                return b.lastEditedTime < a.lastEditedTime ? -1 : 1\n\n            })\n\n            let pages = {}\n            // 获取 About、Projects 页面的数据\n            pages.about = undefined\n            pages.projects = undefined\n\n            for (let i = 0; i < data.cards.length; i++) {\n                console.log(data.cards[i]['title']);\n\n                // About\n                if (data.cards[i]['title'] == 'About') {\n\n                    pages.about = data.cards[i]\n\n                }\n\n                // Projects\n                if (data.cards[i]['title'] == 'Projects') {\n                    pages.projects = data.cards[i]\n\n                }\n\n                // 最近编辑的时间差\n                // getLastEditedTime(format(new Date(data.cards[i]['lastEditedTime']), 'yyyy-MM-dd'))\n                let timeDiff = getLastEditedTime(data.cards[i]['lastEditedTime'])\n                data.cards[i].lastEditedTimeDiff = ''\n                if (timeDiff['day'] > 0) {\n                    data.cards[i].lastEditedTimeDiff = 'Edited ' + timeDiff['day'] + ' days ago'\n                } else if (timeDiff['hours'] > 0) {\n\n                    data.cards[i].lastEditedTimeDiff = 'Edited ' + timeDiff['hours'] + ' hours ago'\n\n                } else if (timeDiff['minutes'] > 0) {\n\n                    data.cards[i].lastEditedTimeDiff = 'Edited ' + timeDiff['minutes'] + ' minutes ago'\n\n                } else {\n\n                    data.cards[i].lastEditedTimeDiff = 'Edited just'\n\n                }\n            }\n\n            // createdTime 记录数据获取的时间\n            const local_data = { 'createdTime': Date.parse(new Date()) / 1000, 'data': data, 'pages': pages }\n            // 存储数据到本地缓存\n            localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(local_data))\n            // console.log(this.state.posts);\n\n            console.log('getHeptabaseData return');\n            // return heptabase_blog_data\n            resolve(local_data)\n        })\n        .catch(e => console.log('错误:', e))\n\n})\n\n\nexport { getHeptabaseData, getClearImag, getClearCard }"],"mappings":"AAAA,OAAOA,EAAE,MAAM,iCAAiC;AAChD,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,iBAAiB,GAAIC,SAAS,IAAK;EAErCA,SAAS,GAAG,IAAIC,IAAI,CAACD,SAAS,CAAC;EAE/B,IAAIE,OAAO,GAAG,IAAID,IAAI,EAAE;;EAExB;EACA,IAAIE,QAAQ,GAAGD,OAAO,CAACE,OAAO,EAAE,GAAGJ,SAAS,CAACI,OAAO,EAAE;EACtD;EACA,IAAIC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACJ,QAAQ,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;;EAEvD;EACA,IAAIK,MAAM,GAAGL,QAAQ,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;EAC1C;EACA,IAAIM,KAAK,GAAGH,IAAI,CAACC,KAAK,CAACC,MAAM,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC;;EAE9C;EACA,IAAIE,MAAM,GAAGF,MAAM,IAAI,IAAI,GAAG,IAAI,CAAC;EACnC;EACA,IAAIG,OAAO,GAAGL,IAAI,CAACC,KAAK,CAACG,MAAM,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;;EAE9C;EACA,IAAIE,MAAM,GAAGF,MAAM,IAAI,EAAE,GAAG,IAAI,CAAC;EACjC,IAAIG,OAAO,GAAGP,IAAI,CAACQ,KAAK,CAACF,MAAM,GAAG,IAAI,CAAC;EAEvC,OAAO;IAAE,KAAK,EAAEP,OAAO;IAAE,OAAO,EAAEI,KAAK;IAAE,SAAS,EAAEE,OAAO;IAAE,SAAS,EAAEE;EAAQ,CAAC;AAErF,CAAC;;AAED;AACA,MAAME,eAAe,GAAIC,eAAe,IAAK;EACzC;EACA,IAAIC,IAAI,GAAG,CAAC,EAAC;EACb,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIH,eAAe,CAACI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAIJ,eAAe,CAACI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;IACnFH,IAAI,GAAG,CAAC;IACRC,QAAQ,GAAG,GAAG;IACdC,QAAQ,GAAG,GAAG;EAClB;;EAEA;EACA,IAAIE,YAAY,GAAG,cAAc;EACjC,IAAIC,aAAa,GAAGN,eAAe,CAACO,KAAK,CAACF,YAAY,CAAC;EAEvD,IAAIC,aAAa,KAAK,EAAE,EAAE;IACtB;IACA,IAAIE,QAAQ,GAAGF,aAAa,CAAC,CAAC,CAAC;IAC/B,IAAIG,oBAAoB,GAAG,+GAA+G,GAAGP,QAAQ,GAAG,mEAAmE,GAAGD,IAAI,GAAG,MAAM,GAAGO,QAAQ,GAAG,iBAAiB,GAACL,QAAQ,GAAC,mBAAmB;IAEvS,OAAOM,oBAAoB;EAE/B,CAAC,MAAM;IACH,OAAOC,SAAS;EACpB;AAEJ,CAAC;;AAED;AACA,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAE3B;EACA;EACA;EACA;EACA;;EAEAC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAE3B,IAAIC,OAAO,GAAGH,IAAI,CAAC,SAAS,CAAC;;EAE7B;EACA,IAAII,QAAQ,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;EAChD;EACA,IAAIC,iBAAiB,GAAGF,OAAO,CAACX,OAAO,CAAC,IAAI,CAAC;EAE7C,OAAOa,iBAAiB,IAAI,CAAC,CAAC,EAAE;IAG5B;IACA,IAAIC,YAAY,GAAGH,OAAO,CAACX,OAAO,CAAC,GAAG,EAAEa,iBAAiB,CAAC;;IAE1D;IACA,IAAIE,gBAAgB,GAAGJ,OAAO,CAACX,OAAO,CAAC,GAAG,EAAEa,iBAAiB,CAAC;;IAE9D;IACA,IAAIG,aAAa;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MACtCD,aAAa,GAAGL,OAAO,CAACX,OAAO,CAACY,QAAQ,CAACK,CAAC,CAAC,EAAEJ,iBAAiB,GAAG,CAAC,CAAC;MACnE,IAAIG,aAAa,IAAI,CAAC,IAAIA,aAAa,IAAIF,YAAY,EAAE;QAErD;QACA,IAAIH,OAAO,CAACQ,SAAS,CAACH,aAAa,GAAGJ,QAAQ,CAACK,CAAC,CAAC,CAACC,MAAM,EAAEF,aAAa,GAAGJ,QAAQ,CAACK,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,EAAE;UACvGF,aAAa,GAAGL,OAAO,CAACX,OAAO,CAACY,QAAQ,CAACK,CAAC,CAAC,EAAED,aAAa,GAAG,CAAC,CAAC;QAEnE;QAEAA,aAAa,IAAIJ,QAAQ,CAACK,CAAC,CAAC,CAACC,MAAM;QACnC;MAGJ;IACJ;IAEA,IAAIL,iBAAiB,IAAI,CAAC,CAAC,IAAIC,YAAY,IAAI,CAAC,CAAC,IAAIE,aAAa,IAAI,CAAC,CAAC,EAAE;MACtE;IACJ;IAEA,IAAII,OAAO,GAAGT,OAAO,CAACQ,SAAS,CAACN,iBAAiB,GAAG,CAAC,EAAEE,gBAAgB,CAAC;IACxE,IAAIM,OAAO,GAAGV,OAAO,CAACQ,SAAS,CAACJ,gBAAgB,GAAG,CAAC,EAAEC,aAAa,CAAC;IAEpEP,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5BD,OAAO,CAACC,GAAG,CAACU,OAAO,CAAC;IACpBX,OAAO,CAACC,GAAG,CAACW,OAAO,CAAC;IAEpB,IAAIC,WAAW,GAAGX,OAAO,CAACQ,SAAS,CAACN,iBAAiB,EAAEC,YAAY,GAAG,CAAC,CAAC;;IAGxE;IACA,IAAIS,cAAc,GAAGD,WAAW,CAACtB,OAAO,CAAC,GAAG,CAAC;IAE7C,IAAIuB,cAAc,GAAG,CAAC,CAAC,IAAID,WAAW,CAACtB,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;MAC3D;MACAoB,OAAO,GAAGA,OAAO,GAAG,UAAU,GAAGE,WAAW,CAACH,SAAS,CAACI,cAAc,GAAG,CAAC,EAAED,WAAW,CAACJ,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;IAC7G;IAEA,IAAIM,WAAW,GAAG,IAAI,GAAGJ,OAAO,GAAG,IAAI,GAAGC,OAAO,GAAG,GAAG;IAEvDV,OAAO,GAAGA,OAAO,CAACc,OAAO,CAACH,WAAW,EAAEE,WAAW,CAAC;;IAEnD;IACAX,iBAAiB,GAAGF,OAAO,CAACX,OAAO,CAAC,IAAI,EAAEa,iBAAiB,GAAG,CAAC,CAAC;EAGpE;EACAL,IAAI,CAAC,SAAS,CAAC,GAAGG,OAAO;EACzB,OAAOH,IAAI;AAEf,CAAC;;AAED;AACA,MAAMkB,YAAY,GAAG,CAAClB,IAAI,EAAEmB,KAAK,KAAK;EAClClB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC3B;EACA;EACA;EACA,IAAIC,OAAO,GAAGH,IAAI,CAAC,SAAS,CAAC;EAC7B,IAAIoB,YAAY,GAAGpB,IAAI,CAAC,IAAI,CAAC;;EAG7B;EACA,IAAIqB,kBAAkB,GAAGlB,OAAO,CAACX,OAAO,CAAC,IAAI,CAAC;EAE9C,OAAO6B,kBAAkB,IAAI,CAAC,CAAC,EAAE;IAE7B;IACA,IAAIC,aAAa,GAAGnB,OAAO,CAACX,OAAO,CAAC,IAAI,EAAE6B,kBAAkB,CAAC;IAE7D,IAAIA,kBAAkB,IAAI,CAAC,CAAC,IAAIC,aAAa,IAAI,CAAC,CAAC,EAAE;MACjD;IACJ;IAEA,IAAIC,QAAQ,GAAGpB,OAAO,CAACQ,SAAS,CAACU,kBAAkB,EAAEC,aAAa,GAAG,CAAC,CAAC;IACvE;IACA,IAAIE,QAAQ,GAAG,6BAA6B,GAAG,UAAU,GAAG,SAAS;;IAErE;IACA,IAAID,QAAQ,CAAC/B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;MAEhC;;MAEA,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,KAAK,CAACT,MAAM,EAAED,CAAC,EAAE,EAAE;QAEnC;QACA,IAAIc,QAAQ,CAAC/B,OAAO,CAAC2B,KAAK,CAACV,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE;UACvC;UACA;;UAEA;UACAe,QAAQ,GAAG,6BAA6B,GAAG,QAAQ,GAAGL,KAAK,CAACV,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,GAAGU,KAAK,CAACV,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,SAAS;UAC1G;QACJ;MAGJ;MAEAN,OAAO,GAAGA,OAAO,CAACc,OAAO,CAACM,QAAQ,EAAEC,QAAQ,CAAC;IAGjD,CAAC,MAAM,CAEP;IAEAH,kBAAkB,GAAGlB,OAAO,CAACX,OAAO,CAAC,IAAI,EAAE6B,kBAAkB,GAAG,CAAC,CAAC;EAEtE;;EAGA;EACA,IAAII,yBAAyB,GAAGtB,OAAO,CAACX,OAAO,CAAC,GAAG,CAAC;EACpDS,OAAO,CAACC,GAAG,CAACuB,yBAAyB,CAAC;EACtC,OAAOA,yBAAyB,IAAI,CAAC,CAAC,EAAE;IAGpC,IAAItB,OAAO,CAACsB,yBAAyB,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE;MAC/C;IAAA,CAEH,MAAM;MAEH;MACA,IAAIC,yBAAyB,GAAGvB,OAAO,CAACX,OAAO,CAAC,GAAG,EAAEiC,yBAAyB,CAAC;;MAE/E;MACA,IAAIE,oBAAoB,GAAGxB,OAAO,CAACX,OAAO,CAAC,GAAG,EAAEiC,yBAAyB,CAAC;MAE1E,IAAIrC,eAAe,GAAGe,OAAO,CAACQ,SAAS,CAACc,yBAAyB,EAAEE,oBAAoB,GAAG,CAAC,CAAC;MAE5F,IAAIvC,eAAe,CAACI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAIW,OAAO,CAACuB,yBAAyB,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,CAIvF,CAAC,MAAM;QAEH,IAAIE,gBAAgB,GAAGzB,OAAO,CAACQ,SAAS,CAACc,yBAAyB,GAAG,CAAC,EAAEC,yBAAyB,CAAC;QAClG,IAAIG,eAAe,GAAG1B,OAAO,CAACQ,SAAS,CAACe,yBAAyB,EAAEC,oBAAoB,CAAC;QACxF;;QAEA,IAAIE,eAAe,CAACrC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAIqC,eAAe,CAACrC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;UACzE;UACA,IAAIJ,eAAe,CAACI,OAAO,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,EAAE;YACxD;YACA,IAAIK,oBAAoB,GAAGV,eAAe,CAACC,eAAe,CAAC;YAC3D,IAAIS,oBAAoB,KAAKC,SAAS,EAAE;cACpCK,OAAO,GAAGA,OAAO,CAACc,OAAO,CAAC7B,eAAe,EAAES,oBAAoB,CAAC;YACpE;UAEJ;QAGJ,CAAC,MAAM;UACH;UACA,IAAIiC,eAAe,GAAG,+BAA+B,GAAG,OAAO,GAAG,GAAG,GAAGF,gBAAgB,GAAG,MAAM;;UAEjG;;UAEA,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,KAAK,CAACT,MAAM,EAAED,CAAC,EAAE,EAAE;YAEnC,IAAIrB,eAAe,CAACI,OAAO,CAAC2B,KAAK,CAACV,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE;cAC9C;cACAqB,eAAe,GAAG,6BAA6B,GAAG,QAAQ,GAAGX,KAAK,CAACV,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,GAAGmB,gBAAgB,GAAG,SAAS;cAEhH;YACJ;UAEJ;UAEA3B,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC/BD,OAAO,CAACC,GAAG,CAAC4B,eAAe,CAAC;UAE5B3B,OAAO,GAAGA,OAAO,CAACc,OAAO,CAAC7B,eAAe,EAAE0C,eAAe,CAAC;QAC/D;MAEJ;IAIJ;IAEAL,yBAAyB,GAAGtB,OAAO,CAACX,OAAO,CAAC,GAAG,EAAEiC,yBAAyB,GAAG,CAAC,CAAC;EAEnF;;EAEA;EACA,IAAIM,2BAA2B,GAAG5B,OAAO,CAACX,OAAO,CAAC,yBAAyB,CAAC;EAC5E,OAAOuC,2BAA2B,GAAG,CAAC,CAAC,EAAE;IACrC;IACA,IAAIC,sBAAsB,GAAG7B,OAAO,CAACX,OAAO,CAAC,GAAG,EAAEuC,2BAA2B,CAAC;IAC9E;IACA,IAAIE,qBAAqB,GAAG9B,OAAO,CAACQ,SAAS,CAACoB,2BAA2B,EAAEC,sBAAsB,GAAG,CAAC,CAAC;;IAEtG;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,IAAInC,oBAAoB,GAAGV,eAAe,CAAC8C,qBAAqB,CAAC;IACjE,IAAIpC,oBAAoB,KAAKC,SAAS,EAAE;MACpCK,OAAO,GAAGA,OAAO,CAACc,OAAO,CAACgB,qBAAqB,EAAEpC,oBAAoB,CAAC;IAC1E;IAGAkC,2BAA2B,GAAG5B,OAAO,CAACX,OAAO,CAAC,8BAA8B,EAAEuC,2BAA2B,GAAG,CAAC,CAAC;EAGlH;;EAEA;EACA;EACA,IAAIG,SAAS,GAAG,EAAE;EAClB,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,KAAK,CAACT,MAAM,EAAED,CAAC,EAAE,EAAE;IAEnC,IAAIU,KAAK,CAACV,CAAC,CAAC,CAAC,SAAS,CAAC,CAACjB,OAAO,CAAC4B,YAAY,CAAC,IAAI,CAAC,IAAID,KAAK,CAACV,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIW,YAAY,EAAE;MAElFc,SAAS,CAACC,IAAI,CAAChB,KAAK,CAACV,CAAC,CAAC,CAAC;IAE5B;EAEJ;EAEAT,IAAI,CAAC,SAAS,CAAC,GAAGG,OAAO;EACzB,OAAO;IAAE,MAAM,EAAEH,IAAI;IAAE,WAAW,EAAEkC;EAAU,CAAC;AAEnD,CAAC;;AAED;AACA,MAAME,gBAAgB,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAEtDtC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;EAE/B;EACA,IAAIsC,mBAAmB,GAAGC,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;;EAErE;EACA,IAAIF,mBAAmB,IAAI1C,SAAS,EAAE;IAElC,IAAI6C,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,mBAAmB,CAAC,CAAC,aAAa,CAAC;IAChEvC,OAAO,CAACC,GAAG,CAAC7B,IAAI,CAACwE,KAAK,CAAC,IAAIxE,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC;IAC1C4B,OAAO,CAACC,GAAG,CAACyC,WAAW,CAAC;IACxB1C,OAAO,CAACC,GAAG,CAAC7B,IAAI,CAACwE,KAAK,CAAC,IAAIxE,IAAI,EAAE,CAAC,GAAG,IAAI,GAAGsE,WAAW,CAAC;IACxD,IAAItE,IAAI,CAACwE,KAAK,CAAC,IAAIxE,IAAI,EAAE,CAAC,GAAG,IAAI,GAAGsE,WAAW,IAAI,GAAG,IAAIA,WAAW,IAAI7C,SAAS,EAAE;MAChF;MACAG,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IAExB,CAAC,MAAM;MACHD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB;MACAoC,OAAO,CAACM,IAAI,CAACC,KAAK,CAACL,mBAAmB,CAAC,CAAC;MACxC;IACJ;EAGJ;EAEAvC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAE/C,MAAM4C,MAAM,GAAG,IAAIC,OAAO,CAAC;IAAE,6BAA6B,EAAE;EAAI,CAAC,CAAC;;EAElE;EACAC,KAAK,CAAC9E,MAAM,CAAC+E,OAAO,EAAE;IAClBC,MAAM,EAAE,KAAK;IACbJ,MAAM,EAAEA;IACR;EACJ,CAAC,CAAC,CACGK,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;IACVrD,OAAO,CAACC,GAAG,CAACoD,IAAI,CAAC;;IAEjB;IACAA,IAAI,CAACnC,KAAK,GAAGmC,IAAI,CAACnC,KAAK,CAACoC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAEnC;MACA,OAAOA,CAAC,CAACC,cAAc,GAAGF,CAAC,CAACE,cAAc,GAAG,CAAC,CAAC,GAAG,CAAC;IAEvD,CAAC,CAAC;IAEF,IAAIC,KAAK,GAAG,CAAC,CAAC;IACd;IACAA,KAAK,CAACC,KAAK,GAAG9D,SAAS;IACvB6D,KAAK,CAACE,QAAQ,GAAG/D,SAAS;IAE1B,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6C,IAAI,CAACnC,KAAK,CAACT,MAAM,EAAED,CAAC,EAAE,EAAE;MACxCR,OAAO,CAACC,GAAG,CAACoD,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;;MAEnC;MACA,IAAI6C,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,OAAO,EAAE;QAEnCkD,KAAK,CAACC,KAAK,GAAGN,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC;MAE/B;;MAEA;MACA,IAAI6C,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,EAAE;QACtCkD,KAAK,CAACE,QAAQ,GAAGP,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC;MAElC;;MAEA;MACA;MACA,IAAIqD,QAAQ,GAAG3F,iBAAiB,CAACmF,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC;MACjE6C,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC,CAACsD,kBAAkB,GAAG,EAAE;MACrC,IAAID,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;QACrBR,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC,CAACsD,kBAAkB,GAAG,SAAS,GAAGD,QAAQ,CAAC,KAAK,CAAC,GAAG,WAAW;MAChF,CAAC,MAAM,IAAIA,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAE9BR,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC,CAACsD,kBAAkB,GAAG,SAAS,GAAGD,QAAQ,CAAC,OAAO,CAAC,GAAG,YAAY;MAEnF,CAAC,MAAM,IAAIA,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;QAEhCR,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC,CAACsD,kBAAkB,GAAG,SAAS,GAAGD,QAAQ,CAAC,SAAS,CAAC,GAAG,cAAc;MAEvF,CAAC,MAAM;QAEHR,IAAI,CAACnC,KAAK,CAACV,CAAC,CAAC,CAACsD,kBAAkB,GAAG,aAAa;MAEpD;IACJ;;IAEA;IACA,MAAMC,UAAU,GAAG;MAAE,aAAa,EAAE3F,IAAI,CAACwE,KAAK,CAAC,IAAIxE,IAAI,EAAE,CAAC,GAAG,IAAI;MAAE,MAAM,EAAEiF,IAAI;MAAE,OAAO,EAAEK;IAAM,CAAC;IACjG;IACAlB,YAAY,CAACwB,OAAO,CAAC,qBAAqB,EAAErB,IAAI,CAACsB,SAAS,CAACF,UAAU,CAAC,CAAC;IACvE;;IAEA/D,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC;IACAoC,OAAO,CAAC0B,UAAU,CAAC;EACvB,CAAC,CAAC,CACDG,KAAK,CAACC,CAAC,IAAInE,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEkE,CAAC,CAAC,CAAC;AAE1C,CAAC,CAAC;AAGF,SAAShC,gBAAgB,EAAErC,YAAY,EAAEmB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}