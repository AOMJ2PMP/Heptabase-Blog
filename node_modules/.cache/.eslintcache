[{"/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/index.js":"1","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/App.js":"2","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Home.js":"3","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/About.js":"4","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Post.js":"5","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/404.js":"6","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/constantFunction.js":"7","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/components/Nav.js":"8","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/components/BlogPost.js":"9","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/components/Container.js":"10"},{"size":326,"mtime":1668052871465,"results":"11","hashOfConfig":"12"},{"size":1235,"mtime":1668062510318,"results":"13","hashOfConfig":"12"},{"size":1063,"mtime":1667542862497,"results":"14","hashOfConfig":"12"},{"size":1511,"mtime":1668080783163,"results":"15","hashOfConfig":"12"},{"size":5023,"mtime":1668080799196,"results":"16","hashOfConfig":"12"},{"size":295,"mtime":1667584364238,"results":"17","hashOfConfig":"12"},{"size":9549,"mtime":1668063656975,"results":"18","hashOfConfig":"12"},{"size":847,"mtime":1668079956413,"results":"19","hashOfConfig":"12"},{"size":3156,"mtime":1668073412923,"results":"20","hashOfConfig":"12"},{"size":692,"mtime":1667633256781,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},"1ioiadz",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"26"},"/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/index.js",["58"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\n\n// const express = require(\"express\");\n// const router = express.Router();\n// const cors = require(\"cors\");\n// router.use(cors());\n\nReactDOM.render(<App/>, document.getElementById('root'));",[],"/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/App.js",[],[],"/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Home.js",["59"],[],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Nav from '../components/Nav';\nimport BlogPost from '../components/BlogPost';\nimport Container from '../components/Container';\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts: {}\n            , showContainer: false\n        };\n    }\n\n    componentDidMount() {\n        console.log(this.state.posts);\n        console.log(this.state.posts.length);\n\n\n\n\n    }\n\n    toggleContainer = (postID) => {\n        console.log('toggleContainer');\n        console.log(postID);\n        this.setState({\n            showContainer:!this.state.showContainer\n        })\n    }\n\n    render() {\n        let showContainer = this.state.showContainer\n        return (\n            <div>\n\n                <Nav />\n                {showContainer ? <Container content='# hello' />\n                :<BlogPost handlePostClick={this.toggleContainer} />}\n                \n                \n\n            </div>\n        );\n    }\n}\n\nexport default Home;","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/About.js",["60","61","62","63","64","65"],[],"/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/Post.js",["66","67","68","69","70","71","72","73","74","75","76","77","78"],[],"/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/page/404.js",["79"],[],"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Empty extends React.Component {\n\n\n    componentDidMount() {\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                <div>404 Not Found</div>\n            </div>\n        );\n    }\n}\n\nexport default Empty;","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/constantFunction.js",["80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],[],"import fetchJsonp from 'fetch-jsonp';\n\n// const fetchHeptabaseData = new Promise((resolve, reject) => {\n\n//     console.log('getHeptabaseData fetch');\n//     // 本地无数据\n//     // 获取 Heptabase 数据\n//     fetch(\n//         'https://app.heptabase.com/api/whiteboard/?secret=d4cc3728297609add1a00aab108e90c4e57a1c378cfc2307c251745bf7d2a884'\n//     )\n//         .then(res => res.json())\n//         .then(data => {\n//             console.log(data)\n\n//             let heptabase_blog_data = data\n\n//             const local_data = { 'createdTime': Date.parse(new Date()) / 1000, 'data': data }\n//             // 存储数据到本地缓存\n//             localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(local_data))\n//             // console.log(this.state.posts);\n\n//             console.log('getHeptabaseData return');\n//             // return heptabase_blog_data\n//             resolve(heptabase_blog_data)\n//         })\n//         .catch(e => console.log('错误:', e))\n\n// })\n\n// 修复单个 md 文件中的 img\nconst getClearImag = (card) => {\n\n    // 修改图片后缀，避免图片无法显示\n    // 找到 ![]( 符号\n    // 找到上述符号之后的第 1 个 jpg#/png#/gif# 符号\n    // 找到上一个步骤后的第 1 个 ) 符号\n    // 删除前面 2 步 index 中间的符号\n\n    console.log('getClearImag');\n\n    let content = card['content']\n\n    let img_type = ['.png', '.jpeg', '.jpg', '.gif']\n\n    let img_keyword_index = content.indexOf('![')\n\n    while (img_keyword_index != -1) {\n\n\n        // 获取下一个 ) 索引\n        let img_end_inex = content.indexOf(')', img_keyword_index)\n        // 获取图片扩展名索引\n        let img_etc_index\n        for (let i = 0; i < img_type.length; i++) {\n            img_etc_index = content.indexOf(img_type[i], img_keyword_index + 1)\n            if (img_etc_index >= 0 && img_etc_index <= img_end_inex) {\n\n                // 如果格式字符是这种格式 ![....jpg] 内，则跳过\n                if (content.substring(img_etc_index + img_type[i].length, img_etc_index + img_type[i].length + 2) == '](') {\n                    img_etc_index = content.indexOf(img_type[i], img_etc_index + 1)\n\n                }\n\n                img_etc_index += img_type[i].length\n                break;\n\n\n            }\n        }\n\n        // console.log('img_keyword_index');\n        // console.log(img_keyword_index);\n        // console.log('img_end_inex');\n        // console.log(img_end_inex);\n        // console.log('img_etc_index');\n        // console.log(img_etc_index);\n\n        if (img_keyword_index == -1 || img_end_inex == -1 || img_etc_index == -1) {\n            break\n        }\n\n        let old_img_str = content.substring(img_keyword_index, img_end_inex)\n        let new_img_str = content.substring(img_keyword_index, img_etc_index)\n\n        // console.log(old_img_str);\n        // console.log(new_img_str);\n\n        content = content.replace(old_img_str, new_img_str)\n\n        // 获取 ![ 索引\n        img_keyword_index = content.indexOf('![', img_keyword_index + 1)\n\n\n    }\n    card['content'] = content\n    return card\n\n}\n\n// 处理单个 md 文件中的超链接\nconst getClearCard = (card, cards) => {\n    console.log('getClearCard');\n    // 找到 (./ 符号以及之后的第 1 个 ，或找到 {{ 符号 }}) 符号，截取这 2 个 index 中间的字符串\n    // 将上述字符串放在 card 数据中匹配\n    // 如果找到匹配的卡片：修改上述字符串的地址为 /post/post.id\n    let content = card['content']\n    let this_card_id = card['id']\n\n\n    // 获取 {{ 符号\n    let card_keyword_index = content.indexOf('{{')\n    console.log(card_keyword_index);\n    while (card_keyword_index != -1) {\n\n        //获取卡片末尾的索引\n        let card_end_inex = content.indexOf('}}', card_keyword_index)\n\n        if (card_keyword_index == -1 || card_end_inex == -1) {\n            break\n        }\n\n        // console.log('card_keyword_index:');\n        // console.log(card_keyword_index);\n        // console.log('card_end_inex:');\n        // console.log(card_end_inex);\n\n        let old_card = content.substring(card_keyword_index, card_end_inex + 2)\n        // {{card xxxx-xxx-xxxx}}\n        let new_card = '{{未知卡片}}'\n\n        // 检验一下的确是 card\n        if (old_card.indexOf('card ') >= 0) {\n            // console.log('old_card：');\n            // console.log(old_card);\n\n            // 根据 ID 匹配数据中是否存在此卡片\n\n            for (let i = 0; i < cards.length; i++) {\n\n\n                // 处理当前卡片信息\n                if (old_card.indexOf(cards[i]['id']) >= 0) {\n                    // 存在：设置卡片链接\n                    new_card = '[' + cards[i]['title'] + ']' + '(' + '/post/' + cards[i]['id'] + ')'\n                    break\n                }\n\n\n\n            }\n\n            // console.log('new_card:');\n            // console.log(new_card);\n\n            content = content.replace(old_card, new_card)\n\n\n            card_keyword_index = content.indexOf('{{', card_keyword_index + 1)\n\n        }else{\n            break\n        }\n\n    }\n\n\n    // 获取 (./ 符号\n    let custom_card_keyword_index = content.indexOf('(./')\n    console.log(custom_card_keyword_index);\n    while (custom_card_keyword_index != -1) {\n\n        //获取卡片末尾的索引\n        let custom_card_end_inex = content.indexOf(')', custom_card_keyword_index)\n\n        if (custom_card_keyword_index == -1 || custom_card_end_inex == -1) {\n            break\n        }\n\n        let custom_old_card = content.substring(custom_card_end_inex, custom_card_keyword_index + 1)\n        // {{card xxxx-xxx-xxxx}}\n        let custom_new_card = '/404/'\n\n        // 根据 ID 匹配数据中是否存在此卡片\n\n        for (let i = 0; i < cards.length; i++) {\n\n            if (custom_old_card.indexOf(cards[i]['id']) >= 0) {\n                // 存在：设置卡片链接\n                custom_new_card = '/post/' + cards[i]['id'] + ')'\n                \n                break\n            }\n\n        }\n\n        console.log('custom_new_card:');\n        console.log(custom_new_card);\n\n        content = content.replace(custom_old_card, custom_new_card)\n\n\n        custom_card_keyword_index = content.indexOf('(./', card_keyword_index + 1)\n\n\n\n    }\n\n\n    // 处理反向连接\n    // 如果 A 卡片中存在当前笔记的 ID，则 A 卡片为当前笔记的反向链接之一\n    let backLinks = []\n    for (let i = 0; i < cards.length; i++) {\n\n        if (cards[i]['content'].indexOf(this_card_id) >= 0 && cards[i]['id'] != this_card_id) {\n            console.log(this_card_id);\n            // console.log(content);\n            console.log(cards[i]['title']);\n            backLinks.push(cards[i])\n        }\n\n    }\n\n    card['content'] = content\n    return {'card':card,'backLinks':backLinks}\n\n}\n\nconst getHeptabaseData = new Promise((resolve, reject) => {\n\n    console.log('getHeptabaseData');\n    console.log(window.performance);\n    console.log(performance);\n\n    // 获取本地数据\n    let heptabase_blog_data = localStorage.getItem(\"heptabase_blog_data\")\n\n\n    // 若本地存在数据则不重新获取\n    if (heptabase_blog_data != undefined) {\n\n        let createdTime = JSON.parse(heptabase_blog_data)['createdTime']\n        console.log(Date.parse(new Date()) / 1000);\n        console.log(createdTime);\n        console.log(Date.parse(new Date()) / 1000 - createdTime);\n        if (Date.parse(new Date()) / 1000 - createdTime >= 120) {\n            // 数据比较旧时再重新获取\n            // let heptabase_blog_data\n            console.log('数据比较旧');\n\n        } else {\n            console.log('从缓存获取数据');\n            // return heptabase_blog_data\n            resolve(JSON.parse(heptabase_blog_data))\n            return\n        }\n\n\n    }\n\n    console.log('heptabase_blog_data == undefined');\n\n    const header = new Headers({ \"Access-Control-Allow-Origin\": \"*\" });\n    const url = 'https://my-heptabase-api.vercel.app/'\n    // 获取 Heptabase 数据\n    fetch(url, {\n        method: \"get\",\n        header: header\n        // mode: 'no-cors'\n    })\n        .then(res => res.json())\n        .then(data => {\n            console.log(data)\n\n            let pages = {}\n            // 获取 About 页面的数据\n            pages.about = undefined\n            for (let i = 0; i < data.cards.length; i++) {\n                console.log(data.cards[i]['title']);\n                if (data.cards[i]['title'] == 'About') {\n                    pages.about = data.cards[i]\n                    break\n                }\n            }\n\n            const local_data = { 'createdTime': Date.parse(new Date()) / 1000, 'data': data, 'pages': pages }\n            // 存储数据到本地缓存\n            localStorage.setItem(\"heptabase_blog_data\", JSON.stringify(local_data))\n            // console.log(this.state.posts);\n\n            console.log('getHeptabaseData return');\n            // return heptabase_blog_data\n            resolve(local_data)\n        })\n        .catch(e => console.log('错误:', e))\n\n    // jsonp\n    // fetchJsonp('https://app.heptabase.com/api/whiteboard/?secret=d4cc3728297609add1a00aab108e90c4e57a1c378cfc2307c251745bf7d2a884')\n    //     .then(function (response) {\n    //         return response.json()\n    //     }).then((json) => {\n    //         console.log(json);\n    //         //用到this需要注意指向，箭头函数\n\n    //     }).catch(function (ex) {\n    //     })\n\n\n\n})\n\n\nexport { getHeptabaseData, getClearImag, getClearCard }","/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/components/Nav.js",["97","98"],[],"/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/components/BlogPost.js",["99","100","101","102"],[],"/Users/jiangzilong/学习/minpg/Heptabase-Blog/src/components/Container.js",["103","104"],[],"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Container extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { content: this.props.content };\n    }\n\n    componentDidMount() {\n        console.log('Container componentDidMount');\n\n\n    }\n\n    componentDidUpdate() {\n        console.log('Container componentDidUpdate');\n\n        if (this.props.content != this.state.content) {\n            this.setState({ content: this.props.content })\n        }\n\n    }\n\n    render() {\n\n        return (\n            <article>\n                <div>{this.state.content}</div>\n            </article>\n        );\n    }\n}\n\nexport default Container;",{"ruleId":"105","severity":1,"message":"106","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":23},{"ruleId":"105","severity":1,"message":"109","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":14},{"ruleId":"105","severity":1,"message":"109","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":14},{"ruleId":"105","severity":1,"message":"110","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":11},{"ruleId":"105","severity":1,"message":"111","line":5,"column":10,"nodeType":"107","messageId":"108","endLine":5,"endColumn":26},{"ruleId":"105","severity":1,"message":"112","line":5,"column":28,"nodeType":"107","messageId":"108","endLine":5,"endColumn":40},{"ruleId":"105","severity":1,"message":"113","line":5,"column":42,"nodeType":"107","messageId":"108","endLine":5,"endColumn":54},{"ruleId":"105","severity":1,"message":"114","line":8,"column":8,"nodeType":"107","messageId":"108","endLine":8,"endColumn":17},{"ruleId":"105","severity":1,"message":"115","line":3,"column":27,"nodeType":"107","messageId":"108","endLine":3,"endColumn":33},{"ruleId":"105","severity":1,"message":"116","line":3,"column":35,"nodeType":"107","messageId":"108","endLine":3,"endColumn":41},{"ruleId":"105","severity":1,"message":"117","line":3,"column":43,"nodeType":"107","messageId":"108","endLine":3,"endColumn":48},{"ruleId":"105","severity":1,"message":"118","line":9,"column":8,"nodeType":"107","messageId":"108","endLine":9,"endColumn":12},{"ruleId":"105","severity":1,"message":"119","line":10,"column":8,"nodeType":"107","messageId":"108","endLine":10,"endColumn":13},{"ruleId":"105","severity":1,"message":"120","line":11,"column":8,"nodeType":"107","messageId":"108","endLine":11,"endColumn":13},{"ruleId":"105","severity":1,"message":"121","line":29,"column":10,"nodeType":"107","messageId":"108","endLine":29,"endColumn":24},{"ruleId":"122","severity":1,"message":"123","line":43,"column":56,"nodeType":"124","messageId":"125","endLine":43,"endColumn":58},{"ruleId":"105","severity":1,"message":"126","line":69,"column":11,"nodeType":"107","messageId":"108","endLine":69,"endColumn":30},{"ruleId":"122","severity":1,"message":"127","line":73,"column":16,"nodeType":"124","messageId":"125","endLine":73,"endColumn":18},{"ruleId":"122","severity":1,"message":"127","line":90,"column":18,"nodeType":"124","messageId":"125","endLine":90,"endColumn":20},{"ruleId":"122","severity":1,"message":"127","line":91,"column":36,"nodeType":"124","messageId":"125","endLine":91,"endColumn":38},{"ruleId":"105","severity":1,"message":"128","line":134,"column":15,"nodeType":"107","messageId":"108","endLine":134,"endColumn":17},{"ruleId":"105","severity":1,"message":"109","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":14},{"ruleId":"105","severity":1,"message":"129","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":18},{"ruleId":"122","severity":1,"message":"127","line":47,"column":30,"nodeType":"124","messageId":"125","endLine":47,"endColumn":32},{"ruleId":"122","severity":1,"message":"123","line":59,"column":115,"nodeType":"124","messageId":"125","endLine":59,"endColumn":117},{"ruleId":"122","severity":1,"message":"123","line":78,"column":31,"nodeType":"124","messageId":"125","endLine":78,"endColumn":33},{"ruleId":"122","severity":1,"message":"123","line":78,"column":53,"nodeType":"124","messageId":"125","endLine":78,"endColumn":55},{"ruleId":"122","severity":1,"message":"123","line":78,"column":76,"nodeType":"124","messageId":"125","endLine":78,"endColumn":78},{"ruleId":"122","severity":1,"message":"127","line":113,"column":31,"nodeType":"124","messageId":"125","endLine":113,"endColumn":33},{"ruleId":"122","severity":1,"message":"123","line":118,"column":32,"nodeType":"124","messageId":"125","endLine":118,"endColumn":34},{"ruleId":"122","severity":1,"message":"123","line":118,"column":55,"nodeType":"124","messageId":"125","endLine":118,"endColumn":57},{"ruleId":"130","severity":1,"message":"131","line":144,"column":62,"nodeType":"124","messageId":"132","endLine":144,"endColumn":63},{"ruleId":"130","severity":1,"message":"131","line":144,"column":68,"nodeType":"124","messageId":"132","endLine":144,"endColumn":69},{"ruleId":"122","severity":1,"message":"127","line":170,"column":38,"nodeType":"124","messageId":"125","endLine":170,"endColumn":40},{"ruleId":"122","severity":1,"message":"123","line":175,"column":39,"nodeType":"124","messageId":"125","endLine":175,"endColumn":41},{"ruleId":"122","severity":1,"message":"123","line":175,"column":69,"nodeType":"124","messageId":"125","endLine":175,"endColumn":71},{"ruleId":"122","severity":1,"message":"127","line":214,"column":78,"nodeType":"124","messageId":"125","endLine":214,"endColumn":80},{"ruleId":"122","severity":1,"message":"127","line":239,"column":29,"nodeType":"124","messageId":"125","endLine":239,"endColumn":31},{"ruleId":"122","severity":1,"message":"123","line":279,"column":44,"nodeType":"124","messageId":"125","endLine":279,"endColumn":46},{"ruleId":"105","severity":1,"message":"111","line":3,"column":10,"nodeType":"107","messageId":"108","endLine":3,"endColumn":26},{"ruleId":"133","severity":1,"message":"134","line":18,"column":34,"nodeType":"135","endLine":18,"endColumn":91},{"ruleId":"105","severity":1,"message":"136","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":20},{"ruleId":"122","severity":1,"message":"123","line":79,"column":34,"nodeType":"124","messageId":"125","endLine":79,"endColumn":36},{"ruleId":"122","severity":1,"message":"127","line":79,"column":63,"nodeType":"124","messageId":"125","endLine":79,"endColumn":65},{"ruleId":"122","severity":1,"message":"127","line":84,"column":23,"nodeType":"124","messageId":"125","endLine":84,"endColumn":25},{"ruleId":"105","severity":1,"message":"109","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":14},{"ruleId":"122","severity":1,"message":"127","line":20,"column":32,"nodeType":"124","messageId":"125","endLine":20,"endColumn":34},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Nav' is defined but never used.","'getHeptabaseData' is defined but never used.","'getClearCard' is defined but never used.","'getClearImag' is defined but never used.","'remarkGfm' is defined but never used.","'Router' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'Home' is defined but never used.","'Empty' is defined but never used.","'About' is defined but never used.","'heptabase_data' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleBackLinkClick' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'mm' is assigned a value but never used.","'fetchJsonp' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'localStorage' is defined but never used."]